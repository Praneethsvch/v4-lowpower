
shutdown-2a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce90  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013f  0800d0c8  0800d0c8  0001d0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d208  0800d208  0001d208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d210  0800d210  0001d210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d214  0800d214  0001d214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000005c  20000000  0800d218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a28  2000005c  0800d274  0002005c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000a84  0800d274  00020a84  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 11 .debug_info   00028664  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000047f4  00000000  00000000  00048739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002120  00000000  00000000  0004cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000019b2  00000000  00000000  0004f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003bef9  00000000  00000000  00050a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002bdcb  00000000  00000000  0008c8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017c0cc  00000000  00000000  000b86c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000093cc  00000000  00000000  00234794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  0023db60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800d0b0 	.word	0x0800d0b0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	0800d0b0 	.word	0x0800d0b0

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b982 	b.w	80005a4 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002be:	460d      	mov	r5, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	460f      	mov	r7, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d146      	bne.n	8000356 <__udivmoddi4+0x9e>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4694      	mov	ip, r2
 80002cc:	d95e      	bls.n	800038c <__udivmoddi4+0xd4>
 80002ce:	fab2 f382 	clz	r3, r2
 80002d2:	b143      	cbz	r3, 80002e6 <__udivmoddi4+0x2e>
 80002d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	409c      	lsls	r4, r3
 80002e0:	fa20 f202 	lsr.w	r2, r0, r2
 80002e4:	4317      	orrs	r7, r2
 80002e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ea:	fa1f f58c 	uxth.w	r5, ip
 80002ee:	0c22      	lsrs	r2, r4, #16
 80002f0:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f8:	fb01 f005 	mul.w	r0, r1, r5
 80002fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000300:	4290      	cmp	r0, r2
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000304:	eb1c 0202 	adds.w	r2, ip, r2
 8000308:	f101 37ff 	add.w	r7, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	4290      	cmp	r0, r2
 8000310:	f200 8134 	bhi.w	800057c <__udivmoddi4+0x2c4>
 8000314:	4639      	mov	r1, r7
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	b2a4      	uxth	r4, r4
 800031a:	fbb2 f0fe 	udiv	r0, r2, lr
 800031e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032a:	42a5      	cmp	r5, r4
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x88>
 800032e:	eb1c 0404 	adds.w	r4, ip, r4
 8000332:	f100 32ff 	add.w	r2, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x86>
 8000338:	42a5      	cmp	r5, r4
 800033a:	f200 8119 	bhi.w	8000570 <__udivmoddi4+0x2b8>
 800033e:	4610      	mov	r0, r2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0x9a>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xb4>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80fc 	beq.w	8000558 <__udivmoddi4+0x2a0>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d14c      	bne.n	800040e <__udivmoddi4+0x156>
 8000374:	42ab      	cmp	r3, r5
 8000376:	f0c0 80f2 	bcc.w	800055e <__udivmoddi4+0x2a6>
 800037a:	4282      	cmp	r2, r0
 800037c:	f240 80ef 	bls.w	800055e <__udivmoddi4+0x2a6>
 8000380:	4608      	mov	r0, r1
 8000382:	2e00      	cmp	r6, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0x9a>
 8000386:	e9c6 4700 	strd	r4, r7, [r6]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0x9a>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xd8>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f382 	clz	r3, r2
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 809f 	bne.w	80004d8 <__udivmoddi4+0x220>
 800039a:	1a8a      	subs	r2, r1, r2
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fa1f f78c 	uxth.w	r7, ip
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb2 f5fe 	udiv	r5, r2, lr
 80003aa:	fb0e 2015 	mls	r0, lr, r5, r2
 80003ae:	0c22      	lsrs	r2, r4, #16
 80003b0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b4:	fb07 f005 	mul.w	r0, r7, r5
 80003b8:	4290      	cmp	r0, r2
 80003ba:	d90f      	bls.n	80003dc <__udivmoddi4+0x124>
 80003bc:	eb1c 0202 	adds.w	r2, ip, r2
 80003c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003c4:	bf2c      	ite	cs
 80003c6:	f04f 0901 	movcs.w	r9, #1
 80003ca:	f04f 0900 	movcc.w	r9, #0
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d903      	bls.n	80003da <__udivmoddi4+0x122>
 80003d2:	f1b9 0f00 	cmp.w	r9, #0
 80003d6:	f000 80ce 	beq.w	8000576 <__udivmoddi4+0x2be>
 80003da:	4645      	mov	r5, r8
 80003dc:	1a12      	subs	r2, r2, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003e8:	fb00 f707 	mul.w	r7, r0, r7
 80003ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x14e>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x14c>
 80003fe:	42a7      	cmp	r7, r4
 8000400:	f200 80b3 	bhi.w	800056a <__udivmoddi4+0x2b2>
 8000404:	4610      	mov	r0, r2
 8000406:	1be4      	subs	r4, r4, r7
 8000408:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040c:	e79c      	b.n	8000348 <__udivmoddi4+0x90>
 800040e:	f1c1 0420 	rsb	r4, r1, #32
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 fc01 	lsl.w	ip, r5, r1
 8000418:	fa22 f704 	lsr.w	r7, r2, r4
 800041c:	40e5      	lsrs	r5, r4
 800041e:	408a      	lsls	r2, r1
 8000420:	431f      	orrs	r7, r3
 8000422:	fa20 f304 	lsr.w	r3, r0, r4
 8000426:	4088      	lsls	r0, r1
 8000428:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800042c:	ea43 030c 	orr.w	r3, r3, ip
 8000430:	fa1f fc87 	uxth.w	ip, r7
 8000434:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000438:	fbb5 fef8 	udiv	lr, r5, r8
 800043c:	fb08 551e 	mls	r5, r8, lr, r5
 8000440:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a9      	cmp	r9, r5
 800044a:	d90e      	bls.n	800046a <__udivmoddi4+0x1b2>
 800044c:	197d      	adds	r5, r7, r5
 800044e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000452:	bf2c      	ite	cs
 8000454:	f04f 0b01 	movcs.w	fp, #1
 8000458:	f04f 0b00 	movcc.w	fp, #0
 800045c:	45a9      	cmp	r9, r5
 800045e:	d903      	bls.n	8000468 <__udivmoddi4+0x1b0>
 8000460:	f1bb 0f00 	cmp.w	fp, #0
 8000464:	f000 808d 	beq.w	8000582 <__udivmoddi4+0x2ca>
 8000468:	46d6      	mov	lr, sl
 800046a:	eba5 0509 	sub.w	r5, r5, r9
 800046e:	fa1f f983 	uxth.w	r9, r3
 8000472:	fbb5 f3f8 	udiv	r3, r5, r8
 8000476:	fb08 5513 	mls	r5, r8, r3, r5
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000482:	45ac      	cmp	ip, r5
 8000484:	d906      	bls.n	8000494 <__udivmoddi4+0x1dc>
 8000486:	197d      	adds	r5, r7, r5
 8000488:	f103 38ff 	add.w	r8, r3, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x1da>
 800048e:	45ac      	cmp	ip, r5
 8000490:	d87e      	bhi.n	8000590 <__udivmoddi4+0x2d8>
 8000492:	4643      	mov	r3, r8
 8000494:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000498:	eba5 050c 	sub.w	r5, r5, ip
 800049c:	fba3 9802 	umull	r9, r8, r3, r2
 80004a0:	4545      	cmp	r5, r8
 80004a2:	46ce      	mov	lr, r9
 80004a4:	46c4      	mov	ip, r8
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0x1f6>
 80004a8:	d106      	bne.n	80004b8 <__udivmoddi4+0x200>
 80004aa:	4548      	cmp	r0, r9
 80004ac:	d204      	bcs.n	80004b8 <__udivmoddi4+0x200>
 80004ae:	3b01      	subs	r3, #1
 80004b0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d06f      	beq.n	800059c <__udivmoddi4+0x2e4>
 80004bc:	ebb0 020e 	subs.w	r2, r0, lr
 80004c0:	eb65 050c 	sbc.w	r5, r5, ip
 80004c4:	40ca      	lsrs	r2, r1
 80004c6:	fa05 f404 	lsl.w	r4, r5, r4
 80004ca:	40cd      	lsrs	r5, r1
 80004cc:	4618      	mov	r0, r3
 80004ce:	4314      	orrs	r4, r2
 80004d0:	2100      	movs	r1, #0
 80004d2:	e9c6 4500 	strd	r4, r5, [r6]
 80004d6:	e73c      	b.n	8000352 <__udivmoddi4+0x9a>
 80004d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004dc:	f1c3 0220 	rsb	r2, r3, #32
 80004e0:	4099      	lsls	r1, r3
 80004e2:	409c      	lsls	r4, r3
 80004e4:	40d5      	lsrs	r5, r2
 80004e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ea:	fa20 f202 	lsr.w	r2, r0, r2
 80004ee:	fa1f f78c 	uxth.w	r7, ip
 80004f2:	fbb5 f0fe 	udiv	r0, r5, lr
 80004f6:	430a      	orrs	r2, r1
 80004f8:	fb0e 5510 	mls	r5, lr, r0, r5
 80004fc:	0c11      	lsrs	r1, r2, #16
 80004fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000502:	fb00 f507 	mul.w	r5, r0, r7
 8000506:	428d      	cmp	r5, r1
 8000508:	d90e      	bls.n	8000528 <__udivmoddi4+0x270>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000512:	bf2c      	ite	cs
 8000514:	f04f 0901 	movcs.w	r9, #1
 8000518:	f04f 0900 	movcc.w	r9, #0
 800051c:	428d      	cmp	r5, r1
 800051e:	d902      	bls.n	8000526 <__udivmoddi4+0x26e>
 8000520:	f1b9 0f00 	cmp.w	r9, #0
 8000524:	d031      	beq.n	800058a <__udivmoddi4+0x2d2>
 8000526:	4640      	mov	r0, r8
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000530:	fb0e 1115 	mls	r1, lr, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f107 	mul.w	r1, r5, r7
 800053c:	4291      	cmp	r1, r2
 800053e:	d907      	bls.n	8000550 <__udivmoddi4+0x298>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d201      	bcs.n	800054e <__udivmoddi4+0x296>
 800054a:	4291      	cmp	r1, r2
 800054c:	d823      	bhi.n	8000596 <__udivmoddi4+0x2de>
 800054e:	4645      	mov	r5, r8
 8000550:	1a52      	subs	r2, r2, r1
 8000552:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000556:	e726      	b.n	80003a6 <__udivmoddi4+0xee>
 8000558:	4631      	mov	r1, r6
 800055a:	4630      	mov	r0, r6
 800055c:	e6f9      	b.n	8000352 <__udivmoddi4+0x9a>
 800055e:	1a84      	subs	r4, r0, r2
 8000560:	eb65 0203 	sbc.w	r2, r5, r3
 8000564:	2001      	movs	r0, #1
 8000566:	4617      	mov	r7, r2
 8000568:	e70b      	b.n	8000382 <__udivmoddi4+0xca>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e74a      	b.n	8000406 <__udivmoddi4+0x14e>
 8000570:	4464      	add	r4, ip
 8000572:	3802      	subs	r0, #2
 8000574:	e6e4      	b.n	8000340 <__udivmoddi4+0x88>
 8000576:	3d02      	subs	r5, #2
 8000578:	4462      	add	r2, ip
 800057a:	e72f      	b.n	80003dc <__udivmoddi4+0x124>
 800057c:	3902      	subs	r1, #2
 800057e:	4462      	add	r2, ip
 8000580:	e6c9      	b.n	8000316 <__udivmoddi4+0x5e>
 8000582:	f1ae 0e02 	sub.w	lr, lr, #2
 8000586:	443d      	add	r5, r7
 8000588:	e76f      	b.n	800046a <__udivmoddi4+0x1b2>
 800058a:	3802      	subs	r0, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7cb      	b.n	8000528 <__udivmoddi4+0x270>
 8000590:	3b02      	subs	r3, #2
 8000592:	443d      	add	r5, r7
 8000594:	e77e      	b.n	8000494 <__udivmoddi4+0x1dc>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	e7d9      	b.n	8000550 <__udivmoddi4+0x298>
 800059c:	4618      	mov	r0, r3
 800059e:	4631      	mov	r1, r6
 80005a0:	e6d7      	b.n	8000352 <__udivmoddi4+0x9a>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_ADC4_Init>:

ADC_HandleTypeDef hadc4;

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	463b      	mov	r3, r7
 80005b0:	2220      	movs	r2, #32
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f00c f8e9 	bl	800c78c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80005ba:	4b36      	ldr	r3, [pc, #216]	; (8000694 <MX_ADC4_Init+0xec>)
 80005bc:	4a36      	ldr	r2, [pc, #216]	; (8000698 <MX_ADC4_Init+0xf0>)
 80005be:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005c0:	4b34      	ldr	r3, [pc, #208]	; (8000694 <MX_ADC4_Init+0xec>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <MX_ADC4_Init+0xec>)
 80005c8:	2204      	movs	r2, #4
 80005ca:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005cc:	4b31      	ldr	r3, [pc, #196]	; (8000694 <MX_ADC4_Init+0xec>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 80005d2:	4b30      	ldr	r3, [pc, #192]	; (8000694 <MX_ADC4_Init+0xec>)
 80005d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005d8:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_ADC4_Init+0xec>)
 80005dc:	2204      	movs	r2, #4
 80005de:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <MX_ADC4_Init+0xec>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80005e6:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <MX_ADC4_Init+0xec>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <MX_ADC4_Init+0xec>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfConversion = 2;
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_ADC4_Init+0xec>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80005fa:	4b26      	ldr	r3, [pc, #152]	; (8000694 <MX_ADC4_Init+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_ADC4_Init+0xec>)
 8000604:	2200      	movs	r2, #0
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_ADC4_Init+0xec>)
 800060a:	2200      	movs	r2, #0
 800060c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC4_Init+0xec>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC4_Init+0xec>)
 8000618:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800061c:	669a      	str	r2, [r3, #104]	; 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC4_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_ADC4_Init+0xec>)
 8000626:	2200      	movs	r2, #0
 8000628:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC4_Init+0xec>)
 800062c:	2200      	movs	r2, #0
 800062e:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_ADC4_Init+0xec>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000638:	4816      	ldr	r0, [pc, #88]	; (8000694 <MX_ADC4_Init+0xec>)
 800063a:	f001 ff15 	bl	8002468 <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC4_Init+0xa0>
  {
    Error_Handler();
 8000644:	f000 fbfa 	bl	8000e3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_ADC4_Init+0xf4>)
 800064a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000654:	2304      	movs	r3, #4
 8000656:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_ADC4_Init+0xec>)
 8000662:	f002 f9cb 	bl	80029fc <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC4_Init+0xc8>
  {
    Error_Handler();
 800066c:	f000 fbe6 	bl	8000e3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_ADC4_Init+0xf8>)
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000674:	2304      	movs	r3, #4
 8000676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_ADC4_Init+0xec>)
 800067e:	f002 f9bd 	bl	80029fc <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC4_Init+0xe4>
  {
    Error_Handler();
 8000688:	f000 fbd8 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000078 	.word	0x20000078
 8000698:	46021000 	.word	0x46021000
 800069c:	10000010 	.word	0x10000010
 80006a0:	24000200 	.word	0x24000200

080006a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0bc      	sub	sp, #240	; 0xf0
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	22c0      	movs	r2, #192	; 0xc0
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f00c f861 	bl	800c78c <memset>
  if(adcHandle->Instance==ADC4)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a33      	ldr	r2, [pc, #204]	; (800079c <HAL_ADC_MspInit+0xf8>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d15e      	bne.n	8000792 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80006d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006d8:	f04f 0300 	mov.w	r3, #0
 80006dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80006e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f005 fb41 	bl	8005d74 <HAL_RCCEx_PeriphCLKConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80006f8:	f000 fba0 	bl	8000e3c <Error_Handler>
    }

    /* ADC4 clock enable */
    __HAL_RCC_ADC4_CLK_ENABLE();
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <HAL_ADC_MspInit+0xfc>)
 80006fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000702:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <HAL_ADC_MspInit+0xfc>)
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <HAL_ADC_MspInit+0xfc>)
 800070e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000712:	f003 0320 	and.w	r3, r3, #32
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <HAL_ADC_MspInit+0xfc>)
 800071c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000720:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <HAL_ADC_MspInit+0xfc>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <HAL_ADC_MspInit+0xfc>)
 800072c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_ADC_MspInit+0xfc>)
 800073a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800073e:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <HAL_ADC_MspInit+0xfc>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_ADC_MspInit+0xfc>)
 800074a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PC3     ------> ADC4_IN4
    PA4     ------> ADC4_IN9
    */
    GPIO_InitStruct.Pin = ADC_SOLAR_V_Pin;
 8000756:	2308      	movs	r3, #8
 8000758:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075c:	2303      	movs	r3, #3
 800075e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(ADC_SOLAR_V_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800076c:	4619      	mov	r1, r3
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <HAL_ADC_MspInit+0x100>)
 8000770:	f003 f9d4 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_BATTERY_Pin;
 8000774:	2310      	movs	r3, #16
 8000776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077a:	2303      	movs	r3, #3
 800077c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(ADC_BATTERY_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800078a:	4619      	mov	r1, r3
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <HAL_ADC_MspInit+0x104>)
 800078e:	f003 f9c5 	bl	8003b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000792:	bf00      	nop
 8000794:	37f0      	adds	r7, #240	; 0xf0
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	46021000 	.word	0x46021000
 80007a0:	46020c00 	.word	0x46020c00
 80007a4:	42020800 	.word	0x42020800
 80007a8:	42020000 	.word	0x42020000

080007ac <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b79      	ldr	r3, [pc, #484]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 80007c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c8:	4a77      	ldr	r2, [pc, #476]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007d2:	4b75      	ldr	r3, [pc, #468]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 80007d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e0:	4b71      	ldr	r3, [pc, #452]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 80007e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007e6:	4a70      	ldr	r2, [pc, #448]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007f0:	4b6d      	ldr	r3, [pc, #436]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 80007f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b6a      	ldr	r3, [pc, #424]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 8000800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000804:	4a68      	ldr	r2, [pc, #416]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800080e:	4b66      	ldr	r3, [pc, #408]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 8000810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b62      	ldr	r3, [pc, #392]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 800081e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000822:	4a61      	ldr	r2, [pc, #388]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800082c:	4b5e      	ldr	r3, [pc, #376]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 800082e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b5b      	ldr	r3, [pc, #364]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 800083c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000840:	4a59      	ldr	r2, [pc, #356]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800084a:	4b57      	ldr	r3, [pc, #348]	; (80009a8 <MX_GPIO_Init+0x1fc>)
 800084c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEART_LED_GPIO_Port, HEART_LED_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2104      	movs	r1, #4
 800085c:	4853      	ldr	r0, [pc, #332]	; (80009ac <MX_GPIO_Init+0x200>)
 800085e:	f003 fc13 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WIFI_WAKEUP_Pin|WIFI_EN_Pin|ERROR_LED_Pin|LTE_EN_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000868:	4851      	ldr	r0, [pc, #324]	; (80009b0 <MX_GPIO_Init+0x204>)
 800086a:	f003 fc0d 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL_RST_Pin|GPSLNA_ON_Pin|LDO_ULTRA_ON_OFF_Pin|RANGE_ON_OFF_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f244 1111 	movw	r1, #16657	; 0x4111
 8000874:	484f      	ldr	r0, [pc, #316]	; (80009b4 <MX_GPIO_Init+0x208>)
 8000876:	f003 fc07 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTE_ON_OFF_GPIO_Port, LTE_ON_OFF_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000880:	484c      	ldr	r0, [pc, #304]	; (80009b4 <MX_GPIO_Init+0x208>)
 8000882:	f003 fc01 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4844      	ldr	r0, [pc, #272]	; (80009ac <MX_GPIO_Init+0x200>)
 800089c:	f003 f93e 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEART_LED_Pin;
 80008a0:	2304      	movs	r3, #4
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HEART_LED_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	483d      	ldr	r0, [pc, #244]	; (80009ac <MX_GPIO_Init+0x200>)
 80008b8:	f003 f930 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WIFI_WAKEUP_Pin|WIFI_EN_Pin|ERROR_LED_Pin|LTE_EN_Pin;
 80008bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4836      	ldr	r0, [pc, #216]	; (80009b0 <MX_GPIO_Init+0x204>)
 80008d6:	f003 f921 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = CELL_RST_Pin|GPSLNA_ON_Pin|LTE_ON_OFF_Pin|LDO_ULTRA_ON_OFF_Pin
 80008da:	f24c 1311 	movw	r3, #49425	; 0xc111
 80008de:	617b      	str	r3, [r7, #20]
                          |RANGE_ON_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4830      	ldr	r0, [pc, #192]	; (80009b4 <MX_GPIO_Init+0x208>)
 80008f4:	f003 f912 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB12
                           PB13 PB3 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 80008f8:	f243 630e 	movw	r3, #13838	; 0x360e
 80008fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4829      	ldr	r0, [pc, #164]	; (80009b4 <MX_GPIO_Init+0x208>)
 800090e:	f003 f905 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ACEL_INT2_Pin|ACEL_INT1_Pin;
 8000912:	23c0      	movs	r3, #192	; 0xc0
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000916:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <MX_GPIO_Init+0x20c>)
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4821      	ldr	r0, [pc, #132]	; (80009ac <MX_GPIO_Init+0x200>)
 8000926:	f003 f8f9 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIGHTSENSOR_INT_Pin;
 800092a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000930:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_GPIO_Init+0x20c>)
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIGHTSENSOR_INT_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	481c      	ldr	r0, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x204>)
 8000940:	f003 f8ec 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000944:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4815      	ldr	r0, [pc, #84]	; (80009b0 <MX_GPIO_Init+0x204>)
 800095a:	f003 f8df 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARGER_ON_OFF_INT_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_GPIO_Init+0x20c>)
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHARGER_ON_OFF_INT_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4810      	ldr	r0, [pc, #64]	; (80009b4 <MX_GPIO_Init+0x208>)
 8000972:	f003 f8d3 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000976:	2308      	movs	r3, #8
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097a:	2303      	movs	r3, #3
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <MX_GPIO_Init+0x210>)
 800098a:	f003 f8c7 	bl	8003b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2010      	movs	r0, #16
 8000994:	f002 ffe6 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000998:	2010      	movs	r0, #16
 800099a:	f002 fffd 	bl	8003998 <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	46020c00 	.word	0x46020c00
 80009ac:	42020800 	.word	0x42020800
 80009b0:	42020000 	.word	0x42020000
 80009b4:	42020400 	.word	0x42020400
 80009b8:	10110000 	.word	0x10110000
 80009bc:	42021c00 	.word	0x42021c00

080009c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_I2C1_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <MX_I2C1_Init+0x7c>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d8:	2201      	movs	r2, #1
 80009da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009fc:	f003 fb98 	bl	8004130 <HAL_I2C_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a06:	f000 fa19 	bl	8000e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a0e:	f003 fc2a 	bl	8004266 <HAL_I2CEx_ConfigAnalogFilter>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a18:	f000 fa10 	bl	8000e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a20:	f003 fc6c 	bl	80042fc <HAL_I2CEx_ConfigDigitalFilter>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 fa07 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000104 	.word	0x20000104
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	30909dec 	.word	0x30909dec

08000a40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0ba      	sub	sp, #232	; 0xe8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	22c0      	movs	r2, #192	; 0xc0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f00b fe93 	bl	800c78c <memset>
  if(i2cHandle->Instance==I2C1)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <HAL_I2C_MspInit+0xc4>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d144      	bne.n	8000afa <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a70:	f04f 0240 	mov.w	r2, #64	; 0x40
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4618      	mov	r0, r3
 8000a86:	f005 f975 	bl	8005d74 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000a90:	f000 f9d4 	bl	8000e3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_I2C_MspInit+0xc8>)
 8000a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a9a:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <HAL_I2C_MspInit+0xc8>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_I2C_MspInit+0xc8>)
 8000aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab2:	23c0      	movs	r3, #192	; 0xc0
 8000ab4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab8:	2312      	movs	r3, #18
 8000aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aca:	2304      	movs	r3, #4
 8000acc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	; (8000b0c <HAL_I2C_MspInit+0xcc>)
 8000ad8:	f003 f820 	bl	8003b1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_I2C_MspInit+0xc8>)
 8000ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ae2:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <HAL_I2C_MspInit+0xc8>)
 8000ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_I2C_MspInit+0xc8>)
 8000aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	37e8      	adds	r7, #232	; 0xe8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40005400 	.word	0x40005400
 8000b08:	46020c00 	.word	0x46020c00
 8000b0c:	42020400 	.word	0x42020400

08000b10 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <HAL_I2C_MspDeInit+0x3c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d10f      	bne.n	8000b42 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_I2C_MspDeInit+0x40>)
 8000b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <HAL_I2C_MspDeInit+0x40>)
 8000b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000b32:	2140      	movs	r1, #64	; 0x40
 8000b34:	4807      	ldr	r0, [pc, #28]	; (8000b54 <HAL_I2C_MspDeInit+0x44>)
 8000b36:	f003 f9c9 	bl	8003ecc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_I2C_MspDeInit+0x44>)
 8000b3e:	f003 f9c5 	bl	8003ecc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	46020c00 	.word	0x46020c00
 8000b54:	42020400 	.word	0x42020400

08000b58 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000b6c:	f003 fc42 	bl	80043f4 <HAL_ICACHE_Disable>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b76:	f000 f961 	bl	8000e3c <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000b7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b7e:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000b80:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000b84:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000b86:	2301      	movs	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	2000      	movs	r0, #0
 8000b98:	f003 fc5c 	bl	8004454 <HAL_ICACHE_EnableRemapRegion>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000ba2:	f000 f94b 	bl	8000e3c <Error_Handler>
  }

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f003 fbf4 	bl	8004394 <HAL_ICACHE_ConfigAssociativityMode>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ICACHE_Init+0x5e>
  {
    Error_Handler();
 8000bb2:	f000 f943 	bl	8000e3c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000bb6:	f003 fc0d 	bl	80043d4 <HAL_ICACHE_Enable>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ICACHE_Init+0x6c>
  {
    Error_Handler();
 8000bc0:	f000 f93c 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f001 f8f0 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f828 	bl	8000c28 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000bd8:	f000 f885 	bl	8000ce6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f7ff fde6 	bl	80007ac <MX_GPIO_Init>
  MX_UART4_Init();
 8000be0:	f000 fd0c 	bl	80015fc <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000be4:	f000 fda2 	bl	800172c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000be8:	f000 fdf4 	bl	80017d4 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 8000bec:	f000 fa54 	bl	8001098 <MX_SDMMC1_SD_Init>
  MX_LPUART1_UART_Init();
 8000bf0:	f000 fcba 	bl	8001568 <MX_LPUART1_UART_Init>
  MX_ADC4_Init();
 8000bf4:	f7ff fcd8 	bl	80005a8 <MX_ADC4_Init>
  MX_USART1_UART_Init();
 8000bf8:	f000 fd4c 	bl	8001694 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 8000bfc:	f7ff ffac 	bl	8000b58 <MX_ICACHE_Init>
  MX_I2C1_Init();
 8000c00:	f7ff fede 	bl	80009c0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000c04:	f000 f920 	bl	8000e48 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(3000);
 8000c08:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c0c:	f001 f920 	bl	8001e50 <HAL_Delay>
  serialPutStr("hello!\n");
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <main+0x58>)
 8000c12:	f000 f87f 	bl	8000d14 <serialPutStr>
  HAL_Delay(3000);
 8000c16:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c1a:	f001 f919 	bl	8001e50 <HAL_Delay>
  system_powersave();
 8000c1e:	f000 f897 	bl	8000d50 <system_powersave>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <main+0x56>
 8000c24:	0800d0c8 	.word	0x0800d0c8

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09e      	sub	sp, #120	; 0x78
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	2260      	movs	r2, #96	; 0x60
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00b fda8 	bl	800c78c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c4c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000c50:	f003 fcd0 	bl	80045f4 <HAL_PWREx_ControlVoltageScaling>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000c5a:	f000 f8ef 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c5e:	230a      	movs	r3, #10
 8000c60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c76:	2302      	movs	r3, #2
 8000c78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c86:	230a      	movs	r3, #10
 8000c88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000c96:	230c      	movs	r3, #12
 8000c98:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 fd7e 	bl	80047a4 <HAL_RCC_OscConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000cae:	f000 f8c5 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	231f      	movs	r3, #31
 8000cb4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 fc44 	bl	800555c <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cda:	f000 f8af 	bl	8000e3c <Error_Handler>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3778      	adds	r7, #120	; 0x78
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 fbfa 	bl	80044f8 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 8000d04:	f003 fc66 	bl	80045d4 <HAL_PWR_EnablePVD>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d08:	f003 fd3c 	bl	8004784 <HAL_PWREx_DisableUCPDDeadBattery>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <serialPutStr>:

/* USER CODE BEGIN 4 */
void serialPutStr(const char *data) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  sprintf(TransmitBuffer,"%s",data);
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4909      	ldr	r1, [pc, #36]	; (8000d44 <serialPutStr+0x30>)
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <serialPutStr+0x34>)
 8000d22:	f00b fd13 	bl	800c74c <siprintf>
  HAL_UART_Transmit(&hlpuart1,(uint8_t *)TransmitBuffer, strlen(TransmitBuffer), 150);
 8000d26:	4808      	ldr	r0, [pc, #32]	; (8000d48 <serialPutStr+0x34>)
 8000d28:	f7ff faa6 	bl	8000278 <strlen>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	2396      	movs	r3, #150	; 0x96
 8000d32:	4905      	ldr	r1, [pc, #20]	; (8000d48 <serialPutStr+0x34>)
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <serialPutStr+0x38>)
 8000d36:	f009 ff39 	bl	800abac <HAL_UART_Transmit>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	0800d0d0 	.word	0x0800d0d0
 8000d48:	20000158 	.word	0x20000158
 8000d4c:	20000654 	.word	0x20000654

08000d50 <system_powersave>:

void system_powersave(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	/* CELL/WiFi subsystem shutdown using FET switch */
	HAL_GPIO_WritePin(LTE_ON_OFF_GPIO_Port, LTE_ON_OFF_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5a:	4825      	ldr	r0, [pc, #148]	; (8000df0 <system_powersave+0xa0>)
 8000d5c:	f003 f994 	bl	8004088 <HAL_GPIO_WritePin>

	HAL_UART_MspDeInit(&hlpuart1);
 8000d60:	4824      	ldr	r0, [pc, #144]	; (8000df4 <system_powersave+0xa4>)
 8000d62:	f000 ff7b 	bl	8001c5c <HAL_UART_MspDeInit>
	HAL_UART_MspDeInit(&huart1);
 8000d66:	4824      	ldr	r0, [pc, #144]	; (8000df8 <system_powersave+0xa8>)
 8000d68:	f000 ff78 	bl	8001c5c <HAL_UART_MspDeInit>
	HAL_UART_MspDeInit(&huart2);
 8000d6c:	4823      	ldr	r0, [pc, #140]	; (8000dfc <system_powersave+0xac>)
 8000d6e:	f000 ff75 	bl	8001c5c <HAL_UART_MspDeInit>
	HAL_UART_MspDeInit(&huart3);
 8000d72:	4823      	ldr	r0, [pc, #140]	; (8000e00 <system_powersave+0xb0>)
 8000d74:	f000 ff72 	bl	8001c5c <HAL_UART_MspDeInit>
	HAL_UART_MspDeInit(&huart4);
 8000d78:	4822      	ldr	r0, [pc, #136]	; (8000e04 <system_powersave+0xb4>)
 8000d7a:	f000 ff6f 	bl	8001c5c <HAL_UART_MspDeInit>
	HAL_I2C_MspDeInit(&hi2c1);
 8000d7e:	4822      	ldr	r0, [pc, #136]	; (8000e08 <system_powersave+0xb8>)
 8000d80:	f7ff fec6 	bl	8000b10 <HAL_I2C_MspDeInit>
	HAL_SD_MspDeInit(&hsd1);
 8000d84:	4821      	ldr	r0, [pc, #132]	; (8000e0c <system_powersave+0xbc>)
 8000d86:	f000 fa43 	bl	8001210 <HAL_SD_MspDeInit>
	HAL_RTC_MspDeInit(&hrtc);
 8000d8a:	4821      	ldr	r0, [pc, #132]	; (8000e10 <system_powersave+0xc0>)
 8000d8c:	f000 f958 	bl	8001040 <HAL_RTC_MspDeInit>

	HAL_SuspendTick();
 8000d90:	f000 faf2 	bl	8001378 <HAL_SuspendTick>

	__HAL_RCC_GPIOC_CLK_DISABLE();
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <system_powersave+0xc4>)
 8000d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d9a:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <system_powersave+0xc4>)
 8000d9c:	f023 0304 	bic.w	r3, r3, #4
 8000da0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <system_powersave+0xc4>)
 8000da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000daa:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <system_powersave+0xc4>)
 8000dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000db0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <system_powersave+0xc4>)
 8000db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <system_powersave+0xc4>)
 8000dbc:	f023 0301 	bic.w	r3, r3, #1
 8000dc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <system_powersave+0xc4>)
 8000dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <system_powersave+0xc4>)
 8000dcc:	f023 0302 	bic.w	r3, r3, #2
 8000dd0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <system_powersave+0xc4>)
 8000dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <system_powersave+0xc4>)
 8000ddc:	f023 0308 	bic.w	r3, r3, #8
 8000de0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	HAL_PWREx_EnterSTOP3Mode(PWR_STOPENTRY_WFI);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f003 fc91 	bl	800470c <HAL_PWREx_EnterSTOP3Mode>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	42020400 	.word	0x42020400
 8000df4:	20000654 	.word	0x20000654
 8000df8:	2000077c 	.word	0x2000077c
 8000dfc:	20000810 	.word	0x20000810
 8000e00:	200008a4 	.word	0x200008a4
 8000e04:	200006e8 	.word	0x200006e8
 8000e08:	20000104 	.word	0x20000104
 8000e0c:	20000588 	.word	0x20000588
 8000e10:	20000558 	.word	0x20000558
 8000e14:	46020c00 	.word	0x46020c00

08000e18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e2a:	f000 fff1 	bl	8001e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40001000 	.word	0x40001000

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09a      	sub	sp, #104	; 0x68
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000e4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000e62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  RTC_AlarmTypeDef sAlarm = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2230      	movs	r2, #48	; 0x30
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f00b fc85 	bl	800c78c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e82:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000e84:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <MX_RTC_Init+0x15c>)
 8000e86:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e88:	4b45      	ldr	r3, [pc, #276]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e8e:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000e90:	227f      	movs	r2, #127	; 0x7f
 8000e92:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e94:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000e96:	22ff      	movs	r2, #255	; 0xff
 8000e98:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e9a:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ea6:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eac:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000eba:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ec0:	4837      	ldr	r0, [pc, #220]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000ec2:	f007 fbf9 	bl	80086b8 <HAL_RTC_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8000ecc:	f7ff ffb6 	bl	8000e3c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	65bb      	str	r3, [r7, #88]	; 0x58
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	65fb      	str	r3, [r7, #92]	; 0x5c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000ee0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	482e      	ldr	r0, [pc, #184]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000ee8:	f007 ff56 	bl	8008d98 <HAL_RTCEx_PrivilegeModeSet>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8000ef2:	f7ff ffa3 	bl	8000e3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sTime.Minutes = 0x0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  sTime.Seconds = 0x0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	647b      	str	r3, [r7, #68]	; 0x44
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000f1a:	f007 fc4f 	bl	80087bc <HAL_RTC_SetTime>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_RTC_Init+0xe0>
  {
    Error_Handler();
 8000f24:	f7ff ff8a 	bl	8000e3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sDate.Month = RTC_MONTH_JANUARY;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sDate.Date = 0x1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sDate.Year = 0x0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f44:	2201      	movs	r2, #1
 8000f46:	4619      	mov	r1, r3
 8000f48:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000f4a:	f007 fcd3 	bl	80088f4 <HAL_RTC_SetDate>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8000f54:	f7ff ff72 	bl	8000e3c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2201      	movs	r2, #1
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_RTC_Init+0x158>)
 8000f88:	f007 fd3a 	bl	8008a00 <HAL_RTC_SetAlarm>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_RTC_Init+0x14e>
  {
    Error_Handler();
 8000f92:	f7ff ff53 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3768      	adds	r7, #104	; 0x68
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000558 	.word	0x20000558
 8000fa4:	46007800 	.word	0x46007800

08000fa8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b0b4      	sub	sp, #208	; 0xd0
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	22c0      	movs	r2, #192	; 0xc0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f00b fbe7 	bl	800c78c <memset>
  if(rtcHandle->Instance==RTC)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_RTC_MspInit+0x90>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d132      	bne.n	800102e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fc8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f004 fec7 	bl	8005d74 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000fec:	f7ff ff26 	bl	8000e3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_RTC_MspInit+0x94>)
 8000ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ff6:	4a11      	ldr	r2, [pc, #68]	; (800103c <HAL_RTC_MspInit+0x94>)
 8000ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ffc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_RTC_MspInit+0x94>)
 8001002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001006:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_RTC_MspInit+0x94>)
 8001008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_RTC_MspInit+0x94>)
 8001012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <HAL_RTC_MspInit+0x94>)
 8001020:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <HAL_RTC_MspInit+0x94>)
 8001026:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	37d0      	adds	r7, #208	; 0xd0
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	46007800 	.word	0x46007800
 800103c:	46020c00 	.word	0x46020c00

08001040 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_RTC_MspDeInit+0x50>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d117      	bne.n	8001082 <HAL_RTC_MspDeInit+0x42>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_RTC_MspDeInit+0x54>)
 8001054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_RTC_MspDeInit+0x54>)
 800105a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800105e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_RTC_MspDeInit+0x54>)
 8001064:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_RTC_MspDeInit+0x54>)
 800106a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800106e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    __HAL_RCC_RTCAPB_CLKAM_DISABLE();
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_RTC_MspDeInit+0x54>)
 8001074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_RTC_MspDeInit+0x54>)
 800107a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800107e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	46007800 	.word	0x46007800
 8001094:	46020c00 	.word	0x46020c00

08001098 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SDMMC1_SD_Init+0x40>)
 800109e:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <MX_SDMMC1_SD_Init+0x44>)
 80010a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_SDMMC1_SD_Init+0x40>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_SDMMC1_SD_Init+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SDMMC1_SD_Init+0x40>)
 80010b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_SDMMC1_SD_Init+0x40>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SDMMC1_SD_Init+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_SDMMC1_SD_Init+0x40>)
 80010c4:	f007 fe96 	bl	8008df4 <HAL_SD_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80010ce:	f7ff feb5 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000588 	.word	0x20000588
 80010dc:	420c8000 	.word	0x420c8000

080010e0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0bc      	sub	sp, #240	; 0xf0
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	22c0      	movs	r2, #192	; 0xc0
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00b fb43 	bl	800c78c <memset>
  if(sdHandle->Instance==SDMMC1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a3d      	ldr	r2, [pc, #244]	; (8001200 <HAL_SD_MspInit+0x120>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d173      	bne.n	80011f8 <HAL_SD_MspInit+0x118>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001110:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL1;
 800111c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	4618      	mov	r0, r3
 800112a:	f004 fe23 	bl	8005d74 <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001134:	f7ff fe82 	bl	8000e3c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_SD_MspInit+0x124>)
 800113a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800113e:	4a31      	ldr	r2, [pc, #196]	; (8001204 <HAL_SD_MspInit+0x124>)
 8001140:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001144:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_SD_MspInit+0x124>)
 800114a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800114e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_SD_MspInit+0x124>)
 8001158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800115c:	4a29      	ldr	r2, [pc, #164]	; (8001204 <HAL_SD_MspInit+0x124>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <HAL_SD_MspInit+0x124>)
 8001168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <HAL_SD_MspInit+0x124>)
 8001176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <HAL_SD_MspInit+0x124>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_SD_MspInit+0x124>)
 8001186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001192:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a6:	2302      	movs	r3, #2
 80011a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011ac:	230c      	movs	r3, #12
 80011ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011b6:	4619      	mov	r1, r3
 80011b8:	4813      	ldr	r0, [pc, #76]	; (8001208 <HAL_SD_MspInit+0x128>)
 80011ba:	f002 fcaf 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011be:	2304      	movs	r3, #4
 80011c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2302      	movs	r3, #2
 80011d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011d6:	230c      	movs	r3, #12
 80011d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011e0:	4619      	mov	r1, r3
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <HAL_SD_MspInit+0x12c>)
 80011e4:	f002 fc9a 	bl	8003b1c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	204e      	movs	r0, #78	; 0x4e
 80011ee:	f002 fbb9 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011f2:	204e      	movs	r0, #78	; 0x4e
 80011f4:	f002 fbd0 	bl	8003998 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	37f0      	adds	r7, #240	; 0xf0
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	420c8000 	.word	0x420c8000
 8001204:	46020c00 	.word	0x46020c00
 8001208:	42020800 	.word	0x42020800
 800120c:	42020c00 	.word	0x42020c00

08001210 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDMMC1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <HAL_SD_MspDeInit+0x44>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d113      	bne.n	800124a <HAL_SD_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_SD_MspDeInit+0x48>)
 8001224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_SD_MspDeInit+0x48>)
 800122a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800122e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001232:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001236:	4809      	ldr	r0, [pc, #36]	; (800125c <HAL_SD_MspDeInit+0x4c>)
 8001238:	f002 fe48 	bl	8003ecc <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 800123c:	2104      	movs	r1, #4
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <HAL_SD_MspDeInit+0x50>)
 8001240:	f002 fe44 	bl	8003ecc <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8001244:	204e      	movs	r0, #78	; 0x4e
 8001246:	f002 fbb5 	bl	80039b4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	420c8000 	.word	0x420c8000
 8001258:	46020c00 	.word	0x46020c00
 800125c:	42020800 	.word	0x42020800
 8001260:	42020c00 	.word	0x42020c00

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_MspInit+0x30>)
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001270:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_MspInit+0x30>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_MspInit+0x30>)
 800127c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001288:	f003 fa6c 	bl	8004764 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	46020c00 	.word	0x46020c00

08001298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <HAL_InitTick+0xcc>)
 80012aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012ae:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <HAL_InitTick+0xcc>)
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <HAL_InitTick+0xcc>)
 80012ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012c6:	f107 0210 	add.w	r2, r7, #16
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 fc91 	bl	8005bf8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012d6:	f004 fc53 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 80012da:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	4a22      	ldr	r2, [pc, #136]	; (8001368 <HAL_InitTick+0xd0>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	0c9b      	lsrs	r3, r3, #18
 80012e6:	3b01      	subs	r3, #1
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_InitTick+0xd4>)
 80012ec:	4a20      	ldr	r2, [pc, #128]	; (8001370 <HAL_InitTick+0xd8>)
 80012ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <HAL_InitTick+0xd4>)
 80012f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012f8:	4a1c      	ldr	r2, [pc, #112]	; (800136c <HAL_InitTick+0xd4>)
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_InitTick+0xd4>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_InitTick+0xd4>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <HAL_InitTick+0xd4>)
 800130c:	f009 f844 	bl	800a398 <HAL_TIM_Base_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001316:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800131a:	2b00      	cmp	r3, #0
 800131c:	d118      	bne.n	8001350 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800131e:	4813      	ldr	r0, [pc, #76]	; (800136c <HAL_InitTick+0xd4>)
 8001320:	f009 f89c 	bl	800a45c <HAL_TIM_Base_Start_IT>
 8001324:	4603      	mov	r3, r0
 8001326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800132a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10e      	bne.n	8001350 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d808      	bhi.n	800134a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	2031      	movs	r0, #49	; 0x31
 800133e:	f002 fb11 	bl	8003964 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001342:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <HAL_InitTick+0xdc>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	e002      	b.n	8001350 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001350:	2031      	movs	r0, #49	; 0x31
 8001352:	f002 fb21 	bl	8003998 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001356:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800135a:	4618      	mov	r0, r3
 800135c:	3738      	adds	r7, #56	; 0x38
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	46020c00 	.word	0x46020c00
 8001368:	431bde83 	.word	0x431bde83
 800136c:	20000604 	.word	0x20000604
 8001370:	40001000 	.word	0x40001000
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_SuspendTick+0x20>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_SuspendTick+0x20>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	60da      	str	r2, [r3, #12]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000604 	.word	0x20000604

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHARGER_ON_OFF_INT_Pin);
 80013f6:	2020      	movs	r0, #32
 80013f8:	f002 fe5e 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <TIM6_IRQHandler+0x10>)
 8001406:	f009 f8c9 	bl	800a59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000604 	.word	0x20000604

08001414 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <USART1_IRQHandler+0x10>)
 800141a:	f009 fc65 	bl	800ace8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000077c 	.word	0x2000077c

08001428 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <USART2_IRQHandler+0x10>)
 800142e:	f009 fc5b 	bl	800ace8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000810 	.word	0x20000810

0800143c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <USART3_IRQHandler+0x10>)
 8001442:	f009 fc51 	bl	800ace8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200008a4 	.word	0x200008a4

08001450 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <UART4_IRQHandler+0x10>)
 8001456:	f009 fc47 	bl	800ace8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200006e8 	.word	0x200006e8

08001464 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <LPUART1_IRQHandler+0x10>)
 800146a:	f009 fc3d 	bl	800ace8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000654 	.word	0x20000654

08001478 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <SDMMC1_IRQHandler+0x10>)
 800147e:	f007 fdd9 	bl	8009034 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000588 	.word	0x20000588

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f00b f96e 	bl	800c79c <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200c0000 	.word	0x200c0000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	20000650 	.word	0x20000650
 80014f4:	20000a88 	.word	0x20000a88

080014f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <SystemInit+0x68>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001502:	4a17      	ldr	r2, [pc, #92]	; (8001560 <SystemInit+0x68>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <SystemInit+0x6c>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <SystemInit+0x6c>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <SystemInit+0x6c>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <SystemInit+0x6c>)
 8001520:	2200      	movs	r2, #0
 8001522:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <SystemInit+0x6c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <SystemInit+0x6c>)
 800152a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800152e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001532:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <SystemInit+0x6c>)
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <SystemInit+0x6c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <SystemInit+0x6c>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <SystemInit+0x6c>)
 8001548:	2200      	movs	r2, #0
 800154a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SystemInit+0x68>)
 800154e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001552:	609a      	str	r2, [r3, #8]
  #endif
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00
 8001564:	46020c00 	.word	0x46020c00

08001568 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 800156e:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <MX_LPUART1_UART_Init+0x90>)
 8001570:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80015aa:	4812      	ldr	r0, [pc, #72]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 80015ac:	f009 faae 	bl	800ab0c <HAL_UART_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80015b6:	f7ff fc41 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 80015be:	f00a fabc 	bl	800bb3a <HAL_UARTEx_SetTxFifoThreshold>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80015c8:	f7ff fc38 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 80015d0:	f00a faf1 	bl	800bbb6 <HAL_UARTEx_SetRxFifoThreshold>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80015da:	f7ff fc2f 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_LPUART1_UART_Init+0x8c>)
 80015e0:	f00a fa72 	bl	800bac8 <HAL_UARTEx_DisableFifoMode>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80015ea:	f7ff fc27 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000654 	.word	0x20000654
 80015f8:	46002400 	.word	0x46002400

080015fc <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <MX_UART4_Init+0x90>)
 8001602:	4a23      	ldr	r2, [pc, #140]	; (8001690 <MX_UART4_Init+0x94>)
 8001604:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <MX_UART4_Init+0x90>)
 8001608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800160c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <MX_UART4_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_UART4_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <MX_UART4_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <MX_UART4_Init+0x90>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <MX_UART4_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <MX_UART4_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <MX_UART4_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_UART4_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <MX_UART4_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <MX_UART4_Init+0x90>)
 8001646:	f009 fa61 	bl	800ab0c <HAL_UART_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001650:	f7ff fbf4 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	480d      	ldr	r0, [pc, #52]	; (800168c <MX_UART4_Init+0x90>)
 8001658:	f00a fa6f 	bl	800bb3a <HAL_UARTEx_SetTxFifoThreshold>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001662:	f7ff fbeb 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4808      	ldr	r0, [pc, #32]	; (800168c <MX_UART4_Init+0x90>)
 800166a:	f00a faa4 	bl	800bbb6 <HAL_UARTEx_SetRxFifoThreshold>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001674:	f7ff fbe2 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_UART4_Init+0x90>)
 800167a:	f00a fa25 	bl	800bac8 <HAL_UARTEx_DisableFifoMode>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001684:	f7ff fbda 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200006e8 	.word	0x200006e8
 8001690:	40004c00 	.word	0x40004c00

08001694 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_USART1_UART_Init+0x90>)
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <MX_USART1_UART_Init+0x94>)
 800169c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016dc:	4811      	ldr	r0, [pc, #68]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016de:	f009 fa15 	bl	800ab0c <HAL_UART_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016e8:	f7ff fba8 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <MX_USART1_UART_Init+0x90>)
 80016f0:	f00a fa23 	bl	800bb3a <HAL_UARTEx_SetTxFifoThreshold>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016fa:	f7ff fb9f 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fe:	2100      	movs	r1, #0
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <MX_USART1_UART_Init+0x90>)
 8001702:	f00a fa58 	bl	800bbb6 <HAL_UARTEx_SetRxFifoThreshold>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800170c:	f7ff fb96 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_USART1_UART_Init+0x90>)
 8001712:	f00a f9d9 	bl	800bac8 <HAL_UARTEx_DisableFifoMode>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800171c:	f7ff fb8e 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000077c 	.word	0x2000077c
 8001728:	40013800 	.word	0x40013800

0800172c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001730:	4b26      	ldr	r3, [pc, #152]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001732:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <MX_USART2_UART_Init+0xa4>)
 8001734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001770:	2218      	movs	r2, #24
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001776:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800177a:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 800177e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001782:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001784:	4811      	ldr	r0, [pc, #68]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001786:	f009 f9c1 	bl	800ab0c <HAL_UART_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001790:	f7ff fb54 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001794:	2100      	movs	r1, #0
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 8001798:	f00a f9cf 	bl	800bb3a <HAL_UARTEx_SetTxFifoThreshold>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80017a2:	f7ff fb4b 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a6:	2100      	movs	r1, #0
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 80017aa:	f00a fa04 	bl	800bbb6 <HAL_UARTEx_SetRxFifoThreshold>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f7ff fb42 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_USART2_UART_Init+0xa0>)
 80017ba:	f00a f985 	bl	800bac8 <HAL_UARTEx_DisableFifoMode>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_USART2_UART_Init+0x9c>
  {
    Error_Handler();
 80017c4:	f7ff fb3a 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000810 	.word	0x20000810
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d8:	4b26      	ldr	r3, [pc, #152]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <MX_USART3_UART_Init+0xa4>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b23      	ldr	r3, [pc, #140]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 8001818:	2218      	movs	r2, #24
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 800181e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001822:	639a      	str	r2, [r3, #56]	; 0x38
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 8001826:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 800182e:	f009 f96d 	bl	800ab0c <HAL_UART_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001838:	f7ff fb00 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183c:	2100      	movs	r1, #0
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 8001840:	f00a f97b 	bl	800bb3a <HAL_UARTEx_SetTxFifoThreshold>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800184a:	f7ff faf7 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800184e:	2100      	movs	r1, #0
 8001850:	4808      	ldr	r0, [pc, #32]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 8001852:	f00a f9b0 	bl	800bbb6 <HAL_UARTEx_SetRxFifoThreshold>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800185c:	f7ff faee 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_USART3_UART_Init+0xa0>)
 8001862:	f00a f931 	bl	800bac8 <HAL_UARTEx_DisableFifoMode>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 800186c:	f7ff fae6 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200008a4 	.word	0x200008a4
 8001878:	40004800 	.word	0x40004800

0800187c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0c2      	sub	sp, #264	; 0x108
 8001880:	af00      	add	r7, sp, #0
 8001882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800188a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800189c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a0:	22c0      	movs	r2, #192	; 0xc0
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00a ff71 	bl	800c78c <memset>
  if(uartHandle->Instance==LPUART1)
 80018aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80018ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4aad      	ldr	r2, [pc, #692]	; (8001b6c <HAL_UART_MspInit+0x2f0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d14e      	bne.n	800195a <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018bc:	f04f 0220 	mov.w	r2, #32
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80018c8:	2302      	movs	r3, #2
 80018ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 fa4e 	bl	8005d74 <HAL_RCCEx_PeriphCLKConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80018de:	f7ff faad 	bl	8000e3c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018e2:	4ba3      	ldr	r3, [pc, #652]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 80018e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80018e8:	4aa1      	ldr	r2, [pc, #644]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 80018ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ee:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80018f2:	4b9f      	ldr	r3, [pc, #636]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 80018f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80018f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001900:	4b9b      	ldr	r3, [pc, #620]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001906:	4a9a      	ldr	r2, [pc, #616]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001910:	4b97      	ldr	r3, [pc, #604]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
 800191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = DEBUG_RX_Pin|DEBUG_TX_Pin;
 800191e:	2303      	movs	r3, #3
 8001920:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001936:	2308      	movs	r3, #8
 8001938:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001940:	4619      	mov	r1, r3
 8001942:	488c      	ldr	r0, [pc, #560]	; (8001b74 <HAL_UART_MspInit+0x2f8>)
 8001944:	f002 f8ea 	bl	8003b1c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2042      	movs	r0, #66	; 0x42
 800194e:	f002 f809 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001952:	2042      	movs	r0, #66	; 0x42
 8001954:	f002 f820 	bl	8003998 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001958:	e175      	b.n	8001c46 <HAL_UART_MspInit+0x3ca>
  else if(uartHandle->Instance==UART4)
 800195a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800195e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a84      	ldr	r2, [pc, #528]	; (8001b78 <HAL_UART_MspInit+0x2fc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d14e      	bne.n	8001a0a <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800196c:	f04f 0208 	mov.w	r2, #8
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001982:	4618      	mov	r0, r3
 8001984:	f004 f9f6 	bl	8005d74 <HAL_RCCEx_PeriphCLKConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_UART_MspInit+0x116>
      Error_Handler();
 800198e:	f7ff fa55 	bl	8000e3c <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001992:	4b77      	ldr	r3, [pc, #476]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001994:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001998:	4a75      	ldr	r2, [pc, #468]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 800199a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800199e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80019a2:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 80019a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b0:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 80019b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019c0:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 80019c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	623b      	str	r3, [r7, #32]
 80019cc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = LORA_TX_Pin|LORA_RX_Pin;
 80019ce:	2303      	movs	r3, #3
 80019d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019e6:	2308      	movs	r3, #8
 80019e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4862      	ldr	r0, [pc, #392]	; (8001b7c <HAL_UART_MspInit+0x300>)
 80019f4:	f002 f892 	bl	8003b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2040      	movs	r0, #64	; 0x40
 80019fe:	f001 ffb1 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001a02:	2040      	movs	r0, #64	; 0x40
 8001a04:	f001 ffc8 	bl	8003998 <HAL_NVIC_EnableIRQ>
}
 8001a08:	e11d      	b.n	8001c46 <HAL_UART_MspInit+0x3ca>
  else if(uartHandle->Instance==USART1)
 8001a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5a      	ldr	r2, [pc, #360]	; (8001b80 <HAL_UART_MspInit+0x304>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d14f      	bne.n	8001abc <HAL_UART_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a1c:	f04f 0201 	mov.w	r2, #1
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 f99e 	bl	8005d74 <HAL_RCCEx_PeriphCLKConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 8001a3e:	f7ff f9fd 	bl	8000e3c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a42:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001a44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a48:	4a49      	ldr	r2, [pc, #292]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001a52:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001a54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a66:	4a42      	ldr	r2, [pc, #264]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a70:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TX_TP_Pin|ULTRASOUND_DATAIN_Pin;
 8001a7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a98:	2307      	movs	r3, #7
 8001a9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4835      	ldr	r0, [pc, #212]	; (8001b7c <HAL_UART_MspInit+0x300>)
 8001aa6:	f002 f839 	bl	8003b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	203d      	movs	r0, #61	; 0x3d
 8001ab0:	f001 ff58 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ab4:	203d      	movs	r0, #61	; 0x3d
 8001ab6:	f001 ff6f 	bl	8003998 <HAL_NVIC_EnableIRQ>
}
 8001aba:	e0c4      	b.n	8001c46 <HAL_UART_MspInit+0x3ca>
  else if(uartHandle->Instance==USART2)
 8001abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2e      	ldr	r2, [pc, #184]	; (8001b84 <HAL_UART_MspInit+0x308>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d15c      	bne.n	8001b88 <HAL_UART_MspInit+0x30c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ace:	f04f 0202 	mov.w	r2, #2
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8001ada:	2308      	movs	r3, #8
 8001adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 f945 	bl	8005d74 <HAL_RCCEx_PeriphCLKConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_UART_MspInit+0x278>
      Error_Handler();
 8001af0:	f7ff f9a4 	bl	8000e3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_UART_MspInit+0x2f4>)
 8001b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = WIFI_TX_Pin|WIFI_RX_Pin;
 8001b30:	230c      	movs	r3, #12
 8001b32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <HAL_UART_MspInit+0x300>)
 8001b56:	f001 ffe1 	bl	8003b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	203e      	movs	r0, #62	; 0x3e
 8001b60:	f001 ff00 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b64:	203e      	movs	r0, #62	; 0x3e
 8001b66:	f001 ff17 	bl	8003998 <HAL_NVIC_EnableIRQ>
}
 8001b6a:	e06c      	b.n	8001c46 <HAL_UART_MspInit+0x3ca>
 8001b6c:	46002400 	.word	0x46002400
 8001b70:	46020c00 	.word	0x46020c00
 8001b74:	42020800 	.word	0x42020800
 8001b78:	40004c00 	.word	0x40004c00
 8001b7c:	42020000 	.word	0x42020000
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8001b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2e      	ldr	r2, [pc, #184]	; (8001c50 <HAL_UART_MspInit+0x3d4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d155      	bne.n	8001c46 <HAL_UART_MspInit+0x3ca>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b9a:	f04f 0204 	mov.w	r2, #4
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 f8df 	bl	8005d74 <HAL_RCCEx_PeriphCLKConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_UART_MspInit+0x344>
      Error_Handler();
 8001bbc:	f7ff f93e 	bl	8000e3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_UART_MspInit+0x3d8>)
 8001bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bc6:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_UART_MspInit+0x3d8>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_UART_MspInit+0x3d8>)
 8001bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_UART_MspInit+0x3d8>)
 8001be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_UART_MspInit+0x3d8>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_UART_MspInit+0x3d8>)
 8001bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf4:	f003 0204 	and.w	r2, r3, #4
 8001bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bfc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c0a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = MODEM_TX_Pin|MODEM_RX_Pin;
 8001c0c:	2330      	movs	r3, #48	; 0x30
 8001c0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c24:	2307      	movs	r3, #7
 8001c26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4809      	ldr	r0, [pc, #36]	; (8001c58 <HAL_UART_MspInit+0x3dc>)
 8001c32:	f001 ff73 	bl	8003b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	203f      	movs	r0, #63	; 0x3f
 8001c3c:	f001 fe92 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c40:	203f      	movs	r0, #63	; 0x3f
 8001c42:	f001 fea9 	bl	8003998 <HAL_NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40004800 	.word	0x40004800
 8001c54:	46020c00 	.word	0x46020c00
 8001c58:	42020800 	.word	0x42020800

08001c5c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a35      	ldr	r2, [pc, #212]	; (8001d40 <HAL_UART_MspDeInit+0xe4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10f      	bne.n	8001c8e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8001c6e:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <HAL_UART_MspDeInit+0xe8>)
 8001c70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001c74:	4a33      	ldr	r2, [pc, #204]	; (8001d44 <HAL_UART_MspDeInit+0xe8>)
 8001c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c7a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, DEBUG_RX_Pin|DEBUG_TX_Pin);
 8001c7e:	2103      	movs	r1, #3
 8001c80:	4831      	ldr	r0, [pc, #196]	; (8001d48 <HAL_UART_MspDeInit+0xec>)
 8001c82:	f002 f923 	bl	8003ecc <HAL_GPIO_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8001c86:	2042      	movs	r0, #66	; 0x42
 8001c88:	f001 fe94 	bl	80039b4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8001c8c:	e053      	b.n	8001d36 <HAL_UART_MspDeInit+0xda>
  else if(uartHandle->Instance==UART4)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a2e      	ldr	r2, [pc, #184]	; (8001d4c <HAL_UART_MspDeInit+0xf0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d10f      	bne.n	8001cb8 <HAL_UART_MspDeInit+0x5c>
    __HAL_RCC_UART4_CLK_DISABLE();
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_UART_MspDeInit+0xe8>)
 8001c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c9e:	4a29      	ldr	r2, [pc, #164]	; (8001d44 <HAL_UART_MspDeInit+0xe8>)
 8001ca0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ca4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOA, LORA_TX_Pin|LORA_RX_Pin);
 8001ca8:	2103      	movs	r1, #3
 8001caa:	4829      	ldr	r0, [pc, #164]	; (8001d50 <HAL_UART_MspDeInit+0xf4>)
 8001cac:	f002 f90e 	bl	8003ecc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8001cb0:	2040      	movs	r0, #64	; 0x40
 8001cb2:	f001 fe7f 	bl	80039b4 <HAL_NVIC_DisableIRQ>
}
 8001cb6:	e03e      	b.n	8001d36 <HAL_UART_MspDeInit+0xda>
  else if(uartHandle->Instance==USART1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a25      	ldr	r2, [pc, #148]	; (8001d54 <HAL_UART_MspDeInit+0xf8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d110      	bne.n	8001ce4 <HAL_UART_MspDeInit+0x88>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_UART_MspDeInit+0xe8>)
 8001cc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cc8:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <HAL_UART_MspDeInit+0xe8>)
 8001cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cce:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    HAL_GPIO_DeInit(GPIOA, TX_TP_Pin|ULTRASOUND_DATAIN_Pin);
 8001cd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001cd6:	481e      	ldr	r0, [pc, #120]	; (8001d50 <HAL_UART_MspDeInit+0xf4>)
 8001cd8:	f002 f8f8 	bl	8003ecc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001cdc:	203d      	movs	r0, #61	; 0x3d
 8001cde:	f001 fe69 	bl	80039b4 <HAL_NVIC_DisableIRQ>
}
 8001ce2:	e028      	b.n	8001d36 <HAL_UART_MspDeInit+0xda>
  else if(uartHandle->Instance==USART2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <HAL_UART_MspDeInit+0xfc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10f      	bne.n	8001d0e <HAL_UART_MspDeInit+0xb2>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_UART_MspDeInit+0xe8>)
 8001cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cf4:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_UART_MspDeInit+0xe8>)
 8001cf6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001cfa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOA, WIFI_TX_Pin|WIFI_RX_Pin);
 8001cfe:	210c      	movs	r1, #12
 8001d00:	4813      	ldr	r0, [pc, #76]	; (8001d50 <HAL_UART_MspDeInit+0xf4>)
 8001d02:	f002 f8e3 	bl	8003ecc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001d06:	203e      	movs	r0, #62	; 0x3e
 8001d08:	f001 fe54 	bl	80039b4 <HAL_NVIC_DisableIRQ>
}
 8001d0c:	e013      	b.n	8001d36 <HAL_UART_MspDeInit+0xda>
  else if(uartHandle->Instance==USART3)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <HAL_UART_MspDeInit+0x100>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d10e      	bne.n	8001d36 <HAL_UART_MspDeInit+0xda>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_UART_MspDeInit+0xe8>)
 8001d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_UART_MspDeInit+0xe8>)
 8001d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOC, MODEM_TX_Pin|MODEM_RX_Pin);
 8001d28:	2130      	movs	r1, #48	; 0x30
 8001d2a:	4807      	ldr	r0, [pc, #28]	; (8001d48 <HAL_UART_MspDeInit+0xec>)
 8001d2c:	f002 f8ce 	bl	8003ecc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001d30:	203f      	movs	r0, #63	; 0x3f
 8001d32:	f001 fe3f 	bl	80039b4 <HAL_NVIC_DisableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	46002400 	.word	0x46002400
 8001d44:	46020c00 	.word	0x46020c00
 8001d48:	42020800 	.word	0x42020800
 8001d4c:	40004c00 	.word	0x40004c00
 8001d50:	42020000 	.word	0x42020000
 8001d54:	40013800 	.word	0x40013800
 8001d58:	40004400 	.word	0x40004400
 8001d5c:	40004800 	.word	0x40004800

08001d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d98 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d64:	f7ff fbc8 	bl	80014f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d6a:	e003      	b.n	8001d74 <LoopCopyDataInit>

08001d6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d72:	3104      	adds	r1, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d74:	480a      	ldr	r0, [pc, #40]	; (8001da0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d7c:	d3f6      	bcc.n	8001d6c <CopyDataInit>
	ldr	r2, =_sbss
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d80:	e002      	b.n	8001d88 <LoopFillZerobss>

08001d82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d84:	f842 3b04 	str.w	r3, [r2], #4

08001d88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <LoopForever+0x16>)
	cmp	r2, r3
 8001d8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d8c:	d3f9      	bcc.n	8001d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f00a fd0b 	bl	800c7a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d92:	f7fe ff1b 	bl	8000bcc <main>

08001d96 <LoopForever>:

LoopForever:
    b LoopForever
 8001d96:	e7fe      	b.n	8001d96 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001d98:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001d9c:	0800d218 	.word	0x0800d218
	ldr	r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001da4:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001da8:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001dac:	20000a84 	.word	0x20000a84

08001db0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC1_IRQHandler>
	...

08001db4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_Init+0x4c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <HAL_Init+0x4c>)
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f001 fdc2 	bl	800394e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001dca:	f003 fdb9 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_Init+0x50>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	490b      	ldr	r1, [pc, #44]	; (8001e08 <HAL_Init+0x54>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_Init+0x58>)
 8001de2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de4:	200f      	movs	r0, #15
 8001de6:	f7ff fa57 	bl	8001298 <HAL_InitTick>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e002      	b.n	8001dfa <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f7ff fa36 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40022000 	.word	0x40022000
 8001e04:	46020c00 	.word	0x46020c00
 8001e08:	0800d0d4 	.word	0x0800d0d4
 8001e0c:	20000000 	.word	0x20000000

08001e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000938 	.word	0x20000938

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000938 	.word	0x20000938

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008

08001e98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_GetREVID+0x18>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	b29b      	uxth	r3, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e0044000 	.word	0xe0044000

08001eb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	601a      	str	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <LL_ADC_SetResolution+0x3c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d104      	bne.n	8001f3c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f023 020c 	bic.w	r2, r3, #12
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	46021000 	.word	0x46021000

08001f5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3360      	adds	r3, #96	; 0x60
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3360      	adds	r3, #96	; 0x60
 8001fac:	461a      	mov	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b087      	sub	sp, #28
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3360      	adds	r3, #96	; 0x60
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	601a      	str	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	3360      	adds	r3, #96	; 0x60
 8002010:	461a      	mov	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	431a      	orrs	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	601a      	str	r2, [r3, #0]
}
 800202a:	bf00      	nop
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002036:	b480      	push	{r7}
 8002038:	b087      	sub	sp, #28
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3360      	adds	r3, #96	; 0x60
 8002046:	461a      	mov	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	431a      	orrs	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800207e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	2a00      	cmp	r2, #0
 8002096:	d002      	beq.n	800209e <LL_ADC_SetGainCompensation+0x32>
 8002098:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800209c:	e000      	b.n	80020a0 <LL_ADC_SetGainCompensation+0x34>
 800209e:	2200      	movs	r2, #0
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2107      	movs	r1, #7
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	401a      	ands	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	431a      	orrs	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a2b      	ldr	r2, [pc, #172]	; (80021ac <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d020      	beq.n	8002146 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3330      	adds	r3, #48	; 0x30
 8002108:	461a      	mov	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	4413      	add	r3, r2
 8002116:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	211f      	movs	r1, #31
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	401a      	ands	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	0e9b      	lsrs	r3, r3, #26
 8002130:	f003 011f 	and.w	r1, r3, #31
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	431a      	orrs	r2, r3
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002144:	e02b      	b.n	800219e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	210f      	movs	r1, #15
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	401a      	ands	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	e010      	b.n	8002190 <LL_ADC_REG_SetSequencerRanks+0xa0>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	613b      	str	r3, [r7, #16]
  return result;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	f001 011f 	and.w	r1, r1, #31
 8002196:	408b      	lsls	r3, r1
 8002198:	431a      	orrs	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800219e:	bf00      	nop
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	46021000 	.word	0x46021000

080021b0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <LL_ADC_REG_SetSequencerChAdd+0x24>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	0e9b      	lsrs	r3, r3, #26
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	2201      	movs	r2, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	e015      	b.n	8002200 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	60fb      	str	r3, [r7, #12]
  return result;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e003      	b.n	80021f6 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	2201      	movs	r2, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	0e9b      	lsrs	r3, r3, #26
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	401a      	ands	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002248:	b480      	push	{r7}
 800224a:	b08b      	sub	sp, #44	; 0x2c
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a2d      	ldr	r2, [pc, #180]	; (800230c <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d042      	beq.n	80022e2 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d104      	bne.n	8002270 <LL_ADC_SetChannelSamplingTime+0x28>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	f003 021f 	and.w	r2, r3, #31
 800226e:	e011      	b.n	8002294 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	617b      	str	r3, [r7, #20]
  return result;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002286:	2320      	movs	r3, #32
 8002288:	e003      	b.n	8002292 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0e5b      	lsrs	r3, r3, #25
 8002298:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800229c:	460b      	mov	r3, r1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	1ad2      	subs	r2, r2, r3
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3314      	adds	r3, #20
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	0e5b      	lsrs	r3, r3, #25
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	4413      	add	r3, r2
 80022c0:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	2107      	movs	r1, #7
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	401a      	ands	r2, r3
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	431a      	orrs	r2, r3
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80022e0:	e00e      	b.n	8002300 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	43db      	mvns	r3, r3
 80022ec:	401a      	ands	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	0219      	lsls	r1, r3, #8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	400b      	ands	r3, r1
 80022f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022fa:	431a      	orrs	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	615a      	str	r2, [r3, #20]
}
 8002300:	bf00      	nop
 8002302:	372c      	adds	r7, #44	; 0x2c
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	46021000 	.word	0x46021000

08002310 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0318 	and.w	r3, r3, #24
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002334:	40d9      	lsrs	r1, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	400b      	ands	r3, r1
 800233a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800233e:	431a      	orrs	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	000fffff 	.word	0x000fffff

08002358 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6093      	str	r3, [r2, #8]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800238c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002390:	d101      	bne.n	8002396 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80023b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023e0:	d101      	bne.n	80023e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <LL_ADC_IsEnabled+0x18>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <LL_ADC_IsEnabled+0x1a>
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b04      	cmp	r3, #4
 800242c:	d101      	bne.n	8002432 <LL_ADC_REG_IsConversionOngoing+0x18>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b08      	cmp	r3, #8
 8002452:	d101      	bne.n	8002458 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e2b3      	b.n	80029f0 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a8b      	ldr	r2, [pc, #556]	; (80026c4 <HAL_ADC_Init+0x25c>)
 8002496:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7fe f8ff 	bl	80006a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5f 	bl	800237c <LL_ADC_IsDeepPowerDownEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff45 	bl	8002358 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff7a 	bl	80023cc <LL_ADC_IsInternalRegulatorEnabled>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d115      	bne.n	800250a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff5e 	bl	80023a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024e8:	4b77      	ldr	r3, [pc, #476]	; (80026c8 <HAL_ADC_Init+0x260>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	4a77      	ldr	r2, [pc, #476]	; (80026cc <HAL_ADC_Init+0x264>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	3301      	adds	r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024fc:	e002      	b.n	8002504 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3b01      	subs	r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f9      	bne.n	80024fe <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff5c 	bl	80023cc <LL_ADC_IsInternalRegulatorEnabled>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10e      	bne.n	8002538 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800251e:	f043 0210 	orr.w	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff6c 	bl	800241a <LL_ADC_REG_IsConversionOngoing>
 8002542:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 8244 	bne.w	80029da <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 8240 	bne.w	80029da <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800255e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002562:	f043 0202 	orr.w	r2, r3, #2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff40 	bl	80023f4 <LL_ADC_IsEnabled>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d140      	bne.n	80025fc <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a51      	ldr	r2, [pc, #324]	; (80026c4 <HAL_ADC_Init+0x25c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d028      	beq.n	80025d6 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a51      	ldr	r2, [pc, #324]	; (80026d0 <HAL_ADC_Init+0x268>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d109      	bne.n	80025a2 <HAL_ADC_Init+0x13a>
 800258e:	4850      	ldr	r0, [pc, #320]	; (80026d0 <HAL_ADC_Init+0x268>)
 8002590:	f7ff ff30 	bl	80023f4 <LL_ADC_IsEnabled>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	e008      	b.n	80025b4 <HAL_ADC_Init+0x14c>
 80025a2:	4848      	ldr	r0, [pc, #288]	; (80026c4 <HAL_ADC_Init+0x25c>)
 80025a4:	f7ff ff26 	bl	80023f4 <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d021      	beq.n	80025fc <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a44      	ldr	r2, [pc, #272]	; (80026d0 <HAL_ADC_Init+0x268>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Init+0x15e>
 80025c2:	4a44      	ldr	r2, [pc, #272]	; (80026d4 <HAL_ADC_Init+0x26c>)
 80025c4:	e000      	b.n	80025c8 <HAL_ADC_Init+0x160>
 80025c6:	4a44      	ldr	r2, [pc, #272]	; (80026d8 <HAL_ADC_Init+0x270>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f7ff fc70 	bl	8001eb4 <LL_ADC_SetCommonClock>
 80025d4:	e012      	b.n	80025fc <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f7ff fc9b 	bl	8001f1c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80025e6:	4b3c      	ldr	r3, [pc, #240]	; (80026d8 <HAL_ADC_Init+0x270>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025f6:	4938      	ldr	r1, [pc, #224]	; (80026d8 <HAL_ADC_Init+0x270>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_ADC_Init+0x25c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d010      	beq.n	8002628 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800260c:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002612:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002618:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002620:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002622:	4313      	orrs	r3, r2
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	e030      	b.n	800268a <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7f1b      	ldrb	r3, [r3, #28]
 800262c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002634:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002636:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800263c:	2a00      	cmp	r2, #0
 800263e:	d002      	beq.n	8002646 <HAL_ADC_Init+0x1de>
 8002640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002644:	e000      	b.n	8002648 <HAL_ADC_Init+0x1e0>
 8002646:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002648:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800264e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	da04      	bge.n	8002662 <HAL_ADC_Init+0x1fa>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002660:	e001      	b.n	8002666 <HAL_ADC_Init+0x1fe>
 8002662:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8002666:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4918      	ldr	r1, [pc, #96]	; (80026d0 <HAL_ADC_Init+0x268>)
 800266e:	428b      	cmp	r3, r1
 8002670:	d103      	bne.n	800267a <HAL_ADC_Init+0x212>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002678:	e003      	b.n	8002682 <HAL_ADC_Init+0x21a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002680:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002682:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002684:	6a3a      	ldr	r2, [r7, #32]
 8002686:	4313      	orrs	r3, r2
 8002688:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d12f      	bne.n	80026f4 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_ADC_Init+0x25c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	3b01      	subs	r3, #1
 80026a4:	045b      	lsls	r3, r3, #17
 80026a6:	6a3a      	ldr	r2, [r7, #32]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	e022      	b.n	80026f4 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	623b      	str	r3, [r7, #32]
 80026c0:	e018      	b.n	80026f4 <HAL_ADC_Init+0x28c>
 80026c2:	bf00      	nop
 80026c4:	46021000 	.word	0x46021000
 80026c8:	20000000 	.word	0x20000000
 80026cc:	053e2d63 	.word	0x053e2d63
 80026d0:	42028000 	.word	0x42028000
 80026d4:	42028308 	.word	0x42028308
 80026d8:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a92      	ldr	r2, [pc, #584]	; (8002944 <HAL_ADC_Init+0x4dc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d018      	beq.n	8002730 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	4313      	orrs	r3, r2
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	4313      	orrs	r3, r2
 8002718:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	4b89      	ldr	r3, [pc, #548]	; (8002948 <HAL_ADC_Init+0x4e0>)
 8002722:	4013      	ands	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	6a39      	ldr	r1, [r7, #32]
 800272a:	430b      	orrs	r3, r1
 800272c:	60d3      	str	r3, [r2, #12]
 800272e:	e031      	b.n	8002794 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	4313      	orrs	r3, r2
 8002746:	6a3a      	ldr	r2, [r7, #32]
 8002748:	4313      	orrs	r3, r2
 800274a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	4b7e      	ldr	r3, [pc, #504]	; (800294c <HAL_ADC_Init+0x4e4>)
 8002754:	4013      	ands	r3, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	6a39      	ldr	r1, [r7, #32]
 800275c:	430b      	orrs	r3, r1
 800275e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6a      	ldr	r2, [pc, #424]	; (8002944 <HAL_ADC_Init+0x4dc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	f000 8093 	beq.w	80028c6 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fe38 	bl	800241a <LL_ADC_REG_IsConversionOngoing>
 80027aa:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fe45 	bl	8002440 <LL_ADC_INJ_IsConversionOngoing>
 80027b6:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d161      	bne.n	8002882 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d15e      	bne.n	8002882 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7f1b      	ldrb	r3, [r3, #28]
 80027c8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4960      	ldr	r1, [pc, #384]	; (8002950 <HAL_ADC_Init+0x4e8>)
 80027d0:	428b      	cmp	r3, r1
 80027d2:	d102      	bne.n	80027da <HAL_ADC_Init+0x372>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	e002      	b.n	80027e0 <HAL_ADC_Init+0x378>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027e0:	4313      	orrs	r3, r2
 80027e2:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	6a39      	ldr	r1, [r7, #32]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4619      	mov	r1, r3
 800280e:	4610      	mov	r0, r2
 8002810:	f7ff fc2c 	bl	800206c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800281a:	2b01      	cmp	r3, #1
 800281c:	d11e      	bne.n	800285c <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_ADC_Init+0x4ec>)
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002832:	0411      	lsls	r1, r2, #16
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002844:	4311      	orrs	r1, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800284a:	0892      	lsrs	r2, r2, #2
 800284c:	430a      	orrs	r2, r1
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	e007      	b.n	800286c <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d10c      	bne.n	80028a4 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	f023 010f 	bic.w	r1, r3, #15
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	1e5a      	subs	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
 80028a2:	e007      	b.n	80028b4 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 020f 	bic.w	r2, r2, #15
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b8:	f023 0303 	bic.w	r3, r3, #3
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028c4:	e092      	b.n	80029ec <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d111      	bne.n	80028f4 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028d8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80028de:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80028e4:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <HAL_ADC_Init+0x4f0>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	69f9      	ldr	r1, [r7, #28]
 8002904:	430b      	orrs	r3, r1
 8002906:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002910:	461a      	mov	r2, r3
 8002912:	2100      	movs	r1, #0
 8002914:	f7ff fbcd 	bl	80020b2 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002920:	461a      	mov	r2, r3
 8002922:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8002926:	f7ff fbc4 	bl	80020b2 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d114      	bne.n	800295c <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f062 020f 	orn	r2, r2, #15
 8002940:	629a      	str	r2, [r3, #40]	; 0x28
 8002942:	e024      	b.n	800298e <HAL_ADC_Init+0x526>
 8002944:	46021000 	.word	0x46021000
 8002948:	fff0c013 	.word	0xfff0c013
 800294c:	ffde800d 	.word	0xffde800d
 8002950:	42028000 	.word	0x42028000
 8002954:	fc00f81e 	.word	0xfc00f81e
 8002958:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002964:	d113      	bne.n	800298e <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f003 031c 	and.w	r3, r3, #28
 8002978:	f06f 020f 	mvn.w	r2, #15
 800297c:	fa02 f103 	lsl.w	r1, r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_ADC_Init+0x590>)
 8002996:	4013      	ands	r3, r2
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	429a      	cmp	r2, r3
 800299c:	d10b      	bne.n	80029b6 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a8:	f023 0303 	bic.w	r3, r3, #3
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029b4:	e01a      	b.n	80029ec <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ba:	f023 0312 	bic.w	r3, r3, #18
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029d8:	e008      	b.n	80029ec <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029de:	f043 0210 	orr.w	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80029ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3728      	adds	r7, #40	; 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	833ffff3 	.word	0x833ffff3

080029fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b0bc      	sub	sp, #240	; 0xf0
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4aa8      	ldr	r2, [pc, #672]	; (8002cb8 <HAL_ADC_ConfigChannel+0x2bc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d103      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d102      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x36>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f000 beb5 	b.w	800379c <HAL_ADC_ConfigChannel+0xda0>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fceb 	bl	800241a <LL_ADC_REG_IsConversionOngoing>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f040 8695 	bne.w	8003776 <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a99      	ldr	r2, [pc, #612]	; (8002cb8 <HAL_ADC_ConfigChannel+0x2bc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	f000 83ea 	beq.w	800322c <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d108      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x7a>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2201      	movs	r2, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	e01d      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0xb6>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8002a8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8002a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	e004      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2201      	movs	r2, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	69d1      	ldr	r1, [r2, #28]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f7ff fb0f 	bl	80020f0 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fc9f 	bl	800241a <LL_ADC_REG_IsConversionOngoing>
 8002adc:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fcab 	bl	8002440 <LL_ADC_INJ_IsConversionOngoing>
 8002aea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 81ed 	bne.w	8002ed2 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f040 81e8 	bne.w	8002ed2 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f7ff fb9a 	bl	8002248 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d046      	beq.n	8002bc4 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6919      	ldr	r1, [r3, #16]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b46:	f7ff fa09 	bl	8001f5c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6919      	ldr	r1, [r3, #16]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f7ff fa37 	bl	8001fca <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	7e9b      	ldrb	r3, [r3, #26]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d11e      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x17e>
 8002b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b78:	e000      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x180>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f7ff fa5a 	bl	8002036 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d102      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x19c>
 8002b92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b96:	e000      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x19e>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f7ff fa30 	bl	8002000 <LL_ADC_SetOffsetSignedSaturation>
 8002ba0:	e197      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2200      	movs	r2, #0
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7ff fa42 	bl	8002036 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f7ff fa1f 	bl	8002000 <LL_ADC_SetOffsetSignedSaturation>
 8002bc2:	e186      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f9e7 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1f4>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f9dc 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	e01e      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x232>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f9d1 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002c0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 8002c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e004      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x24a>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	e018      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x27c>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002c5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002c62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e004      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d107      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	2100      	movs	r1, #0
 8002c88:	f7ff f968 	bl	8001f5c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff f983 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10c      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x2c0>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff f978 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	f003 021f 	and.w	r2, r3, #31
 8002cb6:	e020      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x2fe>
 8002cb8:	46021000 	.word	0x46021000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff f96b 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002ce2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002cea:	2320      	movs	r3, #32
 8002cec:	e004      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002cee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d105      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x316>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0e9b      	lsrs	r3, r3, #26
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	e018      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x348>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002d2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002d36:	2320      	movs	r3, #32
 8002d38:	e004      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002d3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2300      	movs	r3, #0
 8002d52:	2101      	movs	r1, #1
 8002d54:	f7ff f902 	bl	8001f5c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff f91d 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x388>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2102      	movs	r1, #2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f912 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	f003 021f 	and.w	r2, r3, #31
 8002d82:	e01e      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x3c6>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2102      	movs	r1, #2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff f907 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002da6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002daa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e004      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x3de>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	e018      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x410>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e004      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	f7ff f89e 	bl	8001f5c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2103      	movs	r1, #3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff f8b9 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x450>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff f8ae 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	e01a      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x486>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2103      	movs	r1, #3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f8a3 	bl	8001f9e <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002e6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002e72:	2320      	movs	r3, #32
 8002e74:	e004      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x49e>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0e9b      	lsrs	r3, r3, #26
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	e011      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x4c2>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	e003      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2103      	movs	r1, #3
 8002ece:	f7ff f845 	bl	8001f5c <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fa8c 	bl	80023f4 <LL_ADC_IsEnabled>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 8456 	bne.w	8003790 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f7ff fa0d 	bl	8002310 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002efe:	f040 80d6 	bne.w	80030ae <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x52a>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	3301      	adds	r3, #1
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2b09      	cmp	r3, #9
 8002f1c:	bf94      	ite	ls
 8002f1e:	2301      	movls	r3, #1
 8002f20:	2300      	movhi	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	e019      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x55e>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f36:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e003      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8002f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2b09      	cmp	r3, #9
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d04d      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x5fe>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x57e>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	0e9b      	lsrs	r3, r3, #26
 8002f70:	3301      	adds	r3, #1
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f78:	e015      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x5aa>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e003      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8002f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	069b      	lsls	r3, r3, #26
 8002fa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x5ca>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0e9b      	lsrs	r3, r3, #26
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	e017      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x5fa>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002fde:	2320      	movs	r3, #32
 8002fe0:	e003      	b.n	8002fea <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8002fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	e04e      	b.n	8003098 <HAL_ADC_ConfigChannel+0x69c>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x61a>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	3301      	adds	r3, #1
 800300e:	069b      	lsls	r3, r3, #26
 8003010:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003014:	e015      	b.n	8003042 <HAL_ADC_ConfigChannel+0x646>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003026:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e003      	b.n	800303a <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8003032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	069b      	lsls	r3, r3, #26
 800303e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x666>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	3301      	adds	r3, #1
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	e017      	b.n	8003092 <HAL_ADC_ConfigChannel+0x696>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 800307a:	2320      	movs	r3, #32
 800307c:	e003      	b.n	8003086 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	4313      	orrs	r3, r2
 8003094:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003098:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	461a      	mov	r2, r3
 80030a6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80030aa:	f7ff f8cd 	bl	8002248 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f280 836c 	bge.w	8003790 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a97      	ldr	r2, [pc, #604]	; (800331c <HAL_ADC_ConfigChannel+0x920>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x6ca>
 80030c2:	4b97      	ldr	r3, [pc, #604]	; (8003320 <HAL_ADC_ConfigChannel+0x924>)
 80030c4:	e000      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x6cc>
 80030c6:	4b97      	ldr	r3, [pc, #604]	; (8003324 <HAL_ADC_ConfigChannel+0x928>)
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe ff19 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 80030ce:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a91      	ldr	r2, [pc, #580]	; (800331c <HAL_ADC_ConfigChannel+0x920>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d109      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x6f4>
 80030dc:	488f      	ldr	r0, [pc, #572]	; (800331c <HAL_ADC_ConfigChannel+0x920>)
 80030de:	f7ff f989 	bl	80023f4 <LL_ADC_IsEnabled>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e008      	b.n	8003102 <HAL_ADC_ConfigChannel+0x706>
 80030f0:	488d      	ldr	r0, [pc, #564]	; (8003328 <HAL_ADC_ConfigChannel+0x92c>)
 80030f2:	f7ff f97f 	bl	80023f4 <LL_ADC_IsEnabled>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8088 	beq.w	8003218 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a87      	ldr	r2, [pc, #540]	; (800332c <HAL_ADC_ConfigChannel+0x930>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d132      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d12c      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a7e      	ldr	r2, [pc, #504]	; (800331c <HAL_ADC_ConfigChannel+0x920>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d005      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x738>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a7e      	ldr	r2, [pc, #504]	; (8003328 <HAL_ADC_ConfigChannel+0x92c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	f040 832b 	bne.w	800378a <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a78      	ldr	r2, [pc, #480]	; (800331c <HAL_ADC_ConfigChannel+0x920>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x746>
 800313e:	4a78      	ldr	r2, [pc, #480]	; (8003320 <HAL_ADC_ConfigChannel+0x924>)
 8003140:	e000      	b.n	8003144 <HAL_ADC_ConfigChannel+0x748>
 8003142:	4a78      	ldr	r2, [pc, #480]	; (8003324 <HAL_ADC_ConfigChannel+0x928>)
 8003144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003148:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f7fe fec3 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003154:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_ADC_ConfigChannel+0x934>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	099b      	lsrs	r3, r3, #6
 800315a:	4a76      	ldr	r2, [pc, #472]	; (8003334 <HAL_ADC_ConfigChannel+0x938>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	3301      	adds	r3, #1
 8003164:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003166:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003168:	e002      	b.n	8003170 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	3b01      	subs	r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f9      	bne.n	800316a <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003176:	e308      	b.n	800378a <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a6e      	ldr	r2, [pc, #440]	; (8003338 <HAL_ADC_ConfigChannel+0x93c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d121      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11b      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a62      	ldr	r2, [pc, #392]	; (800331c <HAL_ADC_ConfigChannel+0x920>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d005      	beq.n	80031a4 <HAL_ADC_ConfigChannel+0x7a8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a62      	ldr	r2, [pc, #392]	; (8003328 <HAL_ADC_ConfigChannel+0x92c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	f040 82f5 	bne.w	800378e <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a5c      	ldr	r2, [pc, #368]	; (800331c <HAL_ADC_ConfigChannel+0x920>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x7b6>
 80031ae:	4a5c      	ldr	r2, [pc, #368]	; (8003320 <HAL_ADC_ConfigChannel+0x924>)
 80031b0:	e000      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x7b8>
 80031b2:	4a5c      	ldr	r2, [pc, #368]	; (8003324 <HAL_ADC_ConfigChannel+0x928>)
 80031b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fe fe8b 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c4:	e2e3      	b.n	800378e <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a5c      	ldr	r2, [pc, #368]	; (800333c <HAL_ADC_ConfigChannel+0x940>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	f040 82df 	bne.w	8003790 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 82d8 	bne.w	8003790 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a4d      	ldr	r2, [pc, #308]	; (800331c <HAL_ADC_ConfigChannel+0x920>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d005      	beq.n	80031f6 <HAL_ADC_ConfigChannel+0x7fa>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a4e      	ldr	r2, [pc, #312]	; (8003328 <HAL_ADC_ConfigChannel+0x92c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	f040 82cd 	bne.w	8003790 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a48      	ldr	r2, [pc, #288]	; (800331c <HAL_ADC_ConfigChannel+0x920>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x808>
 8003200:	4a47      	ldr	r2, [pc, #284]	; (8003320 <HAL_ADC_ConfigChannel+0x924>)
 8003202:	e000      	b.n	8003206 <HAL_ADC_ConfigChannel+0x80a>
 8003204:	4a47      	ldr	r2, [pc, #284]	; (8003324 <HAL_ADC_ConfigChannel+0x928>)
 8003206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f7fe fe62 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 8003216:	e2bb      	b.n	8003790 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800322a:	e2b1      	b.n	8003790 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 8003234:	f7fe fe30 	bl	8001e98 <HAL_GetREVID>
 8003238:	4603      	mov	r3, r0
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323e:	d130      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a3e      	ldr	r2, [pc, #248]	; (8003340 <HAL_ADC_ConfigChannel+0x944>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d103      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 800324a:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <HAL_ADC_ConfigChannel+0x948>)
 800324c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003250:	e027      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a3c      	ldr	r2, [pc, #240]	; (8003348 <HAL_ADC_ConfigChannel+0x94c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d103      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 800325c:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_ADC_ConfigChannel+0x950>)
 800325e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003262:	e01e      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a39      	ldr	r2, [pc, #228]	; (8003350 <HAL_ADC_ConfigChannel+0x954>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d103      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_ADC_ConfigChannel+0x958>)
 8003270:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003274:	e015      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a37      	ldr	r2, [pc, #220]	; (8003358 <HAL_ADC_ConfigChannel+0x95c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d103      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003280:	4b36      	ldr	r3, [pc, #216]	; (800335c <HAL_ADC_ConfigChannel+0x960>)
 8003282:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003286:	e00c      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a34      	ldr	r2, [pc, #208]	; (8003360 <HAL_ADC_ConfigChannel+0x964>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d103      	bne.n	800329a <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8003292:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_ADC_ConfigChannel+0x95c>)
 8003294:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003298:	e003      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	f000 81a2 	beq.w	80035f0 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032b4:	d004      	beq.n	80032c0 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80032ba:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <HAL_ADC_ConfigChannel+0x968>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d107      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe ff71 	bl	80021b0 <LL_ADC_REG_SetSequencerChAdd>
 80032ce:	e0c1      	b.n	8003454 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	210f      	movs	r1, #15
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	401a      	ands	r2, r3
 80032e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x904>
 80032f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	e037      	b.n	8003370 <HAL_ADC_ConfigChannel+0x974>
 8003300:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d127      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 8003318:	2320      	movs	r3, #32
 800331a:	e029      	b.n	8003370 <HAL_ADC_ConfigChannel+0x974>
 800331c:	42028000 	.word	0x42028000
 8003320:	42028308 	.word	0x42028308
 8003324:	46021308 	.word	0x46021308
 8003328:	46021000 	.word	0x46021000
 800332c:	ce080000 	.word	0xce080000
 8003330:	20000000 	.word	0x20000000
 8003334:	053e2d63 	.word	0x053e2d63
 8003338:	ca040000 	.word	0xca040000
 800333c:	80000001 	.word	0x80000001
 8003340:	b6002000 	.word	0xb6002000
 8003344:	da400000 	.word	0xda400000
 8003348:	ba004000 	.word	0xba004000
 800334c:	de800000 	.word	0xde800000
 8003350:	b2001000 	.word	0xb2001000
 8003354:	81000001 	.word	0x81000001
 8003358:	d6200000 	.word	0xd6200000
 800335c:	d2100000 	.word	0xd2100000
 8003360:	d7200000 	.word	0xd7200000
 8003364:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	6839      	ldr	r1, [r7, #0]
 8003372:	6849      	ldr	r1, [r1, #4]
 8003374:	f001 011f 	and.w	r1, r1, #31
 8003378:	408b      	lsls	r3, r1
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	429a      	cmp	r2, r3
 8003390:	d860      	bhi.n	8003454 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003392:	f7fe fd81 	bl	8001e98 <HAL_GetREVID>
 8003396:	4603      	mov	r3, r0
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339c:	d851      	bhi.n	8003442 <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 800339e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x9c4>
 80033aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033ae:	0e9b      	lsrs	r3, r3, #26
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	2b13      	cmp	r3, #19
 80033b6:	bf8c      	ite	hi
 80033b8:	2301      	movhi	r3, #1
 80033ba:	2300      	movls	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e016      	b.n	80033ee <HAL_ADC_ConfigChannel+0x9f2>
 80033c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033c4:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	61bb      	str	r3, [r7, #24]
  return result;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 80033d8:	2320      	movs	r3, #32
 80033da:	e003      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b13      	cmp	r3, #19
 80033e6:	bf8c      	ite	hi
 80033e8:	2301      	movhi	r3, #1
 80033ea:	2300      	movls	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d027      	beq.n	8003442 <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 80033f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_ADC_ConfigChannel+0xa16>
 80033fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003402:	0e9b      	lsrs	r3, r3, #26
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	3b09      	subs	r3, #9
 800340a:	2201      	movs	r2, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	e015      	b.n	800343e <HAL_ADC_ConfigChannel+0xa42>
 8003412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003416:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	60fb      	str	r3, [r7, #12]
  return result;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 800342a:	2320      	movs	r3, #32
 800342c:	e003      	b.n	8003436 <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	3b09      	subs	r3, #9
 8003438:	2201      	movs	r2, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800344e:	4619      	mov	r1, r3
 8003450:	f7fe fe4e 	bl	80020f0 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	461a      	mov	r2, r3
 800345e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003462:	f7fe fef1 	bl	8002248 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f280 8190 	bge.w	8003790 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a97      	ldr	r2, [pc, #604]	; (80036d4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <HAL_ADC_ConfigChannel+0xa82>
 800347a:	4b97      	ldr	r3, [pc, #604]	; (80036d8 <HAL_ADC_ConfigChannel+0xcdc>)
 800347c:	e000      	b.n	8003480 <HAL_ADC_ConfigChannel+0xa84>
 800347e:	4b97      	ldr	r3, [pc, #604]	; (80036dc <HAL_ADC_ConfigChannel+0xce0>)
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe fd3d 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8003486:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a94      	ldr	r2, [pc, #592]	; (80036e0 <HAL_ADC_ConfigChannel+0xce4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d126      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d120      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a8b      	ldr	r2, [pc, #556]	; (80036d4 <HAL_ADC_ConfigChannel+0xcd8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_ConfigChannel+0xab2>
 80034aa:	4a8b      	ldr	r2, [pc, #556]	; (80036d8 <HAL_ADC_ConfigChannel+0xcdc>)
 80034ac:	e000      	b.n	80034b0 <HAL_ADC_ConfigChannel+0xab4>
 80034ae:	4a8b      	ldr	r2, [pc, #556]	; (80036dc <HAL_ADC_ConfigChannel+0xce0>)
 80034b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f7fe fd0d 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80034c0:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <HAL_ADC_ConfigChannel+0xce8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	4a88      	ldr	r2, [pc, #544]	; (80036e8 <HAL_ADC_ConfigChannel+0xcec>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80034d2:	e002      	b.n	80034da <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f9      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80034e0:	e067      	b.n	80035b2 <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a81      	ldr	r2, [pc, #516]	; (80036ec <HAL_ADC_ConfigChannel+0xcf0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d116      	bne.n	800351a <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d110      	bne.n	800351a <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_ADC_ConfigChannel+0xcd8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0xb0a>
 8003502:	4a75      	ldr	r2, [pc, #468]	; (80036d8 <HAL_ADC_ConfigChannel+0xcdc>)
 8003504:	e000      	b.n	8003508 <HAL_ADC_ConfigChannel+0xb0c>
 8003506:	4a75      	ldr	r2, [pc, #468]	; (80036dc <HAL_ADC_ConfigChannel+0xce0>)
 8003508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f7fe fce1 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 8003518:	e04b      	b.n	80035b2 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a74      	ldr	r2, [pc, #464]	; (80036f0 <HAL_ADC_ConfigChannel+0xcf4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d116      	bne.n	8003552 <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d110      	bne.n	8003552 <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a67      	ldr	r2, [pc, #412]	; (80036d4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0xb42>
 800353a:	4a67      	ldr	r2, [pc, #412]	; (80036d8 <HAL_ADC_ConfigChannel+0xcdc>)
 800353c:	e000      	b.n	8003540 <HAL_ADC_ConfigChannel+0xb44>
 800353e:	4a67      	ldr	r2, [pc, #412]	; (80036dc <HAL_ADC_ConfigChannel+0xce0>)
 8003540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003544:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f7fe fcc5 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 8003550:	e02f      	b.n	80035b2 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a67      	ldr	r2, [pc, #412]	; (80036f4 <HAL_ADC_ConfigChannel+0xcf8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d12a      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800355c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d124      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a62      	ldr	r2, [pc, #392]	; (80036f8 <HAL_ADC_ConfigChannel+0xcfc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d11f      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a57      	ldr	r2, [pc, #348]	; (80036d4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0xb84>
 800357c:	4a56      	ldr	r2, [pc, #344]	; (80036d8 <HAL_ADC_ConfigChannel+0xcdc>)
 800357e:	e000      	b.n	8003582 <HAL_ADC_ConfigChannel+0xb86>
 8003580:	4a56      	ldr	r2, [pc, #344]	; (80036dc <HAL_ADC_ConfigChannel+0xce0>)
 8003582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f7fe fca4 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003592:	f7fe fc81 	bl	8001e98 <HAL_GetREVID>
 8003596:	4603      	mov	r3, r0
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359c:	d809      	bhi.n	80035b2 <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80035b2:	f7fe fc71 	bl	8001e98 <HAL_GetREVID>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035bc:	f040 80e8 	bne.w	8003790 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a4d      	ldr	r2, [pc, #308]	; (80036fc <HAL_ADC_ConfigChannel+0xd00>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	f040 80e2 	bne.w	8003790 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f040 80db 	bne.w	8003790 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80035ee:	e0cf      	b.n	8003790 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f8:	d004      	beq.n	8003604 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80035fe:	4a40      	ldr	r2, [pc, #256]	; (8003700 <HAL_ADC_ConfigChannel+0xd04>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d106      	bne.n	8003612 <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800360c:	4618      	mov	r0, r3
 800360e:	f7fe fe02 	bl	8002216 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f280 80ba 	bge.w	8003790 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0xc2e>
 8003626:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <HAL_ADC_ConfigChannel+0xcdc>)
 8003628:	e000      	b.n	800362c <HAL_ADC_ConfigChannel+0xc30>
 800362a:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <HAL_ADC_ConfigChannel+0xce0>)
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fc67 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8003632:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a32      	ldr	r2, [pc, #200]	; (8003704 <HAL_ADC_ConfigChannel+0xd08>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d110      	bne.n	8003662 <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a23      	ldr	r2, [pc, #140]	; (80036d4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_ADC_ConfigChannel+0xc52>
 800364a:	4a23      	ldr	r2, [pc, #140]	; (80036d8 <HAL_ADC_ConfigChannel+0xcdc>)
 800364c:	e000      	b.n	8003650 <HAL_ADC_ConfigChannel+0xc54>
 800364e:	4a23      	ldr	r2, [pc, #140]	; (80036dc <HAL_ADC_ConfigChannel+0xce0>)
 8003650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003654:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f7fe fc3d 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 8003660:	e06d      	b.n	800373e <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a28      	ldr	r2, [pc, #160]	; (8003708 <HAL_ADC_ConfigChannel+0xd0c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d110      	bne.n	800368e <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_ADC_ConfigChannel+0xcd8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_ADC_ConfigChannel+0xc7e>
 8003676:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <HAL_ADC_ConfigChannel+0xcdc>)
 8003678:	e000      	b.n	800367c <HAL_ADC_ConfigChannel+0xc80>
 800367a:	4a18      	ldr	r2, [pc, #96]	; (80036dc <HAL_ADC_ConfigChannel+0xce0>)
 800367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f7fe fc27 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 800368c:	e057      	b.n	800373e <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a17      	ldr	r2, [pc, #92]	; (80036f0 <HAL_ADC_ConfigChannel+0xcf4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d110      	bne.n	80036ba <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <HAL_ADC_ConfigChannel+0xcd8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0xcaa>
 80036a2:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <HAL_ADC_ConfigChannel+0xcdc>)
 80036a4:	e000      	b.n	80036a8 <HAL_ADC_ConfigChannel+0xcac>
 80036a6:	4a0d      	ldr	r2, [pc, #52]	; (80036dc <HAL_ADC_ConfigChannel+0xce0>)
 80036a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f7fe fc11 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 80036b8:	e041      	b.n	800373e <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <HAL_ADC_ConfigChannel+0xcf8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d13c      	bne.n	800373e <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a02      	ldr	r2, [pc, #8]	; (80036d4 <HAL_ADC_ConfigChannel+0xcd8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d11e      	bne.n	800370c <HAL_ADC_ConfigChannel+0xd10>
 80036ce:	4a02      	ldr	r2, [pc, #8]	; (80036d8 <HAL_ADC_ConfigChannel+0xcdc>)
 80036d0:	e01d      	b.n	800370e <HAL_ADC_ConfigChannel+0xd12>
 80036d2:	bf00      	nop
 80036d4:	42028000 	.word	0x42028000
 80036d8:	42028308 	.word	0x42028308
 80036dc:	46021308 	.word	0x46021308
 80036e0:	b6002000 	.word	0xb6002000
 80036e4:	20000000 	.word	0x20000000
 80036e8:	053e2d63 	.word	0x053e2d63
 80036ec:	ba004000 	.word	0xba004000
 80036f0:	80000001 	.word	0x80000001
 80036f4:	b2001000 	.word	0xb2001000
 80036f8:	46021000 	.word	0x46021000
 80036fc:	d7200000 	.word	0xd7200000
 8003700:	80000010 	.word	0x80000010
 8003704:	ce080000 	.word	0xce080000
 8003708:	ca040000 	.word	0xca040000
 800370c:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <HAL_ADC_ConfigChannel+0xda8>)
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003712:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f7fe fbde 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800371e:	f7fe fbbb 	bl	8001e98 <HAL_GetREVID>
 8003722:	4603      	mov	r3, r0
 8003724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003728:	d809      	bhi.n	800373e <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800373e:	f7fe fbab 	bl	8001e98 <HAL_GetREVID>
 8003742:	4603      	mov	r3, r0
 8003744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003748:	d122      	bne.n	8003790 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <HAL_ADC_ConfigChannel+0xdac>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d11d      	bne.n	8003790 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d117      	bne.n	8003790 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8003774:	e00c      	b.n	8003790 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8003788:	e002      	b.n	8003790 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800378e:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003798:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 800379c:	4618      	mov	r0, r3
 800379e:	37f0      	adds	r7, #240	; 0xf0
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	46021308 	.word	0x46021308
 80037a8:	d7200000 	.word	0xd7200000

080037ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db0b      	blt.n	800383a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4907      	ldr	r1, [pc, #28]	; (8003848 <__NVIC_EnableIRQ+0x38>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2001      	movs	r0, #1
 8003832:	fa00 f202 	lsl.w	r2, r0, r2
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000e100 	.word	0xe000e100

0800384c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	2b00      	cmp	r3, #0
 800385c:	db12      	blt.n	8003884 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	490a      	ldr	r1, [pc, #40]	; (8003890 <__NVIC_DisableIRQ+0x44>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2001      	movs	r0, #1
 800386e:	fa00 f202 	lsl.w	r2, r0, r2
 8003872:	3320      	adds	r3, #32
 8003874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003878:	f3bf 8f4f 	dsb	sy
}
 800387c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800387e:	f3bf 8f6f 	isb	sy
}
 8003882:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100

08003894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	db0a      	blt.n	80038be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	490c      	ldr	r1, [pc, #48]	; (80038e0 <__NVIC_SetPriority+0x4c>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038bc:	e00a      	b.n	80038d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <__NVIC_SetPriority+0x50>)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	3b04      	subs	r3, #4
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	440b      	add	r3, r1
 80038d2:	761a      	strb	r2, [r3, #24]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000e100 	.word	0xe000e100
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f1c3 0307 	rsb	r3, r3, #7
 8003902:	2b04      	cmp	r3, #4
 8003904:	bf28      	it	cs
 8003906:	2304      	movcs	r3, #4
 8003908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3304      	adds	r3, #4
 800390e:	2b06      	cmp	r3, #6
 8003910:	d902      	bls.n	8003918 <NVIC_EncodePriority+0x30>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3b03      	subs	r3, #3
 8003916:	e000      	b.n	800391a <NVIC_EncodePriority+0x32>
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	401a      	ands	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003930:	f04f 31ff 	mov.w	r1, #4294967295
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	43d9      	mvns	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	4313      	orrs	r3, r2
         );
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	; 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ff28 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003972:	f7ff ff3f 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 8003976:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	6978      	ldr	r0, [r7, #20]
 800397e:	f7ff ffb3 	bl	80038e8 <NVIC_EncodePriority>
 8003982:	4602      	mov	r2, r0
 8003984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003988:	4611      	mov	r1, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff ff82 	bl	8003894 <__NVIC_SetPriority>
}
 8003990:	bf00      	nop
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff ff32 	bl	8003810 <__NVIC_EnableIRQ>
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff42 	bl	800384c <__NVIC_DisableIRQ>
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80039d8:	f7fe fa2e 	bl	8001e38 <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e06b      	b.n	8003ac0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d008      	beq.n	8003a06 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e05c      	b.n	8003ac0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0204 	orr.w	r2, r2, #4
 8003a14:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2205      	movs	r2, #5
 8003a1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003a1e:	e020      	b.n	8003a62 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003a20:	f7fe fa0a 	bl	8001e38 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d919      	bls.n	8003a62 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	f043 0210 	orr.w	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a52:	2201      	movs	r2, #1
 8003a54:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e02e      	b.n	8003ac0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0d7      	beq.n	8003a20 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0202 	orr.w	r2, r2, #2
 8003a7e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2204      	movs	r2, #4
 8003a84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003a90:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aaa:	2201      	movs	r2, #1
 8003aac:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e019      	b.n	8003b0e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d004      	beq.n	8003af0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e00e      	b.n	8003b0e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2204      	movs	r2, #4
 8003af4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b06:	f043 0304 	orr.w	r3, r3, #4
 8003b0a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b089      	sub	sp, #36	; 0x24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b2e:	e1ba      	b.n	8003ea6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2101      	movs	r1, #1
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 81aa 	beq.w	8003ea0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a55      	ldr	r2, [pc, #340]	; (8003ca4 <HAL_GPIO_Init+0x188>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d15d      	bne.n	8003c10 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0201 	and.w	r2, r3, #1
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003b84:	4a48      	ldr	r2, [pc, #288]	; (8003ca8 <HAL_GPIO_Init+0x18c>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b8c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003b8e:	4a46      	ldr	r2, [pc, #280]	; (8003ca8 <HAL_GPIO_Init+0x18c>)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	08da      	lsrs	r2, r3, #3
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	3208      	adds	r2, #8
 8003ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	220b      	movs	r2, #11
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	08da      	lsrs	r2, r3, #3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	3208      	adds	r2, #8
 8003bda:	69f9      	ldr	r1, [r7, #28]
 8003bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	2203      	movs	r2, #3
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e067      	b.n	8003ce0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x104>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b12      	cmp	r3, #18
 8003c1e:	d145      	bne.n	8003cac <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	220f      	movs	r2, #15
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	08da      	lsrs	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3208      	adds	r2, #8
 8003c66:	69f9      	ldr	r1, [r7, #28]
 8003c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0203 	and.w	r2, r3, #3
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e01e      	b.n	8003ce0 <HAL_GPIO_Init+0x1c4>
 8003ca2:	bf00      	nop
 8003ca4:	46020000 	.word	0x46020000
 8003ca8:	0800d12c 	.word	0x0800d12c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0203 	and.w	r2, r3, #3
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d00b      	beq.n	8003d00 <HAL_GPIO_Init+0x1e4>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d007      	beq.n	8003d00 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cf4:	2b11      	cmp	r3, #17
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b12      	cmp	r3, #18
 8003cfe:	d130      	bne.n	8003d62 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003d36:	2201      	movs	r2, #1
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0201 	and.w	r2, r3, #1
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d017      	beq.n	8003d9a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	2203      	movs	r2, #3
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d07c      	beq.n	8003ea0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003da6:	4a47      	ldr	r2, [pc, #284]	; (8003ec4 <HAL_GPIO_Init+0x3a8>)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	3318      	adds	r3, #24
 8003dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0a9a      	lsrs	r2, r3, #10
 8003dce:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <HAL_GPIO_Init+0x3ac>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	f002 0203 	and.w	r2, r2, #3
 8003dd8:	00d2      	lsls	r2, r2, #3
 8003dda:	4093      	lsls	r3, r2
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003de2:	4938      	ldr	r1, [pc, #224]	; (8003ec4 <HAL_GPIO_Init+0x3a8>)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	3318      	adds	r3, #24
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003df0:	4b34      	ldr	r3, [pc, #208]	; (8003ec4 <HAL_GPIO_Init+0x3a8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003e14:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <HAL_GPIO_Init+0x3a8>)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <HAL_GPIO_Init+0x3a8>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003e3e:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <HAL_GPIO_Init+0x3a8>)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003e44:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <HAL_GPIO_Init+0x3a8>)
 8003e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003e6a:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_GPIO_Init+0x3a8>)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003e72:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_GPIO_Init+0x3a8>)
 8003e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e78:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003e98:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <HAL_GPIO_Init+0x3a8>)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f47f ae3d 	bne.w	8003b30 <HAL_GPIO_Init+0x14>
  }
}
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	3724      	adds	r7, #36	; 0x24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	46022000 	.word	0x46022000
 8003ec8:	002f7f7f 	.word	0x002f7f7f

08003ecc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	; 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003ede:	e0bc      	b.n	800405a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80ad 	beq.w	8004054 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a5e      	ldr	r2, [pc, #376]	; (8004078 <HAL_GPIO_DeInit+0x1ac>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d115      	bne.n	8003f2e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8003f02:	4a5e      	ldr	r2, [pc, #376]	; (800407c <HAL_GPIO_DeInit+0x1b0>)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f0a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003f0c:	4a5b      	ldr	r2, [pc, #364]	; (800407c <HAL_GPIO_DeInit+0x1b0>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8003f18:	4b57      	ldr	r3, [pc, #348]	; (8004078 <HAL_GPIO_DeInit+0x1ac>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	4954      	ldr	r1, [pc, #336]	; (8004078 <HAL_GPIO_DeInit+0x1ac>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	e053      	b.n	8003fd6 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8003f2e:	4a54      	ldr	r2, [pc, #336]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	089b      	lsrs	r3, r3, #2
 8003f34:	3318      	adds	r3, #24
 8003f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	220f      	movs	r2, #15
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	0a9a      	lsrs	r2, r3, #10
 8003f54:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <HAL_GPIO_DeInit+0x1b8>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	f002 0203 	and.w	r2, r2, #3
 8003f5e:	00d2      	lsls	r2, r2, #3
 8003f60:	4093      	lsls	r3, r2
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d136      	bne.n	8003fd6 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8003f68:	4b45      	ldr	r3, [pc, #276]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003f6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	4943      	ldr	r1, [pc, #268]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8003f7a:	4b41      	ldr	r3, [pc, #260]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003f7c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	493e      	ldr	r1, [pc, #248]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8003f8c:	4b3c      	ldr	r3, [pc, #240]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	493a      	ldr	r1, [pc, #232]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8003f9a:	4b39      	ldr	r3, [pc, #228]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	4937      	ldr	r1, [pc, #220]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8003fb8:	4a31      	ldr	r2, [pc, #196]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	089b      	lsrs	r3, r3, #2
 8003fbe:	3318      	adds	r3, #24
 8003fc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	482d      	ldr	r0, [pc, #180]	; (8004080 <HAL_GPIO_DeInit+0x1b4>)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	400a      	ands	r2, r1
 8003fd0:	3318      	adds	r3, #24
 8003fd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	2103      	movs	r1, #3
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	220f      	movs	r2, #15
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	08d2      	lsrs	r2, r2, #3
 800400a:	4019      	ands	r1, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3208      	adds	r2, #8
 8004010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	2103      	movs	r1, #3
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	401a      	ands	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	2101      	movs	r1, #1
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	401a      	ands	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	2103      	movs	r1, #3
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	401a      	ands	r2, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	3301      	adds	r3, #1
 8004058:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	f47f af3c 	bne.w	8003ee0 <HAL_GPIO_DeInit+0x14>
  }
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	3724      	adds	r7, #36	; 0x24
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	46020000 	.word	0x46020000
 800407c:	0800d12c 	.word	0x0800d12c
 8004080:	46022000 	.word	0x46022000
 8004084:	002f7f7f 	.word	0x002f7f7f

08004088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	807b      	strh	r3, [r7, #2]
 8004094:	4613      	mov	r3, r2
 8004096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004098:	787b      	ldrb	r3, [r7, #1]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800409e:	887a      	ldrh	r2, [r7, #2]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80040a4:	e002      	b.n	80040ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d006      	beq.n	80040dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80040ce:	4a0c      	ldr	r2, [pc, #48]	; (8004100 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f814 	bl	8004104 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d006      	beq.n	80040f6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80040e8:	4a05      	ldr	r2, [pc, #20]	; (8004100 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 f812 	bl	800411a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	46022000 	.word	0x46022000

08004104 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	4603      	mov	r3, r0
 8004122:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e08d      	b.n	800425e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fc fc72 	bl	8000a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2224      	movs	r2, #36	; 0x24
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004180:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004190:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d107      	bne.n	80041aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	e006      	b.n	80041b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d108      	bne.n	80041d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	e007      	b.n	80041e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004204:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69d9      	ldr	r1, [r3, #28]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1a      	ldr	r2, [r3, #32]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b20      	cmp	r3, #32
 800427a:	d138      	bne.n	80042ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004286:	2302      	movs	r3, #2
 8004288:	e032      	b.n	80042f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2224      	movs	r2, #36	; 0x24
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0201 	orr.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e000      	b.n	80042f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
  }
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b20      	cmp	r3, #32
 8004310:	d139      	bne.n	8004386 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800431c:	2302      	movs	r3, #2
 800431e:	e033      	b.n	8004388 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2224      	movs	r2, #36	; 0x24
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800434e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e000      	b.n	8004388 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	e007      	b.n	80043c2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 0204 	bic.w	r2, r3, #4
 80043ba:	4905      	ldr	r1, [pc, #20]	; (80043d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40030400 	.word	0x40030400

080043d4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_ICACHE_Enable+0x1c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <HAL_ICACHE_Enable+0x1c>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	40030400 	.word	0x40030400

080043f4 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 80043fe:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_ICACHE_Disable+0x5c>)
 8004400:	2202      	movs	r2, #2
 8004402:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004404:	4b12      	ldr	r3, [pc, #72]	; (8004450 <HAL_ICACHE_Disable+0x5c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a11      	ldr	r2, [pc, #68]	; (8004450 <HAL_ICACHE_Disable+0x5c>)
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004410:	f7fd fd12 	bl	8001e38 <HAL_GetTick>
 8004414:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004416:	e00f      	b.n	8004438 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8004418:	f7fd fd0e 	bl	8001e38 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d908      	bls.n	8004438 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <HAL_ICACHE_Disable+0x5c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	71fb      	strb	r3, [r7, #7]
        break;
 8004436:	e005      	b.n	8004444 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_ICACHE_Disable+0x5c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e9      	bne.n	8004418 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8004444:	79fb      	ldrb	r3, [r7, #7]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40030400 	.word	0x40030400

08004454 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004462:	4b22      	ldr	r3, [pc, #136]	; (80044ec <HAL_ICACHE_EnableRemapRegion+0x98>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	75fb      	strb	r3, [r7, #23]
 8004472:	e034      	b.n	80044de <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	009a      	lsls	r2, r3, #2
 8004478:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 800447a:	4413      	add	r3, r2
 800447c:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
 800448e:	e026      	b.n	80044de <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 800449c:	4013      	ands	r3, r2
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	425b      	negs	r3, r3
 80044ae:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80044b0:	401a      	ands	r2, r3
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	025a      	lsls	r2, r3, #9
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80044cc:	4313      	orrs	r3, r2
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80044de:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	40030400 	.word	0x40030400
 80044f0:	40030420 	.word	0x40030420
 80044f4:	07ff0000 	.word	0x07ff0000

080044f8 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e059      	b.n	80045be <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 800450a:	4b30      	ldr	r3, [pc, #192]	; (80045cc <HAL_PWR_ConfigPVD+0xd4>)
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	492d      	ldr	r1, [pc, #180]	; (80045cc <HAL_PWR_ConfigPVD+0xd4>)
 8004518:	4313      	orrs	r3, r2
 800451a:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800451c:	4b2c      	ldr	r3, [pc, #176]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 800451e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004522:	4a2b      	ldr	r2, [pc, #172]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 8004524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004528:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800452c:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 800452e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004532:	4a27      	ldr	r2, [pc, #156]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 8004534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004538:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800453c:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 8004542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004546:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8004548:	4b21      	ldr	r3, [pc, #132]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4a20      	ldr	r2, [pc, #128]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004560:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 8004562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004566:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 8004568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800457c:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 800457e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 800459e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <HAL_PWR_ConfigPVD+0xd8>)
 80045b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ba:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	46020800 	.word	0x46020800
 80045d0:	46022000 	.word	0x46022000

080045d4 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_PWR_EnablePVD+0x1c>)
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <HAL_PWR_EnablePVD+0x1c>)
 80045de:	f043 0310 	orr.w	r3, r3, #16
 80045e2:	6113      	str	r3, [r2, #16]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	46020800 	.word	0x46020800

080045f4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80045fc:	4b39      	ldr	r3, [pc, #228]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004604:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d10b      	bne.n	8004626 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004614:	d905      	bls.n	8004622 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004616:	4b33      	ldr	r3, [pc, #204]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4a32      	ldr	r2, [pc, #200]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800461c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004620:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e057      	b.n	80046d6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462c:	d90a      	bls.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800462e:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4313      	orrs	r3, r2
 800463a:	4a2a      	ldr	r2, [pc, #168]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800463c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004640:	60d3      	str	r3, [r2, #12]
 8004642:	e007      	b.n	8004654 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004644:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800464c:	4925      	ldr	r1, [pc, #148]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4313      	orrs	r3, r2
 8004652:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a24      	ldr	r2, [pc, #144]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	099b      	lsrs	r3, r3, #6
 8004660:	2232      	movs	r2, #50	; 0x32
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	4a21      	ldr	r2, [pc, #132]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	099b      	lsrs	r3, r3, #6
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004672:	e002      	b.n	800467a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b01      	subs	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800467a:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <HAL_PWREx_ControlVoltageScaling+0x98>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f3      	bne.n	8004674 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01b      	beq.n	80046ca <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a15      	ldr	r2, [pc, #84]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	099b      	lsrs	r3, r3, #6
 800469e:	2232      	movs	r2, #50	; 0x32
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	4a11      	ldr	r2, [pc, #68]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	099b      	lsrs	r3, r3, #6
 80046ac:	3301      	adds	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80046b0:	e002      	b.n	80046b8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80046ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d102      	bne.n	80046ca <HAL_PWREx_ControlVoltageScaling+0xd6>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f3      	bne.n	80046b2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e000      	b.n	80046d6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	46020800 	.word	0x46020800
 80046e8:	20000000 	.word	0x20000000
 80046ec:	10624dd3 	.word	0x10624dd3

080046f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <HAL_PWREx_GetVoltageRange+0x18>)
 80046f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	46020800 	.word	0x46020800

0800470c <HAL_PWREx_EnterSTOP3Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP3Mode(uint8_t STOPEntry)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 3 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, (PWR_CR1_LPMS_0 | PWR_CR1_LPMS_1));
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <HAL_PWREx_EnterSTOP3Mode+0x50>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 0307 	bic.w	r3, r3, #7
 800471e:	4a0f      	ldr	r2, [pc, #60]	; (800475c <HAL_PWREx_EnterSTOP3Mode+0x50>)
 8004720:	f043 0303 	orr.w	r3, r3, #3
 8004724:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 800472c:	f043 0304 	orr.w	r3, r3, #4
 8004730:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_PWREx_EnterSTOP3Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004738:	bf30      	wfi
 800473a:	e002      	b.n	8004742 <HAL_PWREx_EnterSTOP3Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800473c:	bf40      	sev
    __WFE();
 800473e:	bf20      	wfe
    __WFE();
 8004740:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	4a06      	ldr	r2, [pc, #24]	; (8004760 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 8004748:	f023 0304 	bic.w	r3, r3, #4
 800474c:	6113      	str	r3, [r2, #16]
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	46020800 	.word	0x46020800
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_PWREx_EnableVddA+0x1c>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <HAL_PWREx_EnableVddA+0x1c>)
 800476e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004772:	6113      	str	r3, [r2, #16]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	46020800 	.word	0x46020800

08004784 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	46020800 	.word	0x46020800

080047a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08e      	sub	sp, #56	; 0x38
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f000 bec8 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047be:	4b99      	ldr	r3, [pc, #612]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c8:	4b96      	ldr	r3, [pc, #600]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 816c 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_RCC_OscConfig+0x52>
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	f040 80de 	bne.w	80049aa <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	f040 80da 	bne.w	80049aa <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f000 bea5 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004808:	4b86      	ldr	r3, [pc, #536]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d004      	beq.n	800481e <HAL_RCC_OscConfig+0x7a>
 8004814:	4b83      	ldr	r3, [pc, #524]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800481c:	e005      	b.n	800482a <HAL_RCC_OscConfig+0x86>
 800481e:	4b81      	ldr	r3, [pc, #516]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800482a:	4293      	cmp	r3, r2
 800482c:	d255      	bcs.n	80048da <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	4618      	mov	r0, r3
 800483a:	f001 fa15 	bl	8005c68 <RCC_SetFlashLatencyFromMSIRange>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	f000 be82 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800484a:	4b76      	ldr	r3, [pc, #472]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4a75      	ldr	r2, [pc, #468]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004850:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004854:	6093      	str	r3, [r2, #8]
 8004856:	4b73      	ldr	r3, [pc, #460]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	4970      	ldr	r1, [pc, #448]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004870:	d309      	bcc.n	8004886 <HAL_RCC_OscConfig+0xe2>
 8004872:	4b6c      	ldr	r3, [pc, #432]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f023 021f 	bic.w	r2, r3, #31
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4969      	ldr	r1, [pc, #420]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004880:	4313      	orrs	r3, r2
 8004882:	60cb      	str	r3, [r1, #12]
 8004884:	e07e      	b.n	8004984 <HAL_RCC_OscConfig+0x1e0>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	da0a      	bge.n	80048a4 <HAL_RCC_OscConfig+0x100>
 800488e:	4b65      	ldr	r3, [pc, #404]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	015b      	lsls	r3, r3, #5
 800489c:	4961      	ldr	r1, [pc, #388]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	60cb      	str	r3, [r1, #12]
 80048a2:	e06f      	b.n	8004984 <HAL_RCC_OscConfig+0x1e0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d30a      	bcc.n	80048c4 <HAL_RCC_OscConfig+0x120>
 80048ae:	4b5d      	ldr	r3, [pc, #372]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	029b      	lsls	r3, r3, #10
 80048bc:	4959      	ldr	r1, [pc, #356]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	60cb      	str	r3, [r1, #12]
 80048c2:	e05f      	b.n	8004984 <HAL_RCC_OscConfig+0x1e0>
 80048c4:	4b57      	ldr	r3, [pc, #348]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	03db      	lsls	r3, r3, #15
 80048d2:	4954      	ldr	r1, [pc, #336]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60cb      	str	r3, [r1, #12]
 80048d8:	e054      	b.n	8004984 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80048da:	4b52      	ldr	r3, [pc, #328]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4a51      	ldr	r2, [pc, #324]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80048e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048e4:	6093      	str	r3, [r2, #8]
 80048e6:	4b4f      	ldr	r3, [pc, #316]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	494c      	ldr	r1, [pc, #304]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004900:	d309      	bcc.n	8004916 <HAL_RCC_OscConfig+0x172>
 8004902:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f023 021f 	bic.w	r2, r3, #31
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4945      	ldr	r1, [pc, #276]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004910:	4313      	orrs	r3, r2
 8004912:	60cb      	str	r3, [r1, #12]
 8004914:	e028      	b.n	8004968 <HAL_RCC_OscConfig+0x1c4>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	2b00      	cmp	r3, #0
 800491c:	da0a      	bge.n	8004934 <HAL_RCC_OscConfig+0x190>
 800491e:	4b41      	ldr	r3, [pc, #260]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	015b      	lsls	r3, r3, #5
 800492c:	493d      	ldr	r1, [pc, #244]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 800492e:	4313      	orrs	r3, r2
 8004930:	60cb      	str	r3, [r1, #12]
 8004932:	e019      	b.n	8004968 <HAL_RCC_OscConfig+0x1c4>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d30a      	bcc.n	8004954 <HAL_RCC_OscConfig+0x1b0>
 800493e:	4b39      	ldr	r3, [pc, #228]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	029b      	lsls	r3, r3, #10
 800494c:	4935      	ldr	r1, [pc, #212]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 800494e:	4313      	orrs	r3, r2
 8004950:	60cb      	str	r3, [r1, #12]
 8004952:	e009      	b.n	8004968 <HAL_RCC_OscConfig+0x1c4>
 8004954:	4b33      	ldr	r3, [pc, #204]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	03db      	lsls	r3, r3, #15
 8004962:	4930      	ldr	r1, [pc, #192]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004964:	4313      	orrs	r3, r2
 8004966:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	4618      	mov	r0, r3
 8004974:	f001 f978 	bl	8005c68 <RCC_SetFlashLatencyFromMSIRange>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f000 bde5 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004984:	f001 f8e2 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004988:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <HAL_RCC_OscConfig+0x284>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7fc fc83 	bl	8001298 <HAL_InitTick>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 808a 	beq.w	8004ab6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80049a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049a6:	f000 bdd2 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d066      	beq.n	8004a80 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80049be:	f7fd fa3b 	bl	8001e38 <HAL_GetTick>
 80049c2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80049c4:	e009      	b.n	80049da <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049c6:	f7fd fa37 	bl	8001e38 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d902      	bls.n	80049da <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	f000 bdba 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0ef      	beq.n	80049c6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80049e6:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80049ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049f0:	6093      	str	r3, [r2, #8]
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	4909      	ldr	r1, [pc, #36]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004a0c:	d30e      	bcc.n	8004a2c <HAL_RCC_OscConfig+0x288>
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f023 021f 	bic.w	r2, r3, #31
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4902      	ldr	r1, [pc, #8]	; (8004a24 <HAL_RCC_OscConfig+0x280>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
 8004a20:	e04a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x314>
 8004a22:	bf00      	nop
 8004a24:	46020c00 	.word	0x46020c00
 8004a28:	20000004 	.word	0x20000004
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	da0a      	bge.n	8004a4a <HAL_RCC_OscConfig+0x2a6>
 8004a34:	4b98      	ldr	r3, [pc, #608]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	015b      	lsls	r3, r3, #5
 8004a42:	4995      	ldr	r1, [pc, #596]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60cb      	str	r3, [r1, #12]
 8004a48:	e036      	b.n	8004ab8 <HAL_RCC_OscConfig+0x314>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d30a      	bcc.n	8004a6a <HAL_RCC_OscConfig+0x2c6>
 8004a54:	4b90      	ldr	r3, [pc, #576]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	029b      	lsls	r3, r3, #10
 8004a62:	498d      	ldr	r1, [pc, #564]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60cb      	str	r3, [r1, #12]
 8004a68:	e026      	b.n	8004ab8 <HAL_RCC_OscConfig+0x314>
 8004a6a:	4b8b      	ldr	r3, [pc, #556]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	03db      	lsls	r3, r3, #15
 8004a78:	4987      	ldr	r1, [pc, #540]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60cb      	str	r3, [r1, #12]
 8004a7e:	e01b      	b.n	8004ab8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004a80:	4b85      	ldr	r3, [pc, #532]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a84      	ldr	r2, [pc, #528]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a8c:	f7fd f9d4 	bl	8001e38 <HAL_GetTick>
 8004a90:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004a92:	e009      	b.n	8004aa8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a94:	f7fd f9d0 	bl	8001e38 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d902      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	f000 bd53 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004aa8:	4b7b      	ldr	r3, [pc, #492]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ef      	bne.n	8004a94 <HAL_RCC_OscConfig+0x2f0>
 8004ab4:	e000      	b.n	8004ab8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004ab6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 808b 	beq.w	8004bdc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d005      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x334>
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	2b0c      	cmp	r3, #12
 8004ad0:	d109      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d106      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d17d      	bne.n	8004bdc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f000 bd34 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aee:	d106      	bne.n	8004afe <HAL_RCC_OscConfig+0x35a>
 8004af0:	4b69      	ldr	r3, [pc, #420]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a68      	ldr	r2, [pc, #416]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	e041      	b.n	8004b82 <HAL_RCC_OscConfig+0x3de>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b06:	d112      	bne.n	8004b2e <HAL_RCC_OscConfig+0x38a>
 8004b08:	4b63      	ldr	r3, [pc, #396]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a62      	ldr	r2, [pc, #392]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	4b60      	ldr	r3, [pc, #384]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a5f      	ldr	r2, [pc, #380]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	4b5d      	ldr	r3, [pc, #372]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a5c      	ldr	r2, [pc, #368]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	e029      	b.n	8004b82 <HAL_RCC_OscConfig+0x3de>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004b36:	d112      	bne.n	8004b5e <HAL_RCC_OscConfig+0x3ba>
 8004b38:	4b57      	ldr	r3, [pc, #348]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a56      	ldr	r2, [pc, #344]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	4b54      	ldr	r3, [pc, #336]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a53      	ldr	r2, [pc, #332]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	4b51      	ldr	r3, [pc, #324]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a50      	ldr	r2, [pc, #320]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	e011      	b.n	8004b82 <HAL_RCC_OscConfig+0x3de>
 8004b5e:	4b4e      	ldr	r3, [pc, #312]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a4d      	ldr	r2, [pc, #308]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a4a      	ldr	r2, [pc, #296]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b48      	ldr	r3, [pc, #288]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a47      	ldr	r2, [pc, #284]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004b7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d014      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004b8a:	f7fd f955 	bl	8001e38 <HAL_GetTick>
 8004b8e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b90:	e009      	b.n	8004ba6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b92:	f7fd f951 	bl	8001e38 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b64      	cmp	r3, #100	; 0x64
 8004b9e:	d902      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	f000 bcd4 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba6:	4b3c      	ldr	r3, [pc, #240]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0ef      	beq.n	8004b92 <HAL_RCC_OscConfig+0x3ee>
 8004bb2:	e013      	b.n	8004bdc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004bb4:	f7fd f940 	bl	8001e38 <HAL_GetTick>
 8004bb8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bba:	e009      	b.n	8004bd0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fd f93c 	bl	8001e38 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d902      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	f000 bcbf 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bd0:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1ef      	bne.n	8004bbc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d05f      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d005      	beq.n	8004bfa <HAL_RCC_OscConfig+0x456>
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d114      	bne.n	8004c1e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d111      	bne.n	8004c1e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f000 bca3 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004c08:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	4920      	ldr	r1, [pc, #128]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004c1c:	e044      	b.n	8004ca8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d024      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004c26:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c32:	f7fd f901 	bl	8001e38 <HAL_GetTick>
 8004c36:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c38:	e009      	b.n	8004c4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fd f8fd 	bl	8001e38 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d902      	bls.n	8004c4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	f000 bc80 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c4e:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ef      	beq.n	8004c3a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	041b      	lsls	r3, r3, #16
 8004c68:	490b      	ldr	r1, [pc, #44]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	610b      	str	r3, [r1, #16]
 8004c6e:	e01b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <HAL_RCC_OscConfig+0x4f4>)
 8004c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c7a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c7c:	f7fd f8dc 	bl	8001e38 <HAL_GetTick>
 8004c80:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c82:	e00b      	b.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c84:	f7fd f8d8 	bl	8001e38 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d904      	bls.n	8004c9c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	f000 bc5b 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
 8004c98:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c9c:	4baf      	ldr	r3, [pc, #700]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ed      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80c8 	beq.w	8004e46 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cbc:	4ba7      	ldr	r3, [pc, #668]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d111      	bne.n	8004cee <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cca:	4ba4      	ldr	r3, [pc, #656]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cd0:	4aa2      	ldr	r2, [pc, #648]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004cd2:	f043 0304 	orr.w	r3, r3, #4
 8004cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004cda:	4ba0      	ldr	r3, [pc, #640]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004cee:	4b9c      	ldr	r3, [pc, #624]	; (8004f60 <HAL_RCC_OscConfig+0x7bc>)
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d119      	bne.n	8004d2e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004cfa:	4b99      	ldr	r3, [pc, #612]	; (8004f60 <HAL_RCC_OscConfig+0x7bc>)
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	4a98      	ldr	r2, [pc, #608]	; (8004f60 <HAL_RCC_OscConfig+0x7bc>)
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d06:	f7fd f897 	bl	8001e38 <HAL_GetTick>
 8004d0a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d0c:	e009      	b.n	8004d22 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0e:	f7fd f893 	bl	8001e38 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d902      	bls.n	8004d22 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	f000 bc16 	b.w	800554e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d22:	4b8f      	ldr	r3, [pc, #572]	; (8004f60 <HAL_RCC_OscConfig+0x7bc>)
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0ef      	beq.n	8004d0e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d05f      	beq.n	8004df6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004d36:	4b89      	ldr	r3, [pc, #548]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d3c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d037      	beq.n	8004dbc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e3f4      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01b      	beq.n	8004da6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004d6e:	4b7b      	ldr	r3, [pc, #492]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d74:	4a79      	ldr	r2, [pc, #484]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004d76:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004d7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004d7e:	f7fd f85b 	bl	8001e38 <HAL_GetTick>
 8004d82:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d86:	f7fd f857 	bl	8001e38 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b05      	cmp	r3, #5
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e3da      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d98:	4b70      	ldr	r3, [pc, #448]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1ef      	bne.n	8004d86 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004da6:	4b6d      	ldr	r3, [pc, #436]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	4969      	ldr	r1, [pc, #420]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004dbc:	4b67      	ldr	r3, [pc, #412]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dc2:	4a66      	ldr	r2, [pc, #408]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004dcc:	f7fd f834 	bl	8001e38 <HAL_GetTick>
 8004dd0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd4:	f7fd f830 	bl	8001e38 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e3b3      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004de6:	4b5d      	ldr	r3, [pc, #372]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ef      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x630>
 8004df4:	e01b      	b.n	8004e2e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004df6:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dfc:	4a57      	ldr	r2, [pc, #348]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004dfe:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004e02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004e06:	f7fd f817 	bl	8001e38 <HAL_GetTick>
 8004e0a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e0e:	f7fd f813 	bl	8001e38 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b05      	cmp	r3, #5
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e396      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e20:	4b4e      	ldr	r3, [pc, #312]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1ef      	bne.n	8004e0e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e2e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e36:	4b49      	ldr	r3, [pc, #292]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3c:	4a47      	ldr	r2, [pc, #284]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004e3e:	f023 0304 	bic.w	r3, r3, #4
 8004e42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8111 	beq.w	8005076 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e54:	2300      	movs	r3, #0
 8004e56:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5a:	4b40      	ldr	r3, [pc, #256]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d111      	bne.n	8004e8c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e68:	4b3c      	ldr	r3, [pc, #240]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6e:	4a3b      	ldr	r2, [pc, #236]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004e70:	f043 0304 	orr.w	r3, r3, #4
 8004e74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004e78:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e8c:	4b34      	ldr	r3, [pc, #208]	; (8004f60 <HAL_RCC_OscConfig+0x7bc>)
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d118      	bne.n	8004eca <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004e98:	4b31      	ldr	r3, [pc, #196]	; (8004f60 <HAL_RCC_OscConfig+0x7bc>)
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	4a30      	ldr	r2, [pc, #192]	; (8004f60 <HAL_RCC_OscConfig+0x7bc>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea4:	f7fc ffc8 	bl	8001e38 <HAL_GetTick>
 8004ea8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eac:	f7fc ffc4 	bl	8001e38 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e347      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ebe:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <HAL_RCC_OscConfig+0x7bc>)
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01f      	beq.n	8004f16 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d010      	beq.n	8004f04 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ee2:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004eea:	f043 0304 	orr.w	r3, r3, #4
 8004eee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ef8:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f02:	e018      	b.n	8004f36 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f04:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f0a:	4a14      	ldr	r2, [pc, #80]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f14:	e00f      	b.n	8004f36 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f16:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f1c:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004f1e:	f023 0301 	bic.w	r3, r3, #1
 8004f22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f26:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f2c:	4a0b      	ldr	r2, [pc, #44]	; (8004f5c <HAL_RCC_OscConfig+0x7b8>)
 8004f2e:	f023 0304 	bic.w	r3, r3, #4
 8004f32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d057      	beq.n	8004fee <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004f3e:	f7fc ff7b 	bl	8001e38 <HAL_GetTick>
 8004f42:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f44:	e00e      	b.n	8004f64 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fc ff77 	bl	8001e38 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d905      	bls.n	8004f64 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e2f8      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
 8004f5c:	46020c00 	.word	0x46020c00
 8004f60:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f64:	4b9c      	ldr	r3, [pc, #624]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8004f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0e9      	beq.n	8004f46 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01b      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f7e:	4b96      	ldr	r3, [pc, #600]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8004f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f84:	4a94      	ldr	r2, [pc, #592]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8004f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fc ff52 	bl	8001e38 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e2d3      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004fa6:	4b8c      	ldr	r3, [pc, #560]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8004fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ed      	beq.n	8004f90 <HAL_RCC_OscConfig+0x7ec>
 8004fb4:	e053      	b.n	800505e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004fb6:	4b88      	ldr	r3, [pc, #544]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8004fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fbc:	4a86      	ldr	r2, [pc, #536]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8004fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc8:	f7fc ff36 	bl	8001e38 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e2b7      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fde:	4b7e      	ldr	r3, [pc, #504]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8004fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1ed      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x824>
 8004fec:	e037      	b.n	800505e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004fee:	f7fc ff23 	bl	8001e38 <HAL_GetTick>
 8004ff2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ff4:	e00a      	b.n	800500c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff6:	f7fc ff1f 	bl	8001e38 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f241 3288 	movw	r2, #5000	; 0x1388
 8005004:	4293      	cmp	r3, r2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e2a0      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800500c:	4b72      	ldr	r3, [pc, #456]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 800500e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ed      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800501a:	4b6f      	ldr	r3, [pc, #444]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 800501c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01a      	beq.n	800505e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005028:	4b6b      	ldr	r3, [pc, #428]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 800502a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800502e:	4a6a      	ldr	r2, [pc, #424]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8005030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005034:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005038:	e00a      	b.n	8005050 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503a:	f7fc fefd 	bl	8001e38 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	f241 3288 	movw	r2, #5000	; 0x1388
 8005048:	4293      	cmp	r3, r2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e27e      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005050:	4b61      	ldr	r3, [pc, #388]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8005052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1ed      	bne.n	800503a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800505e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005062:	2b01      	cmp	r3, #1
 8005064:	d107      	bne.n	8005076 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005066:	4b5c      	ldr	r3, [pc, #368]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8005068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506c:	4a5a      	ldr	r2, [pc, #360]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 800506e:	f023 0304 	bic.w	r3, r3, #4
 8005072:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d036      	beq.n	80050f0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d019      	beq.n	80050be <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800508a:	4b53      	ldr	r3, [pc, #332]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a52      	ldr	r2, [pc, #328]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8005090:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005094:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005096:	f7fc fecf 	bl	8001e38 <HAL_GetTick>
 800509a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800509e:	f7fc fecb 	bl	8001e38 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e24e      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80050b0:	4b49      	ldr	r3, [pc, #292]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCC_OscConfig+0x8fa>
 80050bc:	e018      	b.n	80050f0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80050be:	4b46      	ldr	r3, [pc, #280]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a45      	ldr	r2, [pc, #276]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 80050c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80050ca:	f7fc feb5 	bl	8001e38 <HAL_GetTick>
 80050ce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050d2:	f7fc feb1 	bl	8001e38 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e234      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80050e4:	4b3c      	ldr	r3, [pc, #240]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d036      	beq.n	800516a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	2b00      	cmp	r3, #0
 8005102:	d019      	beq.n	8005138 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005104:	4b34      	ldr	r3, [pc, #208]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a33      	ldr	r2, [pc, #204]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 800510a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800510e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005110:	f7fc fe92 	bl	8001e38 <HAL_GetTick>
 8005114:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005118:	f7fc fe8e 	bl	8001e38 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e211      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800512a:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCC_OscConfig+0x974>
 8005136:	e018      	b.n	800516a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005138:	4b27      	ldr	r3, [pc, #156]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 800513e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005142:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005144:	f7fc fe78 	bl	8001e38 <HAL_GetTick>
 8005148:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800514c:	f7fc fe74 	bl	8001e38 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e1f7      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800515e:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d07f      	beq.n	8005276 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	2b00      	cmp	r3, #0
 800517c:	d062      	beq.n	8005244 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	4a15      	ldr	r2, [pc, #84]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8005184:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005188:	6093      	str	r3, [r2, #8]
 800518a:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	4910      	ldr	r1, [pc, #64]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 8005198:	4313      	orrs	r3, r2
 800519a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80051a4:	d309      	bcc.n	80051ba <HAL_RCC_OscConfig+0xa16>
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f023 021f 	bic.w	r2, r3, #31
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	4909      	ldr	r1, [pc, #36]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60cb      	str	r3, [r1, #12]
 80051b8:	e02a      	b.n	8005210 <HAL_RCC_OscConfig+0xa6c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	da0c      	bge.n	80051dc <HAL_RCC_OscConfig+0xa38>
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	015b      	lsls	r3, r3, #5
 80051d0:	4901      	ldr	r1, [pc, #4]	; (80051d8 <HAL_RCC_OscConfig+0xa34>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60cb      	str	r3, [r1, #12]
 80051d6:	e01b      	b.n	8005210 <HAL_RCC_OscConfig+0xa6c>
 80051d8:	46020c00 	.word	0x46020c00
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e4:	d30a      	bcc.n	80051fc <HAL_RCC_OscConfig+0xa58>
 80051e6:	4ba1      	ldr	r3, [pc, #644]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	029b      	lsls	r3, r3, #10
 80051f4:	499d      	ldr	r1, [pc, #628]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60cb      	str	r3, [r1, #12]
 80051fa:	e009      	b.n	8005210 <HAL_RCC_OscConfig+0xa6c>
 80051fc:	4b9b      	ldr	r3, [pc, #620]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	03db      	lsls	r3, r3, #15
 800520a:	4998      	ldr	r1, [pc, #608]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800520c:	4313      	orrs	r3, r2
 800520e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005210:	4b96      	ldr	r3, [pc, #600]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a95      	ldr	r2, [pc, #596]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 8005216:	f043 0310 	orr.w	r3, r3, #16
 800521a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800521c:	f7fc fe0c 	bl	8001e38 <HAL_GetTick>
 8005220:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005224:	f7fc fe08 	bl	8001e38 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e18b      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005236:	4b8d      	ldr	r3, [pc, #564]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0xa80>
 8005242:	e018      	b.n	8005276 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005244:	4b89      	ldr	r3, [pc, #548]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a88      	ldr	r2, [pc, #544]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800524a:	f023 0310 	bic.w	r3, r3, #16
 800524e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005250:	f7fc fdf2 	bl	8001e38 <HAL_GetTick>
 8005254:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005258:	f7fc fdee 	bl	8001e38 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e171      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800526a:	4b80      	ldr	r3, [pc, #512]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8166 	beq.w	800554c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005280:	2300      	movs	r3, #0
 8005282:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005286:	4b79      	ldr	r3, [pc, #484]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b0c      	cmp	r3, #12
 8005290:	f000 80f2 	beq.w	8005478 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	2b02      	cmp	r3, #2
 800529a:	f040 80c5 	bne.w	8005428 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800529e:	4b73      	ldr	r3, [pc, #460]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a72      	ldr	r2, [pc, #456]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80052a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80052aa:	f7fc fdc5 	bl	8001e38 <HAL_GetTick>
 80052ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b2:	f7fc fdc1 	bl	8001e38 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e144      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80052c4:	4b69      	ldr	r3, [pc, #420]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f0      	bne.n	80052b2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d0:	4b66      	ldr	r3, [pc, #408]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80052d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d111      	bne.n	8005302 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80052de:	4b63      	ldr	r3, [pc, #396]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80052e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e4:	4a61      	ldr	r2, [pc, #388]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80052ee:	4b5f      	ldr	r3, [pc, #380]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80052f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005302:	4b5b      	ldr	r3, [pc, #364]	; (8005470 <HAL_RCC_OscConfig+0xccc>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800530a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800530e:	d102      	bne.n	8005316 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005316:	4b56      	ldr	r3, [pc, #344]	; (8005470 <HAL_RCC_OscConfig+0xccc>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	4a55      	ldr	r2, [pc, #340]	; (8005470 <HAL_RCC_OscConfig+0xccc>)
 800531c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005320:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005322:	4b52      	ldr	r3, [pc, #328]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005336:	3a01      	subs	r2, #1
 8005338:	0212      	lsls	r2, r2, #8
 800533a:	4311      	orrs	r1, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005340:	430a      	orrs	r2, r1
 8005342:	494a      	ldr	r1, [pc, #296]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 8005344:	4313      	orrs	r3, r2
 8005346:	628b      	str	r3, [r1, #40]	; 0x28
 8005348:	4b48      	ldr	r3, [pc, #288]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800534a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800534c:	4b49      	ldr	r3, [pc, #292]	; (8005474 <HAL_RCC_OscConfig+0xcd0>)
 800534e:	4013      	ands	r3, r2
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005354:	3a01      	subs	r2, #1
 8005356:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800535e:	3a01      	subs	r2, #1
 8005360:	0252      	lsls	r2, r2, #9
 8005362:	b292      	uxth	r2, r2
 8005364:	4311      	orrs	r1, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800536a:	3a01      	subs	r2, #1
 800536c:	0412      	lsls	r2, r2, #16
 800536e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005372:	4311      	orrs	r1, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005378:	3a01      	subs	r2, #1
 800537a:	0612      	lsls	r2, r2, #24
 800537c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005380:	430a      	orrs	r2, r1
 8005382:	493a      	ldr	r1, [pc, #232]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 8005384:	4313      	orrs	r3, r2
 8005386:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005388:	4b38      	ldr	r3, [pc, #224]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	4a37      	ldr	r2, [pc, #220]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800538e:	f023 0310 	bic.w	r3, r3, #16
 8005392:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005398:	4a34      	ldr	r2, [pc, #208]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800539e:	4b33      	ldr	r3, [pc, #204]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	4a32      	ldr	r2, [pc, #200]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80053a4:	f043 0310 	orr.w	r3, r3, #16
 80053a8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80053aa:	4b30      	ldr	r3, [pc, #192]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	f023 020c 	bic.w	r2, r3, #12
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	492d      	ldr	r1, [pc, #180]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80053bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d105      	bne.n	80053d0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80053c4:	4b2a      	ldr	r3, [pc, #168]	; (8005470 <HAL_RCC_OscConfig+0xccc>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a29      	ldr	r2, [pc, #164]	; (8005470 <HAL_RCC_OscConfig+0xccc>)
 80053ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ce:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80053d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d107      	bne.n	80053e8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80053d8:	4b24      	ldr	r3, [pc, #144]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80053da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053de:	4a23      	ldr	r2, [pc, #140]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053e8:	4b20      	ldr	r3, [pc, #128]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	4a1f      	ldr	r2, [pc, #124]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80053ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 80053fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005400:	f7fc fd1a 	bl	8001e38 <HAL_GetTick>
 8005404:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005408:	f7fc fd16 	bl	8001e38 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e099      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800541a:	4b14      	ldr	r3, [pc, #80]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <HAL_RCC_OscConfig+0xc64>
 8005426:	e091      	b.n	800554c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005428:	4b10      	ldr	r3, [pc, #64]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a0f      	ldr	r2, [pc, #60]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800542e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005432:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005434:	f7fc fd00 	bl	8001e38 <HAL_GetTick>
 8005438:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543c:	f7fc fcfc 	bl	8001e38 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e07f      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800545a:	4b04      	ldr	r3, [pc, #16]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	4a03      	ldr	r2, [pc, #12]	; (800546c <HAL_RCC_OscConfig+0xcc8>)
 8005460:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005464:	f023 0303 	bic.w	r3, r3, #3
 8005468:	6293      	str	r3, [r2, #40]	; 0x28
 800546a:	e06f      	b.n	800554c <HAL_RCC_OscConfig+0xda8>
 800546c:	46020c00 	.word	0x46020c00
 8005470:	46020800 	.word	0x46020800
 8005474:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005478:	4b37      	ldr	r3, [pc, #220]	; (8005558 <HAL_RCC_OscConfig+0xdb4>)
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800547e:	4b36      	ldr	r3, [pc, #216]	; (8005558 <HAL_RCC_OscConfig+0xdb4>)
 8005480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005482:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	2b01      	cmp	r3, #1
 800548a:	d039      	beq.n	8005500 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0203 	and.w	r2, r3, #3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d132      	bne.n	8005500 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	0a1b      	lsrs	r3, r3, #8
 800549e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d129      	bne.n	8005500 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d122      	bne.n	8005500 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d11a      	bne.n	8005500 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	0a5b      	lsrs	r3, r3, #9
 80054ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054d8:	429a      	cmp	r2, r3
 80054da:	d111      	bne.n	8005500 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d108      	bne.n	8005500 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	0e1b      	lsrs	r3, r3, #24
 80054f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d001      	beq.n	8005504 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e024      	b.n	800554e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005504:	4b14      	ldr	r3, [pc, #80]	; (8005558 <HAL_RCC_OscConfig+0xdb4>)
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	08db      	lsrs	r3, r3, #3
 800550a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005512:	429a      	cmp	r2, r3
 8005514:	d01a      	beq.n	800554c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <HAL_RCC_OscConfig+0xdb4>)
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	4a0f      	ldr	r2, [pc, #60]	; (8005558 <HAL_RCC_OscConfig+0xdb4>)
 800551c:	f023 0310 	bic.w	r3, r3, #16
 8005520:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005522:	f7fc fc89 	bl	8001e38 <HAL_GetTick>
 8005526:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005528:	bf00      	nop
 800552a:	f7fc fc85 	bl	8001e38 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	4293      	cmp	r3, r2
 8005534:	d0f9      	beq.n	800552a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553a:	4a07      	ldr	r2, [pc, #28]	; (8005558 <HAL_RCC_OscConfig+0xdb4>)
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_RCC_OscConfig+0xdb4>)
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	4a04      	ldr	r2, [pc, #16]	; (8005558 <HAL_RCC_OscConfig+0xdb4>)
 8005546:	f043 0310 	orr.w	r3, r3, #16
 800554a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3738      	adds	r7, #56	; 0x38
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	46020c00 	.word	0x46020c00

0800555c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e1d9      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005570:	4b9b      	ldr	r3, [pc, #620]	; (80057e0 <HAL_RCC_ClockConfig+0x284>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d910      	bls.n	80055a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	4b98      	ldr	r3, [pc, #608]	; (80057e0 <HAL_RCC_ClockConfig+0x284>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f023 020f 	bic.w	r2, r3, #15
 8005586:	4996      	ldr	r1, [pc, #600]	; (80057e0 <HAL_RCC_ClockConfig+0x284>)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	4313      	orrs	r3, r2
 800558c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558e:	4b94      	ldr	r3, [pc, #592]	; (80057e0 <HAL_RCC_ClockConfig+0x284>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d001      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e1c1      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d010      	beq.n	80055ce <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	4b8c      	ldr	r3, [pc, #560]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d908      	bls.n	80055ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80055bc:	4b89      	ldr	r3, [pc, #548]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	4986      	ldr	r1, [pc, #536]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d012      	beq.n	8005600 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	4b81      	ldr	r3, [pc, #516]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	091b      	lsrs	r3, r3, #4
 80055e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d909      	bls.n	8005600 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80055ec:	4b7d      	ldr	r3, [pc, #500]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	497a      	ldr	r1, [pc, #488]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	4b74      	ldr	r3, [pc, #464]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005618:	429a      	cmp	r2, r3
 800561a:	d908      	bls.n	800562e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800561c:	4b71      	ldr	r3, [pc, #452]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	496e      	ldr	r1, [pc, #440]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 800562a:	4313      	orrs	r3, r2
 800562c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	4b69      	ldr	r3, [pc, #420]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	429a      	cmp	r2, r3
 8005648:	d908      	bls.n	800565c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800564a:	4b66      	ldr	r3, [pc, #408]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 020f 	bic.w	r2, r3, #15
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	4963      	ldr	r1, [pc, #396]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005658:	4313      	orrs	r3, r2
 800565a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80d2 	beq.w	800580e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800566a:	2300      	movs	r3, #0
 800566c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d143      	bne.n	80056fe <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005676:	4b5b      	ldr	r3, [pc, #364]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d110      	bne.n	80056a6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005684:	4b57      	ldr	r3, [pc, #348]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800568a:	4a56      	ldr	r2, [pc, #344]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 800568c:	f043 0304 	orr.w	r3, r3, #4
 8005690:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005694:	4b53      	ldr	r3, [pc, #332]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80056a6:	f7fc fbc7 	bl	8001e38 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80056ac:	4b4e      	ldr	r3, [pc, #312]	; (80057e8 <HAL_RCC_ClockConfig+0x28c>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00f      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80056ba:	f7fc fbbd 	bl	8001e38 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e12b      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80056cc:	4b46      	ldr	r3, [pc, #280]	; (80057e8 <HAL_RCC_ClockConfig+0x28c>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d107      	bne.n	80056ee <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80056de:	4b41      	ldr	r3, [pc, #260]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80056e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e4:	4a3f      	ldr	r2, [pc, #252]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80056e6:	f023 0304 	bic.w	r3, r3, #4
 80056ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80056ee:	4b3d      	ldr	r3, [pc, #244]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d121      	bne.n	800573e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e112      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d107      	bne.n	8005716 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005706:	4b37      	ldr	r3, [pc, #220]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d115      	bne.n	800573e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e106      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d107      	bne.n	800572e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800571e:	4b31      	ldr	r3, [pc, #196]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0fa      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800572e:	4b2d      	ldr	r3, [pc, #180]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e0f2      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800573e:	4b29      	ldr	r3, [pc, #164]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f023 0203 	bic.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4926      	ldr	r1, [pc, #152]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 800574c:	4313      	orrs	r3, r2
 800574e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005750:	f7fc fb72 	bl	8001e38 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b03      	cmp	r3, #3
 800575c:	d112      	bne.n	8005784 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800575e:	e00a      	b.n	8005776 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005760:	f7fc fb6a 	bl	8001e38 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f241 3288 	movw	r2, #5000	; 0x1388
 800576e:	4293      	cmp	r3, r2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e0d6      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005776:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b0c      	cmp	r3, #12
 8005780:	d1ee      	bne.n	8005760 <HAL_RCC_ClockConfig+0x204>
 8005782:	e044      	b.n	800580e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d112      	bne.n	80057b2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800578c:	e00a      	b.n	80057a4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800578e:	f7fc fb53 	bl	8001e38 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f241 3288 	movw	r2, #5000	; 0x1388
 800579c:	4293      	cmp	r3, r2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e0bf      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057a4:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f003 030c 	and.w	r3, r3, #12
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d1ee      	bne.n	800578e <HAL_RCC_ClockConfig+0x232>
 80057b0:	e02d      	b.n	800580e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d123      	bne.n	8005802 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80057ba:	e00a      	b.n	80057d2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057bc:	f7fc fb3c 	bl	8001e38 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e0a8      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80057d2:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <HAL_RCC_ClockConfig+0x288>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1ee      	bne.n	80057bc <HAL_RCC_ClockConfig+0x260>
 80057de:	e016      	b.n	800580e <HAL_RCC_ClockConfig+0x2b2>
 80057e0:	40022000 	.word	0x40022000
 80057e4:	46020c00 	.word	0x46020c00
 80057e8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fc fb24 	bl	8001e38 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e090      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005802:	4b4a      	ldr	r3, [pc, #296]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b04      	cmp	r3, #4
 800580c:	d1ee      	bne.n	80057ec <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d010      	beq.n	800583c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	4b43      	ldr	r3, [pc, #268]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	429a      	cmp	r2, r3
 8005828:	d208      	bcs.n	800583c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800582a:	4b40      	ldr	r3, [pc, #256]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f023 020f 	bic.w	r2, r3, #15
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	493d      	ldr	r1, [pc, #244]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 8005838:	4313      	orrs	r3, r2
 800583a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800583c:	4b3c      	ldr	r3, [pc, #240]	; (8005930 <HAL_RCC_ClockConfig+0x3d4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d210      	bcs.n	800586c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584a:	4b39      	ldr	r3, [pc, #228]	; (8005930 <HAL_RCC_ClockConfig+0x3d4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f023 020f 	bic.w	r2, r3, #15
 8005852:	4937      	ldr	r1, [pc, #220]	; (8005930 <HAL_RCC_ClockConfig+0x3d4>)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	4313      	orrs	r3, r2
 8005858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800585a:	4b35      	ldr	r3, [pc, #212]	; (8005930 <HAL_RCC_ClockConfig+0x3d4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d001      	beq.n	800586c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e05b      	b.n	8005924 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d010      	beq.n	800589a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	4b2b      	ldr	r3, [pc, #172]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005884:	429a      	cmp	r2, r3
 8005886:	d208      	bcs.n	800589a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005888:	4b28      	ldr	r3, [pc, #160]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4925      	ldr	r1, [pc, #148]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 8005896:	4313      	orrs	r3, r2
 8005898:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d012      	beq.n	80058cc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691a      	ldr	r2, [r3, #16]
 80058aa:	4b20      	ldr	r3, [pc, #128]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d209      	bcs.n	80058cc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80058b8:	4b1c      	ldr	r3, [pc, #112]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	4919      	ldr	r1, [pc, #100]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d010      	beq.n	80058fa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	4b13      	ldr	r3, [pc, #76]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d208      	bcs.n	80058fa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80058e8:	4b10      	ldr	r3, [pc, #64]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	490d      	ldr	r1, [pc, #52]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80058fa:	f000 f821 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 80058fe:	4602      	mov	r2, r0
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <HAL_RCC_ClockConfig+0x3d0>)
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	490a      	ldr	r1, [pc, #40]	; (8005934 <HAL_RCC_ClockConfig+0x3d8>)
 800590a:	5ccb      	ldrb	r3, [r1, r3]
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	4a09      	ldr	r2, [pc, #36]	; (8005938 <HAL_RCC_ClockConfig+0x3dc>)
 8005912:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005914:	4b09      	ldr	r3, [pc, #36]	; (800593c <HAL_RCC_ClockConfig+0x3e0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fb fcbd 	bl	8001298 <HAL_InitTick>
 800591e:	4603      	mov	r3, r0
 8005920:	73fb      	strb	r3, [r7, #15]

  return status;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	46020c00 	.word	0x46020c00
 8005930:	40022000 	.word	0x40022000
 8005934:	0800d0d4 	.word	0x0800d0d4
 8005938:	20000000 	.word	0x20000000
 800593c:	20000004 	.word	0x20000004

08005940 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005940:	b480      	push	{r7}
 8005942:	b08b      	sub	sp, #44	; 0x2c
 8005944:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594e:	4b78      	ldr	r3, [pc, #480]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005958:	4b75      	ldr	r3, [pc, #468]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x34>
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b0c      	cmp	r3, #12
 800596c:	d121      	bne.n	80059b2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d11e      	bne.n	80059b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005974:	4b6e      	ldr	r3, [pc, #440]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d107      	bne.n	8005990 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005980:	4b6b      	ldr	r3, [pc, #428]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005986:	0b1b      	lsrs	r3, r3, #12
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
 800598e:	e005      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005990:	4b67      	ldr	r3, [pc, #412]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	0f1b      	lsrs	r3, r3, #28
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800599c:	4a65      	ldr	r2, [pc, #404]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d110      	bne.n	80059ce <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059b0:	e00d      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059b2:	4b5f      	ldr	r3, [pc, #380]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d102      	bne.n	80059c4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059be:	4b5e      	ldr	r3, [pc, #376]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	e004      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d101      	bne.n	80059ce <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059ca:	4b5c      	ldr	r3, [pc, #368]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059cc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	f040 80a5 	bne.w	8005b20 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80059d6:	4b56      	ldr	r3, [pc, #344]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80059e0:	4b53      	ldr	r3, [pc, #332]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80059ee:	4b50      	ldr	r3, [pc, #320]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	091b      	lsrs	r3, r3, #4
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80059fa:	4b4d      	ldr	r3, [pc, #308]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	08db      	lsrs	r3, r3, #3
 8005a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d003      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0xe4>
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d022      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0x128>
 8005a22:	e043      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005b40 <HAL_RCC_GetSysClockFreq+0x200>
 8005a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a36:	4b3e      	ldr	r3, [pc, #248]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a46:	ed97 6a01 	vldr	s12, [r7, #4]
 8005a4a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005b44 <HAL_RCC_GetSysClockFreq+0x204>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a66:	e046      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	eddf 6a35 	vldr	s13, [pc, #212]	; 8005b48 <HAL_RCC_GetSysClockFreq+0x208>
 8005a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7a:	4b2d      	ldr	r3, [pc, #180]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a8a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005a8e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005b44 <HAL_RCC_GetSysClockFreq+0x204>
 8005a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aaa:	e024      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	ee07 3a90 	vmov	s15, r3
 8005abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005acc:	ee07 3a90 	vmov	s15, r3
 8005ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ad4:	ed97 6a01 	vldr	s12, [r7, #4]
 8005ad8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005b44 <HAL_RCC_GetSysClockFreq+0x204>
 8005adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005af4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005af6:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afa:	0e1b      	lsrs	r3, r3, #24
 8005afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b00:	3301      	adds	r3, #1
 8005b02:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1a:	ee17 3a90 	vmov	r3, s15
 8005b1e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005b20:	6a3b      	ldr	r3, [r7, #32]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	372c      	adds	r7, #44	; 0x2c
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	46020c00 	.word	0x46020c00
 8005b34:	0800d0ec 	.word	0x0800d0ec
 8005b38:	00f42400 	.word	0x00f42400
 8005b3c:	016e3600 	.word	0x016e3600
 8005b40:	4b742400 	.word	0x4b742400
 8005b44:	46000000 	.word	0x46000000
 8005b48:	4bb71b00 	.word	0x4bb71b00

08005b4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005b50:	f7ff fef6 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <HAL_RCC_GetHCLKFreq+0x28>)
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	4906      	ldr	r1, [pc, #24]	; (8005b78 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005b60:	5ccb      	ldrb	r3, [r1, r3]
 8005b62:	fa22 f303 	lsr.w	r3, r2, r3
 8005b66:	4a05      	ldr	r2, [pc, #20]	; (8005b7c <HAL_RCC_GetHCLKFreq+0x30>)
 8005b68:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005b6a:	4b04      	ldr	r3, [pc, #16]	; (8005b7c <HAL_RCC_GetHCLKFreq+0x30>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	46020c00 	.word	0x46020c00
 8005b78:	0800d0d4 	.word	0x0800d0d4
 8005b7c:	20000000 	.word	0x20000000

08005b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005b84:	f7ff ffe2 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	4903      	ldr	r1, [pc, #12]	; (8005ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b96:	5ccb      	ldrb	r3, [r1, r3]
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	46020c00 	.word	0x46020c00
 8005ba4:	0800d0e4 	.word	0x0800d0e4

08005ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005bac:	f7ff ffce 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	4903      	ldr	r1, [pc, #12]	; (8005bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bbe:	5ccb      	ldrb	r3, [r1, r3]
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	46020c00 	.word	0x46020c00
 8005bcc:	0800d0e4 	.word	0x0800d0e4

08005bd0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005bd4:	f7ff ffba 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	091b      	lsrs	r3, r3, #4
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	4903      	ldr	r1, [pc, #12]	; (8005bf4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005be6:	5ccb      	ldrb	r3, [r1, r3]
 8005be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	46020c00 	.word	0x46020c00
 8005bf4:	0800d0e4 	.word	0x0800d0e4

08005bf8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	221f      	movs	r2, #31
 8005c06:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <HAL_RCC_GetClockConfig+0x68>)
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f003 0203 	and.w	r2, r3, #3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <HAL_RCC_GetClockConfig+0x68>)
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f003 020f 	and.w	r2, r3, #15
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005c20:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <HAL_RCC_GetClockConfig+0x68>)
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <HAL_RCC_GetClockConfig+0x68>)
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	091b      	lsrs	r3, r3, #4
 8005c32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005c3a:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <HAL_RCC_GetClockConfig+0x68>)
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <HAL_RCC_GetClockConfig+0x6c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 020f 	and.w	r2, r3, #15
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	601a      	str	r2, [r3, #0]
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	46020c00 	.word	0x46020c00
 8005c64:	40022000 	.word	0x40022000

08005c68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c70:	4b3e      	ldr	r3, [pc, #248]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c7e:	f7fe fd37 	bl	80046f0 <HAL_PWREx_GetVoltageRange>
 8005c82:	6178      	str	r0, [r7, #20]
 8005c84:	e019      	b.n	8005cba <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c86:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c8c:	4a37      	ldr	r2, [pc, #220]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c8e:	f043 0304 	orr.w	r3, r3, #4
 8005c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005c96:	4b35      	ldr	r3, [pc, #212]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ca4:	f7fe fd24 	bl	80046f0 <HAL_PWREx_GetVoltageRange>
 8005ca8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005caa:	4b30      	ldr	r3, [pc, #192]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb0:	4a2e      	ldr	r2, [pc, #184]	; (8005d6c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005cb2:	f023 0304 	bic.w	r3, r3, #4
 8005cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cc0:	d003      	beq.n	8005cca <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cc8:	d109      	bne.n	8005cde <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cd0:	d202      	bcs.n	8005cd8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005cd6:	e033      	b.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005cd8:	2300      	movs	r3, #0
 8005cda:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005cdc:	e030      	b.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ce4:	d208      	bcs.n	8005cf8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cec:	d102      	bne.n	8005cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005cee:	2303      	movs	r3, #3
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e025      	b.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e035      	b.n	8005d64 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfe:	d90f      	bls.n	8005d20 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d0c:	d902      	bls.n	8005d14 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005d0e:	2300      	movs	r3, #0
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	e015      	b.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005d14:	2301      	movs	r3, #1
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	e012      	b.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	e00f      	b.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d26:	d109      	bne.n	8005d3c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2e:	d102      	bne.n	8005d36 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005d30:	2301      	movs	r3, #1
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	e004      	b.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005d36:	2302      	movs	r3, #2
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	e001      	b.n	8005d40 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f023 020f 	bic.w	r2, r3, #15
 8005d48:	4909      	ldr	r1, [pc, #36]	; (8005d70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005d50:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d001      	beq.n	8005d62 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	46020c00 	.word	0x46020c00
 8005d70:	40022000 	.word	0x40022000

08005d74 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d78:	b0b8      	sub	sp, #224	; 0xe0
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d80:	2300      	movs	r3, #0
 8005d82:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d86:	2300      	movs	r3, #0
 8005d88:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f002 0401 	and.w	r4, r2, #1
 8005d98:	2500      	movs	r5, #0
 8005d9a:	ea54 0305 	orrs.w	r3, r4, r5
 8005d9e:	d00b      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005da0:	4bca      	ldr	r3, [pc, #808]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005da6:	f023 0103 	bic.w	r1, r3, #3
 8005daa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db0:	4ac6      	ldr	r2, [pc, #792]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005db2:	430b      	orrs	r3, r1
 8005db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f002 0802 	and.w	r8, r2, #2
 8005dc4:	f04f 0900 	mov.w	r9, #0
 8005dc8:	ea58 0309 	orrs.w	r3, r8, r9
 8005dcc:	d00b      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005dce:	4bbf      	ldr	r3, [pc, #764]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dd4:	f023 010c 	bic.w	r1, r3, #12
 8005dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	4abb      	ldr	r2, [pc, #748]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005de0:	430b      	orrs	r3, r1
 8005de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f002 0a04 	and.w	sl, r2, #4
 8005df2:	f04f 0b00 	mov.w	fp, #0
 8005df6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dfa:	d00b      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005dfc:	4bb3      	ldr	r3, [pc, #716]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e02:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005e06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	4aaf      	ldr	r2, [pc, #700]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f002 0308 	and.w	r3, r2, #8
 8005e20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4313      	orrs	r3, r2
 8005e32:	d00b      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005e34:	4ba5      	ldr	r3, [pc, #660]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e44:	4aa1      	ldr	r2, [pc, #644]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e46:	430b      	orrs	r3, r1
 8005e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f002 0310 	and.w	r3, r2, #16
 8005e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005e66:	460b      	mov	r3, r1
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	d00b      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005e6c:	4b97      	ldr	r3, [pc, #604]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7c:	4a93      	ldr	r2, [pc, #588]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f002 0320 	and.w	r3, r2, #32
 8005e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e94:	2300      	movs	r3, #0
 8005e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	d00b      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005ea4:	4b89      	ldr	r3, [pc, #548]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eaa:	f023 0107 	bic.w	r1, r3, #7
 8005eae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb4:	4a85      	ldr	r2, [pc, #532]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ed2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	d00b      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005edc:	4b7b      	ldr	r3, [pc, #492]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ee2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005ee6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eec:	4a77      	ldr	r2, [pc, #476]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005f00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f04:	2300      	movs	r3, #0
 8005f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f0a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4313      	orrs	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005f14:	4b6d      	ldr	r3, [pc, #436]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f24:	4a69      	ldr	r2, [pc, #420]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f26:	430b      	orrs	r3, r1
 8005f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005f46:	460b      	mov	r3, r1
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	d00b      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005f4c:	4b5f      	ldr	r3, [pc, #380]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	4a5b      	ldr	r2, [pc, #364]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f74:	2300      	movs	r3, #0
 8005f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4313      	orrs	r3, r2
 8005f82:	d00b      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005f84:	4b51      	ldr	r3, [pc, #324]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f8a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8005f8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f94:	4a4d      	ldr	r2, [pc, #308]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f96:	430b      	orrs	r3, r1
 8005f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fac:	2300      	movs	r3, #0
 8005fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fb2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d00b      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005fbc:	4b43      	ldr	r3, [pc, #268]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fc2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005fc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fcc:	4a3f      	ldr	r2, [pc, #252]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005fe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	d00b      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005ff4:	4b35      	ldr	r3, [pc, #212]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ffa:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005ffe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006004:	4a31      	ldr	r2, [pc, #196]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006006:	430b      	orrs	r3, r1
 8006008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800600c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006018:	67bb      	str	r3, [r7, #120]	; 0x78
 800601a:	2300      	movs	r3, #0
 800601c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800601e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006022:	460b      	mov	r3, r1
 8006024:	4313      	orrs	r3, r2
 8006026:	d00c      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006028:	4b28      	ldr	r3, [pc, #160]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800602a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800602e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800603a:	4a24      	ldr	r2, [pc, #144]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800603c:	430b      	orrs	r3, r1
 800603e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800604e:	673b      	str	r3, [r7, #112]	; 0x70
 8006050:	2300      	movs	r3, #0
 8006052:	677b      	str	r3, [r7, #116]	; 0x74
 8006054:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006058:	460b      	mov	r3, r1
 800605a:	4313      	orrs	r3, r2
 800605c:	d04f      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800605e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	2b80      	cmp	r3, #128	; 0x80
 8006068:	d02d      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800606a:	2b80      	cmp	r3, #128	; 0x80
 800606c:	d827      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800606e:	2b60      	cmp	r3, #96	; 0x60
 8006070:	d02e      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006072:	2b60      	cmp	r3, #96	; 0x60
 8006074:	d823      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d006      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800607a:	2b40      	cmp	r3, #64	; 0x40
 800607c:	d81f      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8006082:	2b20      	cmp	r3, #32
 8006084:	d011      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006086:	e01a      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006088:	4b10      	ldr	r3, [pc, #64]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	4a0f      	ldr	r2, [pc, #60]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800608e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006092:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006094:	e01d      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800609a:	3308      	adds	r3, #8
 800609c:	4618      	mov	r0, r3
 800609e:	f002 f9db 	bl	8008458 <RCCEx_PLL2_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80060a8:	e013      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060ae:	332c      	adds	r3, #44	; 0x2c
 80060b0:	4618      	mov	r0, r3
 80060b2:	f002 fa69 	bl	8008588 <RCCEx_PLL3_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80060bc:	e009      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80060c4:	e005      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80060c6:	bf00      	nop
 80060c8:	e003      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80060ca:	bf00      	nop
 80060cc:	46020c00 	.word	0x46020c00
        break;
 80060d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10d      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80060da:	4bb6      	ldr	r3, [pc, #728]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060e0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80060e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	4ab1      	ldr	r2, [pc, #708]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80060ee:	430b      	orrs	r3, r1
 80060f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80060f4:	e003      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80060fa:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800610a:	66bb      	str	r3, [r7, #104]	; 0x68
 800610c:	2300      	movs	r3, #0
 800610e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006110:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006114:	460b      	mov	r3, r1
 8006116:	4313      	orrs	r3, r2
 8006118:	d053      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800611a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800611e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006126:	d033      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612c:	d82c      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800612e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006132:	d02f      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006138:	d826      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800613a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613e:	d008      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006144:	d820      	bhi.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800614a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614e:	d011      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006150:	e01a      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006152:	4b98      	ldr	r3, [pc, #608]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006156:	4a97      	ldr	r2, [pc, #604]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800615e:	e01a      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006164:	3308      	adds	r3, #8
 8006166:	4618      	mov	r0, r3
 8006168:	f002 f976 	bl	8008458 <RCCEx_PLL2_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006172:	e010      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006178:	332c      	adds	r3, #44	; 0x2c
 800617a:	4618      	mov	r0, r3
 800617c:	f002 fa04 	bl	8008588 <RCCEx_PLL3_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006186:	e006      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800618e:	e002      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006190:	bf00      	nop
 8006192:	e000      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006196:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10d      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800619e:	4b85      	ldr	r3, [pc, #532]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80061a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061a4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80061a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b0:	4a80      	ldr	r2, [pc, #512]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80061b2:	430b      	orrs	r3, r1
 80061b4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80061b8:	e003      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ba:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80061be:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80061c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80061ce:	663b      	str	r3, [r7, #96]	; 0x60
 80061d0:	2300      	movs	r3, #0
 80061d2:	667b      	str	r3, [r7, #100]	; 0x64
 80061d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80061d8:	460b      	mov	r3, r1
 80061da:	4313      	orrs	r3, r2
 80061dc:	d046      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80061de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061e6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80061ea:	d028      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061ec:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80061f0:	d821      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80061f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f6:	d022      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80061f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061fc:	d81b      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80061fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006202:	d01c      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006204:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006208:	d815      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800620a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800620e:	d008      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006214:	d80f      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d011      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800621a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621e:	d00e      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006220:	e009      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006226:	3308      	adds	r3, #8
 8006228:	4618      	mov	r0, r3
 800622a:	f002 f915 	bl	8008458 <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006234:	e004      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800623c:	e000      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800623e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006240:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10d      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006248:	4b5a      	ldr	r3, [pc, #360]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800624a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800624e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006252:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800625a:	4a56      	ldr	r2, [pc, #344]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800625c:	430b      	orrs	r3, r1
 800625e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006262:	e003      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006264:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006268:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800626c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006278:	65bb      	str	r3, [r7, #88]	; 0x58
 800627a:	2300      	movs	r3, #0
 800627c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800627e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006282:	460b      	mov	r3, r1
 8006284:	4313      	orrs	r3, r2
 8006286:	d03f      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006290:	2b04      	cmp	r3, #4
 8006292:	d81e      	bhi.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062db 	.word	0x080062db
 80062a0:	080062b1 	.word	0x080062b1
 80062a4:	080062bf 	.word	0x080062bf
 80062a8:	080062db 	.word	0x080062db
 80062ac:	080062db 	.word	0x080062db
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062b0:	4b40      	ldr	r3, [pc, #256]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b4:	4a3f      	ldr	r2, [pc, #252]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ba:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80062bc:	e00e      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062c2:	332c      	adds	r3, #44	; 0x2c
 80062c4:	4618      	mov	r0, r3
 80062c6:	f002 f95f 	bl	8008588 <RCCEx_PLL3_Config>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80062d0:	e004      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80062d8:	e000      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80062da:	bf00      	nop
    }
    if (ret == HAL_OK)
 80062dc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10d      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80062e4:	4b33      	ldr	r3, [pc, #204]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80062ea:	f023 0107 	bic.w	r1, r3, #7
 80062ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	4a2f      	ldr	r2, [pc, #188]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062f8:	430b      	orrs	r3, r1
 80062fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80062fe:	e003      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006300:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006304:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006314:	653b      	str	r3, [r7, #80]	; 0x50
 8006316:	2300      	movs	r3, #0
 8006318:	657b      	str	r3, [r7, #84]	; 0x54
 800631a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800631e:	460b      	mov	r3, r1
 8006320:	4313      	orrs	r3, r2
 8006322:	d04d      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800632c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006330:	d028      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8006332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006336:	d821      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006338:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800633c:	d024      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800633e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006342:	d81b      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006348:	d00e      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800634a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800634e:	d815      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01b      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006358:	d110      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800635a:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006364:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006366:	e012      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800636c:	332c      	adds	r3, #44	; 0x2c
 800636e:	4618      	mov	r0, r3
 8006370:	f002 f90a 	bl	8008588 <RCCEx_PLL3_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800637a:	e008      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006382:	e004      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006384:	bf00      	nop
 8006386:	e002      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006388:	bf00      	nop
 800638a:	e000      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800638c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800638e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006392:	2b00      	cmp	r3, #0
 8006394:	d110      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006396:	4b07      	ldr	r3, [pc, #28]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800639c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80063a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a8:	4a02      	ldr	r2, [pc, #8]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80063aa:	430b      	orrs	r3, r1
 80063ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80063b0:	e006      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80063b2:	bf00      	nop
 80063b4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80063bc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80063cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ce:	2300      	movs	r3, #0
 80063d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80063d6:	460b      	mov	r3, r1
 80063d8:	4313      	orrs	r3, r2
 80063da:	f000 80b5 	beq.w	8006548 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063de:	2300      	movs	r3, #0
 80063e0:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063e4:	4b9d      	ldr	r3, [pc, #628]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ea:	f003 0304 	and.w	r3, r3, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d113      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f2:	4b9a      	ldr	r3, [pc, #616]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063f8:	4a98      	ldr	r2, [pc, #608]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80063fa:	f043 0304 	orr.w	r3, r3, #4
 80063fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006402:	4b96      	ldr	r3, [pc, #600]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006410:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800641a:	4b91      	ldr	r3, [pc, #580]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	4a90      	ldr	r2, [pc, #576]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006426:	f7fb fd07 	bl	8001e38 <HAL_GetTick>
 800642a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800642e:	e00b      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006430:	f7fb fd02 	bl	8001e38 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d903      	bls.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006446:	e005      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006448:	4b85      	ldr	r3, [pc, #532]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0ed      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006454:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006458:	2b00      	cmp	r3, #0
 800645a:	d165      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800645c:	4b7f      	ldr	r3, [pc, #508]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800645e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800646a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800646e:	2b00      	cmp	r3, #0
 8006470:	d023      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x746>
 8006472:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006476:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800647a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800647e:	4293      	cmp	r3, r2
 8006480:	d01b      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006482:	4b76      	ldr	r3, [pc, #472]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006490:	4b72      	ldr	r3, [pc, #456]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006496:	4a71      	ldr	r2, [pc, #452]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800649c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064a0:	4b6e      	ldr	r3, [pc, #440]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064a6:	4a6d      	ldr	r2, [pc, #436]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064b0:	4a6a      	ldr	r2, [pc, #424]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d019      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c6:	f7fb fcb7 	bl	8001e38 <HAL_GetTick>
 80064ca:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ce:	e00d      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d0:	f7fb fcb2 	bl	8001e38 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d903      	bls.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 80064ea:	e006      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ec:	4b5b      	ldr	r3, [pc, #364]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80064ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0ea      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80064fa:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10d      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006502:	4b56      	ldr	r3, [pc, #344]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006508:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800650c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006510:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006514:	4a51      	ldr	r2, [pc, #324]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006516:	430b      	orrs	r3, r1
 8006518:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800651c:	e008      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800651e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006522:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8006526:	e003      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800652c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006530:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8006534:	2b01      	cmp	r3, #1
 8006536:	d107      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006538:	4b48      	ldr	r3, [pc, #288]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800653a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800653e:	4a47      	ldr	r2, [pc, #284]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006540:	f023 0304 	bic.w	r3, r3, #4
 8006544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006554:	643b      	str	r3, [r7, #64]	; 0x40
 8006556:	2300      	movs	r3, #0
 8006558:	647b      	str	r3, [r7, #68]	; 0x44
 800655a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800655e:	460b      	mov	r3, r1
 8006560:	4313      	orrs	r3, r2
 8006562:	d042      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800656c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006570:	d022      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8006572:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006576:	d81b      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800657c:	d011      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800657e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006582:	d815      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d019      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800658c:	d110      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800658e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006592:	3308      	adds	r3, #8
 8006594:	4618      	mov	r0, r3
 8006596:	f001 ff5f 	bl	8008458 <RCCEx_PLL2_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80065a0:	e00d      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a2:	4b2e      	ldr	r3, [pc, #184]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	4a2d      	ldr	r2, [pc, #180]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ac:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80065ae:	e006      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80065b6:	e002      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80065b8:	bf00      	nop
 80065ba:	e000      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80065bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80065be:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10d      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80065c6:	4b25      	ldr	r3, [pc, #148]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065cc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80065d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065d8:	4a20      	ldr	r2, [pc, #128]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065e0:	e003      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80065e6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f8:	2300      	movs	r3, #0
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006600:	460b      	mov	r3, r1
 8006602:	4313      	orrs	r3, r2
 8006604:	d032      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006606:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800660a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800660e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006612:	d00b      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006618:	d804      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800661e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006622:	d007      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800662a:	e004      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800662c:	bf00      	nop
 800662e:	e002      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006630:	bf00      	nop
 8006632:	e000      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006634:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006636:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800663a:	2b00      	cmp	r3, #0
 800663c:	d112      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006640:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006644:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800664c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006650:	4a02      	ldr	r2, [pc, #8]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006652:	430b      	orrs	r3, r1
 8006654:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006658:	e008      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800665a:	bf00      	nop
 800665c:	46020c00 	.word	0x46020c00
 8006660:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006664:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006668:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800666c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006678:	633b      	str	r3, [r7, #48]	; 0x30
 800667a:	2300      	movs	r3, #0
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
 800667e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006682:	460b      	mov	r3, r1
 8006684:	4313      	orrs	r3, r2
 8006686:	d019      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800668c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006694:	d105      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006696:	4b88      	ldr	r3, [pc, #544]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669a:	4a87      	ldr	r2, [pc, #540]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800669c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a0:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80066a2:	4b85      	ldr	r3, [pc, #532]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066a8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80066ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066b4:	4a80      	ldr	r2, [pc, #512]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066b6:	430b      	orrs	r3, r1
 80066b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80066bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ca:	2300      	movs	r3, #0
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d00c      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80066d8:	4b77      	ldr	r3, [pc, #476]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066ea:	4973      	ldr	r1, [pc, #460]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80066f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80066fe:	623b      	str	r3, [r7, #32]
 8006700:	2300      	movs	r3, #0
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
 8006704:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006708:	460b      	mov	r3, r1
 800670a:	4313      	orrs	r3, r2
 800670c:	d00c      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800670e:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800671c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006720:	4965      	ldr	r1, [pc, #404]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800673e:	460b      	mov	r3, r1
 8006740:	4313      	orrs	r3, r2
 8006742:	d00c      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006744:	4b5c      	ldr	r3, [pc, #368]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800674a:	f023 0218 	bic.w	r2, r3, #24
 800674e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006752:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006756:	4958      	ldr	r1, [pc, #352]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800675e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006774:	460b      	mov	r3, r1
 8006776:	4313      	orrs	r3, r2
 8006778:	d032      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800677a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800677e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006786:	d105      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006788:	4b4b      	ldr	r3, [pc, #300]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	4a4a      	ldr	r2, [pc, #296]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800678e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006792:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006798:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800679c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067a0:	d108      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067a6:	3308      	adds	r3, #8
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fe55 	bl	8008458 <RCCEx_PLL2_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 80067b4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10d      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80067bc:	4b3e      	ldr	r3, [pc, #248]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067ce:	493a      	ldr	r1, [pc, #232]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80067d6:	e003      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80067dc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80067e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067f6:	460b      	mov	r3, r1
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d03a      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80067fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006808:	d00e      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800680a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800680e:	d815      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d017      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006818:	d110      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800681a:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	4a26      	ldr	r2, [pc, #152]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006824:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006826:	e00e      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800682c:	3308      	adds	r3, #8
 800682e:	4618      	mov	r0, r3
 8006830:	f001 fe12 	bl	8008458 <RCCEx_PLL2_Config>
 8006834:	4603      	mov	r3, r0
 8006836:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800683a:	e004      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8006842:	e000      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006844:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006846:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10d      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800684e:	4b1a      	ldr	r3, [pc, #104]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006854:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800685c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006860:	4915      	ldr	r1, [pc, #84]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006868:	e003      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800686e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	2300      	movs	r3, #0
 8006882:	607b      	str	r3, [r7, #4]
 8006884:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006888:	460b      	mov	r3, r1
 800688a:	4313      	orrs	r3, r2
 800688c:	d00c      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800688e:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006894:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800689c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068a0:	4905      	ldr	r1, [pc, #20]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80068a8:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	37e0      	adds	r7, #224	; 0xe0
 80068b0:	46bd      	mov	sp, r7
 80068b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b6:	bf00      	nop
 80068b8:	46020c00 	.word	0x46020c00

080068bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80068bc:	b480      	push	{r7}
 80068be:	b089      	sub	sp, #36	; 0x24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80068c4:	4ba6      	ldr	r3, [pc, #664]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80068c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068cc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80068ce:	4ba4      	ldr	r3, [pc, #656]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80068d8:	4ba1      	ldr	r3, [pc, #644]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	0a1b      	lsrs	r3, r3, #8
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	3301      	adds	r3, #1
 80068e4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80068e6:	4b9e      	ldr	r3, [pc, #632]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	091b      	lsrs	r3, r3, #4
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80068f2:	4b9b      	ldr	r3, [pc, #620]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	08db      	lsrs	r3, r3, #3
 80068f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b03      	cmp	r3, #3
 8006912:	d062      	beq.n	80069da <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b03      	cmp	r3, #3
 8006918:	f200 8081 	bhi.w	8006a1e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d024      	beq.n	800696c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b02      	cmp	r3, #2
 8006926:	d17a      	bne.n	8006a1e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006932:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8006b64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693a:	4b89      	ldr	r3, [pc, #548]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800694a:	ed97 6a02 	vldr	s12, [r7, #8]
 800694e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006952:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006956:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800695a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800695e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800696a:	e08f      	b.n	8006a8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800696c:	4b7c      	ldr	r3, [pc, #496]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006978:	4b79      	ldr	r3, [pc, #484]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	0f1b      	lsrs	r3, r3, #28
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	e006      	b.n	8006992 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006984:	4b76      	ldr	r3, [pc, #472]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800698a:	041b      	lsls	r3, r3, #16
 800698c:	0f1b      	lsrs	r3, r3, #28
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	4a76      	ldr	r2, [pc, #472]	; (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	ee07 3a90 	vmov	s15, r3
 80069b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80069bc:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80069c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80069d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069d8:	e058      	b.n	8006a8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e4:	eddf 6a62 	vldr	s13, [pc, #392]	; 8006b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 80069e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ec:	4b5c      	ldr	r3, [pc, #368]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80069ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f4:	ee07 3a90 	vmov	s15, r3
 80069f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80069fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a00:	eddf 5a59 	vldr	s11, [pc, #356]	; 8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a1c:	e036      	b.n	8006a8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006a1e:	4b50      	ldr	r3, [pc, #320]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006a2a:	4b4d      	ldr	r3, [pc, #308]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	0f1b      	lsrs	r3, r3, #28
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	e006      	b.n	8006a44 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006a36:	4b4a      	ldr	r3, [pc, #296]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	0f1b      	lsrs	r3, r3, #28
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	4a49      	ldr	r2, [pc, #292]	; (8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a6e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a8a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006a8c:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d017      	beq.n	8006ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006a98:	4b31      	ldr	r3, [pc, #196]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9c:	0a5b      	lsrs	r3, r3, #9
 8006a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006aaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006abe:	ee17 2a90 	vmov	r2, s15
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e002      	b.n	8006ace <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006ace:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d017      	beq.n	8006b0a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ada:	4b21      	ldr	r3, [pc, #132]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ade:	0c1b      	lsrs	r3, r3, #16
 8006ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae4:	ee07 3a90 	vmov	s15, r3
 8006ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006aec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006af0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b00:	ee17 2a90 	vmov	r2, s15
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	605a      	str	r2, [r3, #4]
 8006b08:	e002      	b.n	8006b10 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006b10:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d017      	beq.n	8006b4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b1c:	4b10      	ldr	r3, [pc, #64]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b20:	0e1b      	lsrs	r3, r3, #24
 8006b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b32:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b42:	ee17 2a90 	vmov	r2, s15
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006b4a:	e002      	b.n	8006b52 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	609a      	str	r2, [r3, #8]
}
 8006b52:	bf00      	nop
 8006b54:	3724      	adds	r7, #36	; 0x24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	46020c00 	.word	0x46020c00
 8006b64:	4b742400 	.word	0x4b742400
 8006b68:	46000000 	.word	0x46000000
 8006b6c:	0800d0ec 	.word	0x0800d0ec
 8006b70:	4bb71b00 	.word	0x4bb71b00

08006b74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b089      	sub	sp, #36	; 0x24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006b7c:	4ba6      	ldr	r3, [pc, #664]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b84:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006b86:	4ba4      	ldr	r3, [pc, #656]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006b90:	4ba1      	ldr	r3, [pc, #644]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	0a1b      	lsrs	r3, r3, #8
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006b9e:	4b9e      	ldr	r3, [pc, #632]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	091b      	lsrs	r3, r3, #4
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006baa:	4b9b      	ldr	r3, [pc, #620]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	08db      	lsrs	r3, r3, #3
 8006bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	fb02 f303 	mul.w	r3, r2, r3
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d062      	beq.n	8006c92 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	f200 8081 	bhi.w	8006cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d024      	beq.n	8006c24 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d17a      	bne.n	8006cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8006e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf2:	4b89      	ldr	r3, [pc, #548]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c06:	eddf 5a86 	vldr	s11, [pc, #536]	; 8006e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c22:	e08f      	b.n	8006d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006c24:	4b7c      	ldr	r3, [pc, #496]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006c30:	4b79      	ldr	r3, [pc, #484]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	0f1b      	lsrs	r3, r3, #28
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	e006      	b.n	8006c4a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006c3c:	4b76      	ldr	r3, [pc, #472]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c42:	041b      	lsls	r3, r3, #16
 8006c44:	0f1b      	lsrs	r3, r3, #28
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	4a76      	ldr	r2, [pc, #472]	; (8006e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	ee07 3a90 	vmov	s15, r3
 8006c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c70:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c74:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8006e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006c78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c90:	e058      	b.n	8006d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9c:	eddf 6a62 	vldr	s13, [pc, #392]	; 8006e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8006ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca4:	4b5c      	ldr	r3, [pc, #368]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cac:	ee07 3a90 	vmov	s15, r3
 8006cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb8:	eddf 5a59 	vldr	s11, [pc, #356]	; 8006e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006cbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cd4:	e036      	b.n	8006d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006cd6:	4b50      	ldr	r3, [pc, #320]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006ce2:	4b4d      	ldr	r3, [pc, #308]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	0f1b      	lsrs	r3, r3, #28
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	e006      	b.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006cee:	4b4a      	ldr	r3, [pc, #296]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cf4:	041b      	lsls	r3, r3, #16
 8006cf6:	0f1b      	lsrs	r3, r3, #28
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	4a49      	ldr	r2, [pc, #292]	; (8006e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	ee07 3a90 	vmov	s15, r3
 8006d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d26:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d42:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006d44:	4b34      	ldr	r3, [pc, #208]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d017      	beq.n	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d50:	4b31      	ldr	r3, [pc, #196]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d54:	0a5b      	lsrs	r3, r3, #9
 8006d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d66:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d76:	ee17 2a90 	vmov	r2, s15
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e002      	b.n	8006d86 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006d86:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d017      	beq.n	8006dc2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d92:	4b21      	ldr	r3, [pc, #132]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d96:	0c1b      	lsrs	r3, r3, #16
 8006d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9c:	ee07 3a90 	vmov	s15, r3
 8006da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006da8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006db8:	ee17 2a90 	vmov	r2, s15
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	605a      	str	r2, [r3, #4]
 8006dc0:	e002      	b.n	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006dc8:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d017      	beq.n	8006e04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006dd4:	4b10      	ldr	r3, [pc, #64]	; (8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd8:	0e1b      	lsrs	r3, r3, #24
 8006dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dfa:	ee17 2a90 	vmov	r2, s15
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e02:	e002      	b.n	8006e0a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	609a      	str	r2, [r3, #8]
}
 8006e0a:	bf00      	nop
 8006e0c:	3724      	adds	r7, #36	; 0x24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	46020c00 	.word	0x46020c00
 8006e1c:	4b742400 	.word	0x4b742400
 8006e20:	46000000 	.word	0x46000000
 8006e24:	0800d0ec 	.word	0x0800d0ec
 8006e28:	4bb71b00 	.word	0x4bb71b00

08006e2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b089      	sub	sp, #36	; 0x24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006e34:	4ba6      	ldr	r3, [pc, #664]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006e3e:	4ba4      	ldr	r3, [pc, #656]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006e48:	4ba1      	ldr	r3, [pc, #644]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	0a1b      	lsrs	r3, r3, #8
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	3301      	adds	r3, #1
 8006e54:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006e56:	4b9e      	ldr	r3, [pc, #632]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	091b      	lsrs	r3, r3, #4
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006e62:	4b9b      	ldr	r3, [pc, #620]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e66:	08db      	lsrs	r3, r3, #3
 8006e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	fb02 f303 	mul.w	r3, r2, r3
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d062      	beq.n	8006f4a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	f200 8081 	bhi.w	8006f8e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d024      	beq.n	8006edc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d17a      	bne.n	8006f8e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eaa:	4b89      	ldr	r3, [pc, #548]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ebe:	eddf 5a86 	vldr	s11, [pc, #536]	; 80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006eda:	e08f      	b.n	8006ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006edc:	4b7c      	ldr	r3, [pc, #496]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006ee8:	4b79      	ldr	r3, [pc, #484]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	0f1b      	lsrs	r3, r3, #28
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	e006      	b.n	8006f02 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006ef4:	4b76      	ldr	r3, [pc, #472]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006efa:	041b      	lsls	r3, r3, #16
 8006efc:	0f1b      	lsrs	r3, r3, #28
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	4a76      	ldr	r2, [pc, #472]	; (80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f08:	ee07 3a90 	vmov	s15, r3
 8006f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f28:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f2c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f48:	e058      	b.n	8006ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	ee07 3a90 	vmov	s15, r3
 8006f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f54:	eddf 6a62 	vldr	s13, [pc, #392]	; 80070e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8006f58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5c:	4b5c      	ldr	r3, [pc, #368]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f64:	ee07 3a90 	vmov	s15, r3
 8006f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f70:	eddf 5a59 	vldr	s11, [pc, #356]	; 80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006f74:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f8c:	e036      	b.n	8006ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006f8e:	4b50      	ldr	r3, [pc, #320]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006f9a:	4b4d      	ldr	r3, [pc, #308]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	0f1b      	lsrs	r3, r3, #28
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	e006      	b.n	8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006fa6:	4b4a      	ldr	r3, [pc, #296]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fac:	041b      	lsls	r3, r3, #16
 8006fae:	0f1b      	lsrs	r3, r3, #28
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	4a49      	ldr	r2, [pc, #292]	; (80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	ee07 3a90 	vmov	s15, r3
 8006fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fde:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ffa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006ffc:	4b34      	ldr	r3, [pc, #208]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d017      	beq.n	8007038 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007008:	4b31      	ldr	r3, [pc, #196]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800700a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700c:	0a5b      	lsrs	r3, r3, #9
 800700e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800701a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800701e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007022:	edd7 6a07 	vldr	s13, [r7, #28]
 8007026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800702a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800702e:	ee17 2a90 	vmov	r2, s15
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	e002      	b.n	800703e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800703e:	4b24      	ldr	r3, [pc, #144]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d017      	beq.n	800707a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800704a:	4b21      	ldr	r3, [pc, #132]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800704c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704e:	0c1b      	lsrs	r3, r3, #16
 8007050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007054:	ee07 3a90 	vmov	s15, r3
 8007058:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800705c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007060:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007064:	edd7 6a07 	vldr	s13, [r7, #28]
 8007068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800706c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007070:	ee17 2a90 	vmov	r2, s15
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	605a      	str	r2, [r3, #4]
 8007078:	e002      	b.n	8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007080:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d017      	beq.n	80070bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800708c:	4b10      	ldr	r3, [pc, #64]	; (80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800708e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007090:	0e1b      	lsrs	r3, r3, #24
 8007092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800709e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b2:	ee17 2a90 	vmov	r2, s15
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070ba:	e002      	b.n	80070c2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	609a      	str	r2, [r3, #8]
}
 80070c2:	bf00      	nop
 80070c4:	3724      	adds	r7, #36	; 0x24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	46020c00 	.word	0x46020c00
 80070d4:	4b742400 	.word	0x4b742400
 80070d8:	46000000 	.word	0x46000000
 80070dc:	0800d0ec 	.word	0x0800d0ec
 80070e0:	4bb71b00 	.word	0x4bb71b00

080070e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08e      	sub	sp, #56	; 0x38
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80070ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80070f6:	430b      	orrs	r3, r1
 80070f8:	d145      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80070fa:	4baa      	ldr	r3, [pc, #680]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80070fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007104:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007106:	4ba7      	ldr	r3, [pc, #668]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b02      	cmp	r3, #2
 8007112:	d108      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800711a:	d104      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800711c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007120:	637b      	str	r3, [r7, #52]	; 0x34
 8007122:	f001 b98b 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007126:	4b9f      	ldr	r3, [pc, #636]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800712c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007134:	d114      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800713c:	d110      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800713e:	4b99      	ldr	r3, [pc, #612]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800714c:	d103      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800714e:	23fa      	movs	r3, #250	; 0xfa
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007152:	f001 b973 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 8007156:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800715a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800715c:	f001 b96e 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007160:	4b90      	ldr	r3, [pc, #576]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800716c:	d107      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007174:	d103      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007176:	4b8c      	ldr	r3, [pc, #560]	; (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007178:	637b      	str	r3, [r7, #52]	; 0x34
 800717a:	f001 b95f 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
 8007182:	f001 b95b 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800718a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800718e:	430b      	orrs	r3, r1
 8007190:	d151      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007192:	4b84      	ldr	r3, [pc, #528]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007198:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800719c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	2b80      	cmp	r3, #128	; 0x80
 80071a2:	d035      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	2b80      	cmp	r3, #128	; 0x80
 80071a8:	d841      	bhi.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	2b60      	cmp	r3, #96	; 0x60
 80071ae:	d02a      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	2b60      	cmp	r3, #96	; 0x60
 80071b4:	d83b      	bhi.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	2b40      	cmp	r3, #64	; 0x40
 80071ba:	d009      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d835      	bhi.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00c      	beq.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d012      	beq.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80071ce:	e02e      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff fb71 	bl	80068bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071de:	f001 b92d 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e2:	f107 0318 	add.w	r3, r7, #24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fcc4 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071f0:	f001 b924 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071f4:	f107 030c 	add.w	r3, r7, #12
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff fe17 	bl	8006e2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007202:	f001 b91b 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007206:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800720a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800720c:	f001 b916 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007210:	4b64      	ldr	r3, [pc, #400]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800721c:	d103      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800721e:	4b63      	ldr	r3, [pc, #396]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007220:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007222:	f001 b90b 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800722a:	f001 b907 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default :
      {
        frequency = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007232:	f001 b903 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800723a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800723e:	430b      	orrs	r3, r1
 8007240:	d158      	bne.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007242:	4b58      	ldr	r3, [pc, #352]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007244:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800724c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007254:	d03b      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800725c:	d846      	bhi.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007264:	d02e      	beq.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800726c:	d83e      	bhi.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007274:	d00b      	beq.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800727c:	d836      	bhi.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00d      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728a:	d012      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800728c:	e02e      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800728e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff fb12 	bl	80068bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800729c:	f001 b8ce 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a0:	f107 0318 	add.w	r3, r7, #24
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff fc65 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072ae:	f001 b8c5 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072b2:	f107 030c 	add.w	r3, r7, #12
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff fdb8 	bl	8006e2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072c0:	f001 b8bc 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80072c4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072ca:	f001 b8b7 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072ce:	4b35      	ldr	r3, [pc, #212]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072da:	d103      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80072dc:	4b33      	ldr	r3, [pc, #204]	; (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80072de:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072e0:	f001 b8ac 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072e8:	f001 b8a8 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default :

        frequency = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072f0:	f001 b8a4 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80072f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f8:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80072fc:	430b      	orrs	r3, r1
 80072fe:	d16e      	bne.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007300:	4b28      	ldr	r3, [pc, #160]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007306:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800730a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007312:	d034      	beq.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800731a:	d85c      	bhi.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007322:	d00b      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800732a:	d854      	bhi.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	2b00      	cmp	r3, #0
 8007330:	d016      	beq.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007338:	d009      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800733a:	e04c      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800733c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff fabb 	bl	80068bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800734a:	f001 b877 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800734e:	f107 0318 	add.w	r3, r7, #24
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fc0e 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800735c:	f001 b86e 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007360:	4b10      	ldr	r3, [pc, #64]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736c:	d103      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800736e:	4b10      	ldr	r3, [pc, #64]	; (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007372:	f001 b863 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800737a:	f001 b85f 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b20      	cmp	r3, #32
 8007388:	d121      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800738a:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00e      	beq.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007396:	4b03      	ldr	r3, [pc, #12]	; (80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	0e1b      	lsrs	r3, r3, #24
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	e00f      	b.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80073a2:	bf00      	nop
 80073a4:	46020c00 	.word	0x46020c00
 80073a8:	000b71b0 	.word	0x000b71b0
 80073ac:	00f42400 	.word	0x00f42400
 80073b0:	02dc6c00 	.word	0x02dc6c00
 80073b4:	4ba7      	ldr	r3, [pc, #668]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80073b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	0e1b      	lsrs	r3, r3, #24
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	4aa5      	ldr	r2, [pc, #660]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80073c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073ca:	f001 b837 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073d2:	f001 b833 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default :

        frequency = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073da:	f001 b82f 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80073de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e2:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80073e6:	430b      	orrs	r3, r1
 80073e8:	d17f      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80073ea:	4b9a      	ldr	r3, [pc, #616]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80073ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80073f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073f4:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d165      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80073fc:	4b95      	ldr	r3, [pc, #596]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80073fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007402:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007406:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800740e:	d034      	beq.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007416:	d853      	bhi.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800741e:	d00b      	beq.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007426:	d84b      	bhi.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	2b00      	cmp	r3, #0
 800742c:	d016      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007434:	d009      	beq.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007436:	e043      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff fa3d 	bl	80068bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007446:	f000 bff9 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800744a:	f107 0318 	add.w	r3, r7, #24
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fb90 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007458:	f000 bff0 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800745c:	4b7d      	ldr	r3, [pc, #500]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007468:	d103      	bne.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800746a:	4b7c      	ldr	r3, [pc, #496]	; (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800746e:	f000 bfe5 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
            frequency = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007476:	f000 bfe1 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800747a:	4b76      	ldr	r3, [pc, #472]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b20      	cmp	r3, #32
 8007484:	d118      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007486:	4b73      	ldr	r3, [pc, #460]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007492:	4b70      	ldr	r3, [pc, #448]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	0e1b      	lsrs	r3, r3, #24
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	e006      	b.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800749e:	4b6d      	ldr	r3, [pc, #436]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80074a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074a4:	041b      	lsls	r3, r3, #16
 80074a6:	0e1b      	lsrs	r3, r3, #24
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	4a6a      	ldr	r2, [pc, #424]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80074ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80074b4:	f000 bfc2 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
            frequency = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80074bc:	f000 bfbe 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
        default :
        {
          frequency = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80074c4:	f000 bfba 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074ce:	d108      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff f9f1 	bl	80068bc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	637b      	str	r3, [r7, #52]	; 0x34
 80074de:	f000 bfad 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else
    {
      frequency = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
 80074e6:	f000 bfa9 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80074ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ee:	1e51      	subs	r1, r2, #1
 80074f0:	430b      	orrs	r3, r1
 80074f2:	d136      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80074f4:	4b57      	ldr	r3, [pc, #348]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80074f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	2b00      	cmp	r3, #0
 8007504:	d104      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007506:	f7fe fb4f 	bl	8005ba8 <HAL_RCC_GetPCLK2Freq>
 800750a:	6378      	str	r0, [r7, #52]	; 0x34
 800750c:	f000 bf96 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	2b01      	cmp	r3, #1
 8007514:	d104      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007516:	f7fe fa13 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 800751a:	6378      	str	r0, [r7, #52]	; 0x34
 800751c:	f000 bf8e 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007520:	4b4c      	ldr	r3, [pc, #304]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752c:	d106      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	2b02      	cmp	r3, #2
 8007532:	d103      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8007534:	4b4a      	ldr	r3, [pc, #296]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007536:	637b      	str	r3, [r7, #52]	; 0x34
 8007538:	f000 bf80 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800753c:	4b45      	ldr	r3, [pc, #276]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800753e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b02      	cmp	r3, #2
 8007548:	d107      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2b03      	cmp	r3, #3
 800754e:	d104      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8007550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
 8007556:	f000 bf71 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
 800755e:	f000 bf6d 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007566:	1e91      	subs	r1, r2, #2
 8007568:	430b      	orrs	r3, r1
 800756a:	d136      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800756c:	4b39      	ldr	r3, [pc, #228]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800756e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007572:	f003 030c 	and.w	r3, r3, #12
 8007576:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800757e:	f7fe faff 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8007582:	6378      	str	r0, [r7, #52]	; 0x34
 8007584:	f000 bf5a 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	2b04      	cmp	r3, #4
 800758c:	d104      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800758e:	f7fe f9d7 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8007592:	6378      	str	r0, [r7, #52]	; 0x34
 8007594:	f000 bf52 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007598:	4b2e      	ldr	r3, [pc, #184]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075a4:	d106      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d103      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80075ac:	4b2c      	ldr	r3, [pc, #176]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80075ae:	637b      	str	r3, [r7, #52]	; 0x34
 80075b0:	f000 bf44 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80075b4:	4b27      	ldr	r3, [pc, #156]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80075b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d107      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	2b0c      	cmp	r3, #12
 80075c6:	d104      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80075c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
 80075ce:	f000 bf35 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	637b      	str	r3, [r7, #52]	; 0x34
 80075d6:	f000 bf31 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80075da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075de:	1f11      	subs	r1, r2, #4
 80075e0:	430b      	orrs	r3, r1
 80075e2:	d13f      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80075e4:	4b1b      	ldr	r3, [pc, #108]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80075e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075f6:	f7fe fac3 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 80075fa:	6378      	str	r0, [r7, #52]	; 0x34
 80075fc:	f000 bf1e 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	2b10      	cmp	r3, #16
 8007604:	d104      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007606:	f7fe f99b 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 800760a:	6378      	str	r0, [r7, #52]	; 0x34
 800760c:	f000 bf16 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007610:	4b10      	ldr	r3, [pc, #64]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761c:	d106      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	2b20      	cmp	r3, #32
 8007622:	d103      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8007624:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007626:	637b      	str	r3, [r7, #52]	; 0x34
 8007628:	f000 bf08 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800762c:	4b09      	ldr	r3, [pc, #36]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800762e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b02      	cmp	r3, #2
 8007638:	d107      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	2b30      	cmp	r3, #48	; 0x30
 800763e:	d104      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8007640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007644:	637b      	str	r3, [r7, #52]	; 0x34
 8007646:	f000 bef9 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
 800764e:	f000 bef5 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 8007652:	bf00      	nop
 8007654:	46020c00 	.word	0x46020c00
 8007658:	0800d0ec 	.word	0x0800d0ec
 800765c:	02dc6c00 	.word	0x02dc6c00
 8007660:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007668:	f1a2 0108 	sub.w	r1, r2, #8
 800766c:	430b      	orrs	r3, r1
 800766e:	d136      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007670:	4ba4      	ldr	r3, [pc, #656]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007676:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800767a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007682:	f7fe fa7d 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8007686:	6378      	str	r0, [r7, #52]	; 0x34
 8007688:	f000 bed8 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d104      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007692:	f7fe f955 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8007696:	6378      	str	r0, [r7, #52]	; 0x34
 8007698:	f000 bed0 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800769c:	4b99      	ldr	r3, [pc, #612]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a8:	d106      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	2b80      	cmp	r3, #128	; 0x80
 80076ae:	d103      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 80076b0:	4b95      	ldr	r3, [pc, #596]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80076b2:	637b      	str	r3, [r7, #52]	; 0x34
 80076b4:	f000 bec2 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80076b8:	4b92      	ldr	r3, [pc, #584]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80076ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d107      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2bc0      	cmp	r3, #192	; 0xc0
 80076ca:	d104      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 80076cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
 80076d2:	f000 beb3 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
 80076da:	f000 beaf 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80076de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e2:	f1a2 0110 	sub.w	r1, r2, #16
 80076e6:	430b      	orrs	r3, r1
 80076e8:	d139      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80076ea:	4b86      	ldr	r3, [pc, #536]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80076ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d104      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80076fc:	f7fe fa40 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8007700:	6378      	str	r0, [r7, #52]	; 0x34
 8007702:	f000 be9b 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	d104      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800770e:	f7fe f917 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8007712:	6378      	str	r0, [r7, #52]	; 0x34
 8007714:	f000 be92 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007718:	4b7a      	ldr	r3, [pc, #488]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007724:	d107      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800772c:	d103      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800772e:	4b76      	ldr	r3, [pc, #472]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007730:	637b      	str	r3, [r7, #52]	; 0x34
 8007732:	f000 be83 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007736:	4b73      	ldr	r3, [pc, #460]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b02      	cmp	r3, #2
 8007742:	d108      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800774a:	d104      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 800774c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
 8007752:	f000 be73 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
 800775a:	f000 be6f 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800775e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007762:	f1a2 0120 	sub.w	r1, r2, #32
 8007766:	430b      	orrs	r3, r1
 8007768:	d158      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800776a:	4b66      	ldr	r3, [pc, #408]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800776c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800777c:	f7fe fa28 	bl	8005bd0 <HAL_RCC_GetPCLK3Freq>
 8007780:	6378      	str	r0, [r7, #52]	; 0x34
 8007782:	f000 be5b 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	2b01      	cmp	r3, #1
 800778a:	d104      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800778c:	f7fe f8d8 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8007790:	6378      	str	r0, [r7, #52]	; 0x34
 8007792:	f000 be53 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007796:	4b5b      	ldr	r3, [pc, #364]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800779e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a2:	d106      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80077a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d103      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80077aa:	4b57      	ldr	r3, [pc, #348]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34
 80077ae:	f000 be45 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80077b2:	4b54      	ldr	r3, [pc, #336]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80077b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d107      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d104      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80077c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ca:	637b      	str	r3, [r7, #52]	; 0x34
 80077cc:	f000 be36 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80077d0:	4b4c      	ldr	r3, [pc, #304]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d11b      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d118      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077e2:	4b48      	ldr	r3, [pc, #288]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d005      	beq.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80077ee:	4b45      	ldr	r3, [pc, #276]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	0e1b      	lsrs	r3, r3, #24
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	e006      	b.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80077fa:	4b42      	ldr	r3, [pc, #264]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80077fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007800:	041b      	lsls	r3, r3, #16
 8007802:	0e1b      	lsrs	r3, r3, #24
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	4a40      	ldr	r2, [pc, #256]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800780a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
 8007810:	f000 be14 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	637b      	str	r3, [r7, #52]	; 0x34
 8007818:	f000 be10 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800781c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007820:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007824:	430b      	orrs	r3, r1
 8007826:	d175      	bne.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007828:	4b36      	ldr	r3, [pc, #216]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800782a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800782e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007832:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800783a:	d104      	bne.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800783c:	f7fe f880 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8007840:	6378      	str	r0, [r7, #52]	; 0x34
 8007842:	f000 bdfb 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800784c:	d108      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800784e:	f107 0318 	add.w	r3, r7, #24
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff f98e 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	637b      	str	r3, [r7, #52]	; 0x34
 800785c:	f000 bdee 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	2b00      	cmp	r3, #0
 8007864:	d104      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007866:	f7fe f971 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 800786a:	6378      	str	r0, [r7, #52]	; 0x34
 800786c:	f000 bde6 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007876:	d122      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007878:	4b22      	ldr	r3, [pc, #136]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b20      	cmp	r3, #32
 8007882:	d118      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007884:	4b1f      	ldr	r3, [pc, #124]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d005      	beq.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007890:	4b1c      	ldr	r3, [pc, #112]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	0e1b      	lsrs	r3, r3, #24
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	e006      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800789c:	4b19      	ldr	r3, [pc, #100]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800789e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078a2:	041b      	lsls	r3, r3, #16
 80078a4:	0e1b      	lsrs	r3, r3, #24
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	4a18      	ldr	r2, [pc, #96]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80078ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
 80078b2:	f000 bdc3 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34
 80078ba:	f000 bdbf 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ca:	d107      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078d2:	d103      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 80078d4:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>)
 80078d6:	637b      	str	r3, [r7, #52]	; 0x34
 80078d8:	f000 bdb0 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e8:	d107      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f0:	d103      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
 80078f6:	f000 bda1 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34
 80078fe:	f000 bd9d 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 8007902:	bf00      	nop
 8007904:	46020c00 	.word	0x46020c00
 8007908:	00f42400 	.word	0x00f42400
 800790c:	0800d0ec 	.word	0x0800d0ec
 8007910:	016e3600 	.word	0x016e3600
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007918:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800791c:	430b      	orrs	r3, r1
 800791e:	d158      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007920:	4bad      	ldr	r3, [pc, #692]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007922:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	2b04      	cmp	r3, #4
 8007930:	d84b      	bhi.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007971 	.word	0x08007971
 800793c:	0800794d 	.word	0x0800794d
 8007940:	0800795f 	.word	0x0800795f
 8007944:	0800797b 	.word	0x0800797b
 8007948:	08007985 	.word	0x08007985
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800794c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe ffb3 	bl	80068bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800795a:	f000 bd6f 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800795e:	f107 030c 	add.w	r3, r7, #12
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fa62 	bl	8006e2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800796c:	f000 bd66 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007970:	f7fe f8ec 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8007974:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007976:	f000 bd61 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800797a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007980:	f000 bd5c 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007984:	4b94      	ldr	r3, [pc, #592]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b20      	cmp	r3, #32
 800798e:	d118      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007990:	4b91      	ldr	r3, [pc, #580]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 800799c:	4b8e      	ldr	r3, [pc, #568]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	0e1b      	lsrs	r3, r3, #24
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	e006      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80079a8:	4b8b      	ldr	r3, [pc, #556]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80079aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079ae:	041b      	lsls	r3, r3, #16
 80079b0:	0e1b      	lsrs	r3, r3, #24
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	4a89      	ldr	r2, [pc, #548]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079be:	f000 bd3d 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079c6:	f000 bd39 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079ce:	f000 bd35 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80079d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d6:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80079da:	430b      	orrs	r3, r1
 80079dc:	d167      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80079de:	4b7e      	ldr	r3, [pc, #504]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80079e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079e4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80079e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079f0:	d036      	beq.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079f8:	d855      	bhi.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a00:	d029      	beq.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a08:	d84d      	bhi.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a10:	d013      	beq.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a18:	d845      	bhi.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d015      	beq.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a26:	d13e      	bne.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe ff45 	bl	80068bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a36:	f000 bd01 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a3a:	f107 030c 	add.w	r3, r7, #12
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff f9f4 	bl	8006e2c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a48:	f000 bcf8 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007a4c:	f7fe f87e 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8007a50:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a52:	f000 bcf3 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007a56:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a5c:	f000 bcee 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a60:	4b5d      	ldr	r3, [pc, #372]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d118      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a6c:	4b5a      	ldr	r3, [pc, #360]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
 8007a78:	4b57      	ldr	r3, [pc, #348]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	0e1b      	lsrs	r3, r3, #24
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	e006      	b.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 8007a84:	4b54      	ldr	r3, [pc, #336]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a8a:	041b      	lsls	r3, r3, #16
 8007a8c:	0e1b      	lsrs	r3, r3, #24
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	4a52      	ldr	r2, [pc, #328]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a98:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a9a:	f000 bccf 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aa2:	f000 bccb 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aaa:	f000 bcc7 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	d14c      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007aba:	4b47      	ldr	r3, [pc, #284]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007acc:	f7fe f858 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8007ad0:	6378      	str	r0, [r7, #52]	; 0x34
 8007ad2:	f000 bcb3 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007adc:	d104      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ade:	f7fd ff2f 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8007ae2:	6378      	str	r0, [r7, #52]	; 0x34
 8007ae4:	f000 bcaa 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007ae8:	4b3b      	ldr	r3, [pc, #236]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af4:	d107      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007afc:	d103      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
    {
      frequency = HSI_VALUE;
 8007afe:	4b38      	ldr	r3, [pc, #224]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007b00:	637b      	str	r3, [r7, #52]	; 0x34
 8007b02:	f000 bc9b 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007b06:	4b34      	ldr	r3, [pc, #208]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d11c      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b18:	d118      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b1a:	4b2f      	ldr	r3, [pc, #188]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d005      	beq.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8007b26:	4b2c      	ldr	r3, [pc, #176]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	0e1b      	lsrs	r3, r3, #24
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	e006      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
 8007b32:	4b29      	ldr	r3, [pc, #164]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b38:	041b      	lsls	r3, r3, #16
 8007b3a:	0e1b      	lsrs	r3, r3, #24
 8007b3c:	f003 030f 	and.w	r3, r3, #15
 8007b40:	4a26      	ldr	r2, [pc, #152]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
 8007b48:	f000 bc78 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b50:	f000 bc74 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b58:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	d152      	bne.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007b60:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b6a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b72:	f7fe f805 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8007b76:	6378      	str	r0, [r7, #52]	; 0x34
 8007b78:	f000 bc60 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b82:	d104      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b84:	f7fd fedc 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8007b88:	6378      	str	r0, [r7, #52]	; 0x34
 8007b8a:	f000 bc57 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007b8e:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9a:	d107      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba2:	d103      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
    {
      frequency = HSI_VALUE;
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba8:	f000 bc48 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d122      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0xb1a>
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bbe:	d11e      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0xb1a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8007bcc:	4b02      	ldr	r3, [pc, #8]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	0e1b      	lsrs	r3, r3, #24
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	e00c      	b.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
 8007bd8:	46020c00 	.word	0x46020c00
 8007bdc:	0800d0ec 	.word	0x0800d0ec
 8007be0:	00f42400 	.word	0x00f42400
 8007be4:	4ba1      	ldr	r3, [pc, #644]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bea:	041b      	lsls	r3, r3, #16
 8007bec:	0e1b      	lsrs	r3, r3, #24
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	4a9f      	ldr	r2, [pc, #636]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfa:	f000 bc1f 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
 8007c02:	f000 bc1b 	b.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c0a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	d151      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007c12:	4b96      	ldr	r3, [pc, #600]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	2bc0      	cmp	r3, #192	; 0xc0
 8007c22:	d024      	beq.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	2bc0      	cmp	r3, #192	; 0xc0
 8007c28:	d842      	bhi.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	2b80      	cmp	r3, #128	; 0x80
 8007c2e:	d00d      	beq.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	2b80      	cmp	r3, #128	; 0x80
 8007c34:	d83c      	bhi.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	2b40      	cmp	r3, #64	; 0x40
 8007c40:	d011      	beq.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
 8007c42:	e035      	b.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007c44:	f7fd ffc4 	bl	8005bd0 <HAL_RCC_GetPCLK3Freq>
 8007c48:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c4a:	e3f7      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c4c:	4b87      	ldr	r3, [pc, #540]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c58:	d102      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
        {
          frequency = HSI_VALUE;
 8007c5a:	4b86      	ldr	r3, [pc, #536]	; (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c5e:	e3ed      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c64:	e3ea      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007c66:	f7fd fe6b 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8007c6a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c6c:	e3e6      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c6e:	4b7f      	ldr	r3, [pc, #508]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d117      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c7a:	4b7c      	ldr	r3, [pc, #496]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d005      	beq.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
 8007c86:	4b79      	ldr	r3, [pc, #484]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	0e1b      	lsrs	r3, r3, #24
 8007c8c:	f003 030f 	and.w	r3, r3, #15
 8007c90:	e006      	b.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8007c92:	4b76      	ldr	r3, [pc, #472]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c98:	041b      	lsls	r3, r3, #16
 8007c9a:	0e1b      	lsrs	r3, r3, #24
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	4a73      	ldr	r2, [pc, #460]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ca6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ca8:	e3c8      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cae:	e3c5      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      default:
      {
        frequency = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cb4:	e3c2      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cba:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007cbe:	430b      	orrs	r3, r1
 8007cc0:	d147      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007cc2:	4b6a      	ldr	r3, [pc, #424]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ccc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d103      	bne.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cd4:	f7fd ff54 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8007cd8:	6378      	str	r0, [r7, #52]	; 0x34
 8007cda:	e3af      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce2:	d103      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ce4:	f7fd fe2c 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8007ce8:	6378      	str	r0, [r7, #52]	; 0x34
 8007cea:	e3a7      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007cec:	4b5f      	ldr	r3, [pc, #380]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf8:	d106      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d00:	d102      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>
    {
      frequency = HSI_VALUE;
 8007d02:	4b5c      	ldr	r3, [pc, #368]	; (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007d04:	637b      	str	r3, [r7, #52]	; 0x34
 8007d06:	e399      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007d08:	4b58      	ldr	r3, [pc, #352]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0320 	and.w	r3, r3, #32
 8007d10:	2b20      	cmp	r3, #32
 8007d12:	d11b      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d1a:	d117      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d1c:	4b53      	ldr	r3, [pc, #332]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0xc50>
 8007d28:	4b50      	ldr	r3, [pc, #320]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	0e1b      	lsrs	r3, r3, #24
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	e006      	b.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 8007d34:	4b4d      	ldr	r3, [pc, #308]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	0e1b      	lsrs	r3, r3, #24
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	4a4b      	ldr	r2, [pc, #300]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d48:	637b      	str	r3, [r7, #52]	; 0x34
 8007d4a:	e377      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d50:	e374      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d56:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007d5a:	430b      	orrs	r3, r1
 8007d5c:	d164      	bne.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007d5e:	4b43      	ldr	r3, [pc, #268]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d68:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d120      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d70:	4b3e      	ldr	r3, [pc, #248]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0320 	and.w	r3, r3, #32
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	d117      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0xcc8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d7c:	4b3b      	ldr	r3, [pc, #236]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8007d88:	4b38      	ldr	r3, [pc, #224]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	0e1b      	lsrs	r3, r3, #24
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	e006      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8007d94:	4b35      	ldr	r3, [pc, #212]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d9a:	041b      	lsls	r3, r3, #16
 8007d9c:	0e1b      	lsrs	r3, r3, #24
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	4a33      	ldr	r2, [pc, #204]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
 8007daa:	e347      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
 8007db0:	e344      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007db2:	4b2e      	ldr	r3, [pc, #184]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dc0:	d112      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc8:	d10e      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dca:	4b28      	ldr	r3, [pc, #160]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dd8:	d102      	bne.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
      {
        frequency = LSI_VALUE / 128U;
 8007dda:	23fa      	movs	r3, #250	; 0xfa
 8007ddc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dde:	e32d      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 8007de0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007de4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007de6:	e329      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007de8:	4b20      	ldr	r3, [pc, #128]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df4:	d106      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfc:	d102      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
    {
      frequency = HSI_VALUE;
 8007dfe:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007e00:	637b      	str	r3, [r7, #52]	; 0x34
 8007e02:	e31b      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007e04:	4b19      	ldr	r3, [pc, #100]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d107      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e18:	d103      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
    {
      frequency = LSE_VALUE;
 8007e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e20:	e30c      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
 8007e26:	e309      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007e30:	430b      	orrs	r3, r1
 8007e32:	d16b      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007e34:	4b0d      	ldr	r3, [pc, #52]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e3e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d127      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e46:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d11e      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e52:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00c      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007e5e:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	0e1b      	lsrs	r3, r3, #24
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	e00d      	b.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0xda2>
 8007e6a:	bf00      	nop
 8007e6c:	46020c00 	.word	0x46020c00
 8007e70:	0800d0ec 	.word	0x0800d0ec
 8007e74:	00f42400 	.word	0x00f42400
 8007e78:	4b94      	ldr	r3, [pc, #592]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007e7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e7e:	041b      	lsls	r3, r3, #16
 8007e80:	0e1b      	lsrs	r3, r3, #24
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	4a92      	ldr	r2, [pc, #584]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8e:	e2d5      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
 8007e94:	e2d2      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007e96:	4b8d      	ldr	r3, [pc, #564]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea4:	d112      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eac:	d10e      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007eae:	4b87      	ldr	r3, [pc, #540]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ebc:	d102      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xde0>
      {
        frequency = LSI_VALUE / 128U;
 8007ebe:	23fa      	movs	r3, #250	; 0xfa
 8007ec0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ec2:	e2bb      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 8007ec4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007eca:	e2b7      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007ecc:	4b7f      	ldr	r3, [pc, #508]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed8:	d106      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee0:	d102      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>
    {
      frequency = HSI_VALUE;
 8007ee2:	4b7c      	ldr	r3, [pc, #496]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee6:	e2a9      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007ee8:	4b78      	ldr	r3, [pc, #480]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d107      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007efc:	d103      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    {
      frequency = LSE_VALUE;
 8007efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f02:	637b      	str	r3, [r7, #52]	; 0x34
 8007f04:	e29a      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0a:	e297      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f10:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007f14:	430b      	orrs	r3, r1
 8007f16:	d147      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xec4>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007f18:	4b6c      	ldr	r3, [pc, #432]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f1e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d103      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f2a:	f7fd fe29 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8007f2e:	6378      	str	r0, [r7, #52]	; 0x34
 8007f30:	e284      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007f32:	4b66      	ldr	r3, [pc, #408]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f40:	d112      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f48:	d10e      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f4a:	4b60      	ldr	r3, [pc, #384]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f58:	d102      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
      {
        frequency = LSI_VALUE / 128U;
 8007f5a:	23fa      	movs	r3, #250	; 0xfa
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f5e:	e26d      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 8007f60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f64:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f66:	e269      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007f68:	4b58      	ldr	r3, [pc, #352]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f74:	d106      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f7c:	d102      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
    {
      frequency = HSI_VALUE;
 8007f7e:	4b55      	ldr	r3, [pc, #340]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007f80:	637b      	str	r3, [r7, #52]	; 0x34
 8007f82:	e25b      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007f84:	4b51      	ldr	r3, [pc, #324]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d107      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007f98:	d103      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
    {
      frequency = LSE_VALUE;
 8007f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa0:	e24c      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa6:	e249      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fac:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	d12d      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007fb4:	4b45      	ldr	r3, [pc, #276]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fba:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007fc0:	4b42      	ldr	r3, [pc, #264]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fcc:	d105      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
    {
      frequency = HSE_VALUE;
 8007fd4:	4b40      	ldr	r3, [pc, #256]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd8:	e230      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fe0:	d107      	bne.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe fc68 	bl	80068bc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff0:	e224      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff8:	d107      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0xf26>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffa:	f107 0318 	add.w	r3, r7, #24
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fdb8 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
 8008008:	e218      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
 800800e:	e215      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008014:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008018:	430b      	orrs	r3, r1
 800801a:	d15f      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800801c:	4b2b      	ldr	r3, [pc, #172]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800801e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008022:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008026:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800802e:	d028      	beq.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008036:	d845      	bhi.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800803e:	d013      	beq.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008046:	d83d      	bhi.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xf74>
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008054:	d004      	beq.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8008056:	e035      	b.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe0>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008058:	f7fd fda6 	bl	8005ba8 <HAL_RCC_GetPCLK2Freq>
 800805c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800805e:	e1ed      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008060:	f7fd fc6e 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8008064:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008066:	e1e9      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008068:	4b18      	ldr	r3, [pc, #96]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008074:	d102      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0xf98>
        {
          frequency = HSI_VALUE;
 8008076:	4b17      	ldr	r3, [pc, #92]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800807a:	e1df      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008080:	e1dc      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0320 	and.w	r3, r3, #32
 800808a:	2b20      	cmp	r3, #32
 800808c:	d117      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800808e:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800809a:	4b0c      	ldr	r3, [pc, #48]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	0e1b      	lsrs	r3, r3, #24
 80080a0:	f003 030f 	and.w	r3, r3, #15
 80080a4:	e006      	b.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80080a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080ac:	041b      	lsls	r3, r3, #16
 80080ae:	0e1b      	lsrs	r3, r3, #24
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	4a06      	ldr	r2, [pc, #24]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080bc:	e1be      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080c2:	e1bb      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080c8:	e1b8      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 80080ca:	bf00      	nop
 80080cc:	46020c00 	.word	0x46020c00
 80080d0:	0800d0ec 	.word	0x0800d0ec
 80080d4:	00f42400 	.word	0x00f42400
 80080d8:	016e3600 	.word	0x016e3600
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80080dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80080e4:	430b      	orrs	r3, r1
 80080e6:	d156      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80080e8:	4ba5      	ldr	r3, [pc, #660]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80080ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080f2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080fa:	d028      	beq.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x106a>
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008102:	d845      	bhi.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800810a:	d013      	beq.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x1050>
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008112:	d83d      	bhi.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	2b00      	cmp	r3, #0
 8008118:	d004      	beq.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008120:	d004      	beq.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8008122:	e035      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008124:	f7fd fd2c 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8008128:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800812a:	e187      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800812c:	f7fd fc08 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8008130:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008132:	e183      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008134:	4b92      	ldr	r3, [pc, #584]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800813c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008140:	d102      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>
        {
          frequency = HSI_VALUE;
 8008142:	4b90      	ldr	r3, [pc, #576]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>)
 8008144:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008146:	e179      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800814c:	e176      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800814e:	4b8c      	ldr	r3, [pc, #560]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b20      	cmp	r3, #32
 8008158:	d117      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800815a:	4b89      	ldr	r3, [pc, #548]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d005      	beq.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x108e>
 8008166:	4b86      	ldr	r3, [pc, #536]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	0e1b      	lsrs	r3, r3, #24
 800816c:	f003 030f 	and.w	r3, r3, #15
 8008170:	e006      	b.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 8008172:	4b83      	ldr	r3, [pc, #524]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008178:	041b      	lsls	r3, r3, #16
 800817a:	0e1b      	lsrs	r3, r3, #24
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	4a81      	ldr	r2, [pc, #516]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x12a4>)
 8008182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008186:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008188:	e158      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800818e:	e155      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008194:	e152      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800819a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800819e:	430b      	orrs	r3, r1
 80081a0:	d177      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x11ae>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80081a2:	4b77      	ldr	r3, [pc, #476]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80081a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081a8:	f003 0318 	and.w	r3, r3, #24
 80081ac:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	2b18      	cmp	r3, #24
 80081b2:	d86b      	bhi.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80081b4:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x10d8>)
 80081b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ba:	bf00      	nop
 80081bc:	08008221 	.word	0x08008221
 80081c0:	0800828d 	.word	0x0800828d
 80081c4:	0800828d 	.word	0x0800828d
 80081c8:	0800828d 	.word	0x0800828d
 80081cc:	0800828d 	.word	0x0800828d
 80081d0:	0800828d 	.word	0x0800828d
 80081d4:	0800828d 	.word	0x0800828d
 80081d8:	0800828d 	.word	0x0800828d
 80081dc:	08008229 	.word	0x08008229
 80081e0:	0800828d 	.word	0x0800828d
 80081e4:	0800828d 	.word	0x0800828d
 80081e8:	0800828d 	.word	0x0800828d
 80081ec:	0800828d 	.word	0x0800828d
 80081f0:	0800828d 	.word	0x0800828d
 80081f4:	0800828d 	.word	0x0800828d
 80081f8:	0800828d 	.word	0x0800828d
 80081fc:	08008231 	.word	0x08008231
 8008200:	0800828d 	.word	0x0800828d
 8008204:	0800828d 	.word	0x0800828d
 8008208:	0800828d 	.word	0x0800828d
 800820c:	0800828d 	.word	0x0800828d
 8008210:	0800828d 	.word	0x0800828d
 8008214:	0800828d 	.word	0x0800828d
 8008218:	0800828d 	.word	0x0800828d
 800821c:	0800824b 	.word	0x0800824b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008220:	f7fd fcd6 	bl	8005bd0 <HAL_RCC_GetPCLK3Freq>
 8008224:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008226:	e109      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008228:	f7fd fb8a 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 800822c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800822e:	e105      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008230:	4b53      	ldr	r3, [pc, #332]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800823c:	d102      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
        {
          frequency = HSI_VALUE;
 800823e:	4b51      	ldr	r3, [pc, #324]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>)
 8008240:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008242:	e0fb      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008248:	e0f8      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800824a:	4b4d      	ldr	r3, [pc, #308]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b20      	cmp	r3, #32
 8008254:	d117      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x11a2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008256:	4b4a      	ldr	r3, [pc, #296]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d005      	beq.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x118a>
 8008262:	4b47      	ldr	r3, [pc, #284]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	0e1b      	lsrs	r3, r3, #24
 8008268:	f003 030f 	and.w	r3, r3, #15
 800826c:	e006      	b.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x1198>
 800826e:	4b44      	ldr	r3, [pc, #272]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008274:	041b      	lsls	r3, r3, #16
 8008276:	0e1b      	lsrs	r3, r3, #24
 8008278:	f003 030f 	and.w	r3, r3, #15
 800827c:	4a42      	ldr	r2, [pc, #264]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x12a4>)
 800827e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008282:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008284:	e0da      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800828a:	e0d7      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008290:	e0d4      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008296:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800829a:	430b      	orrs	r3, r1
 800829c:	d155      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800829e:	4b38      	ldr	r3, [pc, #224]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80082a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80082a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80082a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082b0:	d013      	beq.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082b8:	d844      	bhi.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082c0:	d013      	beq.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082c8:	d83c      	bhi.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d014      	beq.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082d6:	d014      	beq.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
 80082d8:	e034      	b.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082da:	f107 0318 	add.w	r3, r7, #24
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fc48 	bl	8006b74 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082e8:	e0a8      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fae4 	bl	80068bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082f8:	e0a0      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80082fa:	f7fd fb21 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 80082fe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008300:	e09c      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008302:	4b1f      	ldr	r3, [pc, #124]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b20      	cmp	r3, #32
 800830c:	d117      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x125a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800830e:	4b1c      	ldr	r3, [pc, #112]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x1242>
 800831a:	4b19      	ldr	r3, [pc, #100]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	0e1b      	lsrs	r3, r3, #24
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	e006      	b.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x1250>
 8008326:	4b16      	ldr	r3, [pc, #88]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800832c:	041b      	lsls	r3, r3, #16
 800832e:	0e1b      	lsrs	r3, r3, #24
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	4a14      	ldr	r2, [pc, #80]	; (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x12a4>)
 8008336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800833a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800833c:	e07e      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          frequency = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008342:	e07b      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>

      default:

        frequency = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008348:	e078      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800834a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800834e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008352:	430b      	orrs	r3, r1
 8008354:	d138      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008356:	4b0a      	ldr	r3, [pc, #40]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800835c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008360:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008362:	4b07      	ldr	r3, [pc, #28]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b02      	cmp	r3, #2
 800836e:	d10d      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
    {
      frequency = LSE_VALUE;
 8008376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837a:	637b      	str	r3, [r7, #52]	; 0x34
 800837c:	e05e      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800837e:	bf00      	nop
 8008380:	46020c00 	.word	0x46020c00
 8008384:	00f42400 	.word	0x00f42400
 8008388:	0800d0ec 	.word	0x0800d0ec
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800838c:	4b2e      	ldr	r3, [pc, #184]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800838e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800839a:	d112      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083a2:	d10e      	bne.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083a4:	4b28      	ldr	r3, [pc, #160]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80083a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083b2:	d102      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
      {
        frequency = LSI_VALUE / 128U;
 80083b4:	23fa      	movs	r3, #250	; 0xfa
 80083b6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083b8:	e040      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
      else
      {
        frequency = LSI_VALUE;
 80083ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80083be:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083c0:	e03c      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	637b      	str	r3, [r7, #52]	; 0x34
 80083c6:	e039      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80083c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083cc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80083d0:	430b      	orrs	r3, r1
 80083d2:	d131      	bne.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80083d4:	4b1c      	ldr	r3, [pc, #112]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80083d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80083da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80083de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80083e0:	4b19      	ldr	r3, [pc, #100]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ec:	d105      	bne.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x1316>
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d102      	bne.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x1316>
    {
      frequency = HSI48_VALUE;
 80083f4:	4b15      	ldr	r3, [pc, #84]	; (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34
 80083f8:	e020      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80083fa:	4b13      	ldr	r3, [pc, #76]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008406:	d106      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840e:	d102      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008410:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8008412:	637b      	str	r3, [r7, #52]	; 0x34
 8008414:	e012      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008416:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800841e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008422:	d106      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x134e>
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800842a:	d102      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x134e>
    {
      frequency = HSI_VALUE;
 800842c:	4b09      	ldr	r3, [pc, #36]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800842e:	637b      	str	r3, [r7, #52]	; 0x34
 8008430:	e004      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
 8008436:	e001      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800843c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800843e:	4618      	mov	r0, r3
 8008440:	3738      	adds	r7, #56	; 0x38
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	46020c00 	.word	0x46020c00
 800844c:	02dc6c00 	.word	0x02dc6c00
 8008450:	016e3600 	.word	0x016e3600
 8008454:	00f42400 	.word	0x00f42400

08008458 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008460:	4b47      	ldr	r3, [pc, #284]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a46      	ldr	r2, [pc, #280]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008466:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800846a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800846c:	f7f9 fce4 	bl	8001e38 <HAL_GetTick>
 8008470:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008472:	e008      	b.n	8008486 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008474:	f7f9 fce0 	bl	8001e38 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d901      	bls.n	8008486 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e077      	b.n	8008576 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008486:	4b3e      	ldr	r3, [pc, #248]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f0      	bne.n	8008474 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008492:	4b3b      	ldr	r3, [pc, #236]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6811      	ldr	r1, [r2, #0]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	6852      	ldr	r2, [r2, #4]
 80084a6:	3a01      	subs	r2, #1
 80084a8:	0212      	lsls	r2, r2, #8
 80084aa:	430a      	orrs	r2, r1
 80084ac:	4934      	ldr	r1, [pc, #208]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	62cb      	str	r3, [r1, #44]	; 0x2c
 80084b2:	4b33      	ldr	r3, [pc, #204]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 80084b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084b6:	4b33      	ldr	r3, [pc, #204]	; (8008584 <RCCEx_PLL2_Config+0x12c>)
 80084b8:	4013      	ands	r3, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6892      	ldr	r2, [r2, #8]
 80084be:	3a01      	subs	r2, #1
 80084c0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68d2      	ldr	r2, [r2, #12]
 80084c8:	3a01      	subs	r2, #1
 80084ca:	0252      	lsls	r2, r2, #9
 80084cc:	b292      	uxth	r2, r2
 80084ce:	4311      	orrs	r1, r2
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6912      	ldr	r2, [r2, #16]
 80084d4:	3a01      	subs	r2, #1
 80084d6:	0412      	lsls	r2, r2, #16
 80084d8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80084dc:	4311      	orrs	r1, r2
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6952      	ldr	r2, [r2, #20]
 80084e2:	3a01      	subs	r2, #1
 80084e4:	0612      	lsls	r2, r2, #24
 80084e6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80084ea:	430a      	orrs	r2, r1
 80084ec:	4924      	ldr	r1, [pc, #144]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80084f2:	4b23      	ldr	r3, [pc, #140]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	f023 020c 	bic.w	r2, r3, #12
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	4920      	ldr	r1, [pc, #128]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008500:	4313      	orrs	r3, r2
 8008502:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008504:	4b1e      	ldr	r3, [pc, #120]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	491c      	ldr	r1, [pc, #112]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 800850e:	4313      	orrs	r3, r2
 8008510:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008512:	4b1b      	ldr	r3, [pc, #108]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	4a1a      	ldr	r2, [pc, #104]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008518:	f023 0310 	bic.w	r3, r3, #16
 800851c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800851e:	4b18      	ldr	r3, [pc, #96]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008526:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	69d2      	ldr	r2, [r2, #28]
 800852e:	00d2      	lsls	r2, r2, #3
 8008530:	4913      	ldr	r1, [pc, #76]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008532:	4313      	orrs	r3, r2
 8008534:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008536:	4b12      	ldr	r3, [pc, #72]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853a:	4a11      	ldr	r2, [pc, #68]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 800853c:	f043 0310 	orr.w	r3, r3, #16
 8008540:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a0e      	ldr	r2, [pc, #56]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 8008548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800854c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800854e:	f7f9 fc73 	bl	8001e38 <HAL_GetTick>
 8008552:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008554:	e008      	b.n	8008568 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008556:	f7f9 fc6f 	bl	8001e38 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e006      	b.n	8008576 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008568:	4b05      	ldr	r3, [pc, #20]	; (8008580 <RCCEx_PLL2_Config+0x128>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0f0      	beq.n	8008556 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008574:	2300      	movs	r3, #0

}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	46020c00 	.word	0x46020c00
 8008584:	80800000 	.word	0x80800000

08008588 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008590:	4b47      	ldr	r3, [pc, #284]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a46      	ldr	r2, [pc, #280]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800859a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800859c:	f7f9 fc4c 	bl	8001e38 <HAL_GetTick>
 80085a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085a2:	e008      	b.n	80085b6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085a4:	f7f9 fc48 	bl	8001e38 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d901      	bls.n	80085b6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e077      	b.n	80086a6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085b6:	4b3e      	ldr	r3, [pc, #248]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f0      	bne.n	80085a4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80085c2:	4b3b      	ldr	r3, [pc, #236]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 80085c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085ca:	f023 0303 	bic.w	r3, r3, #3
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6811      	ldr	r1, [r2, #0]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	6852      	ldr	r2, [r2, #4]
 80085d6:	3a01      	subs	r2, #1
 80085d8:	0212      	lsls	r2, r2, #8
 80085da:	430a      	orrs	r2, r1
 80085dc:	4934      	ldr	r1, [pc, #208]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	630b      	str	r3, [r1, #48]	; 0x30
 80085e2:	4b33      	ldr	r3, [pc, #204]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 80085e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085e6:	4b33      	ldr	r3, [pc, #204]	; (80086b4 <RCCEx_PLL3_Config+0x12c>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6892      	ldr	r2, [r2, #8]
 80085ee:	3a01      	subs	r2, #1
 80085f0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	68d2      	ldr	r2, [r2, #12]
 80085f8:	3a01      	subs	r2, #1
 80085fa:	0252      	lsls	r2, r2, #9
 80085fc:	b292      	uxth	r2, r2
 80085fe:	4311      	orrs	r1, r2
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6912      	ldr	r2, [r2, #16]
 8008604:	3a01      	subs	r2, #1
 8008606:	0412      	lsls	r2, r2, #16
 8008608:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800860c:	4311      	orrs	r1, r2
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	6952      	ldr	r2, [r2, #20]
 8008612:	3a01      	subs	r2, #1
 8008614:	0612      	lsls	r2, r2, #24
 8008616:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800861a:	430a      	orrs	r2, r1
 800861c:	4924      	ldr	r1, [pc, #144]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 800861e:	4313      	orrs	r3, r2
 8008620:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008622:	4b23      	ldr	r3, [pc, #140]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	f023 020c 	bic.w	r2, r3, #12
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	4920      	ldr	r1, [pc, #128]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008630:	4313      	orrs	r3, r2
 8008632:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008634:	4b1e      	ldr	r3, [pc, #120]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	491c      	ldr	r1, [pc, #112]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 800863e:	4313      	orrs	r3, r2
 8008640:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008642:	4b1b      	ldr	r3, [pc, #108]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	4a1a      	ldr	r2, [pc, #104]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008648:	f023 0310 	bic.w	r3, r3, #16
 800864c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800864e:	4b18      	ldr	r3, [pc, #96]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008656:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	69d2      	ldr	r2, [r2, #28]
 800865e:	00d2      	lsls	r2, r2, #3
 8008660:	4913      	ldr	r1, [pc, #76]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008662:	4313      	orrs	r3, r2
 8008664:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008666:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	4a11      	ldr	r2, [pc, #68]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 800866c:	f043 0310 	orr.w	r3, r3, #16
 8008670:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008672:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a0e      	ldr	r2, [pc, #56]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 8008678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800867c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800867e:	f7f9 fbdb 	bl	8001e38 <HAL_GetTick>
 8008682:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008684:	e008      	b.n	8008698 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008686:	f7f9 fbd7 	bl	8001e38 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d901      	bls.n	8008698 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e006      	b.n	80086a6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008698:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <RCCEx_PLL3_Config+0x128>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0f0      	beq.n	8008686 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	46020c00 	.word	0x46020c00
 80086b4:	80800000 	.word	0x80800000

080086b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d071      	beq.n	80087ae <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7f8 fc62 	bl	8000fa8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80086ec:	4b32      	ldr	r3, [pc, #200]	; (80087b8 <HAL_RTC_Init+0x100>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f003 0310 	and.w	r3, r3, #16
 80086f4:	2b10      	cmp	r3, #16
 80086f6:	d051      	beq.n	800879c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086f8:	4b2f      	ldr	r3, [pc, #188]	; (80087b8 <HAL_RTC_Init+0x100>)
 80086fa:	22ca      	movs	r2, #202	; 0xca
 80086fc:	625a      	str	r2, [r3, #36]	; 0x24
 80086fe:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <HAL_RTC_Init+0x100>)
 8008700:	2253      	movs	r2, #83	; 0x53
 8008702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 faad 	bl	8008c64 <RTC_EnterInitMode>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d13f      	bne.n	8008794 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008714:	4b28      	ldr	r3, [pc, #160]	; (80087b8 <HAL_RTC_Init+0x100>)
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	4a27      	ldr	r2, [pc, #156]	; (80087b8 <HAL_RTC_Init+0x100>)
 800871a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800871e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008722:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008724:	4b24      	ldr	r3, [pc, #144]	; (80087b8 <HAL_RTC_Init+0x100>)
 8008726:	699a      	ldr	r2, [r3, #24]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6859      	ldr	r1, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	4319      	orrs	r1, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	430b      	orrs	r3, r1
 8008738:	491f      	ldr	r1, [pc, #124]	; (80087b8 <HAL_RTC_Init+0x100>)
 800873a:	4313      	orrs	r3, r2
 800873c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	041b      	lsls	r3, r3, #16
 8008748:	491b      	ldr	r1, [pc, #108]	; (80087b8 <HAL_RTC_Init+0x100>)
 800874a:	4313      	orrs	r3, r2
 800874c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800874e:	4b1a      	ldr	r3, [pc, #104]	; (80087b8 <HAL_RTC_Init+0x100>)
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	430b      	orrs	r3, r1
 8008760:	4915      	ldr	r1, [pc, #84]	; (80087b8 <HAL_RTC_Init+0x100>)
 8008762:	4313      	orrs	r3, r2
 8008764:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fab8 	bl	8008cdc <RTC_ExitInitMode>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10e      	bne.n	8008794 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008776:	4b10      	ldr	r3, [pc, #64]	; (80087b8 <HAL_RTC_Init+0x100>)
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a19      	ldr	r1, [r3, #32]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	4319      	orrs	r1, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	430b      	orrs	r3, r1
 800878e:	490a      	ldr	r1, [pc, #40]	; (80087b8 <HAL_RTC_Init+0x100>)
 8008790:	4313      	orrs	r3, r2
 8008792:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008794:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <HAL_RTC_Init+0x100>)
 8008796:	22ff      	movs	r2, #255	; 0xff
 8008798:	625a      	str	r2, [r3, #36]	; 0x24
 800879a:	e001      	b.n	80087a0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d103      	bne.n	80087ae <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	46007800 	.word	0x46007800

080087bc <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80087bc:	b590      	push	{r4, r7, lr}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_RTC_SetTime+0x1a>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e088      	b.n	80088e8 <HAL_RTC_SetTime+0x12c>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2202      	movs	r2, #2
 80087e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087e6:	4b42      	ldr	r3, [pc, #264]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 80087e8:	22ca      	movs	r2, #202	; 0xca
 80087ea:	625a      	str	r2, [r3, #36]	; 0x24
 80087ec:	4b40      	ldr	r3, [pc, #256]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 80087ee:	2253      	movs	r2, #83	; 0x53
 80087f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 fa36 	bl	8008c64 <RTC_EnterInitMode>
 80087f8:	4603      	mov	r3, r0
 80087fa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80087fc:	7cfb      	ldrb	r3, [r7, #19]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d163      	bne.n	80088ca <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008802:	4b3b      	ldr	r3, [pc, #236]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800880a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800880e:	d057      	beq.n	80088c0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d125      	bne.n	8008862 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008816:	4b36      	ldr	r3, [pc, #216]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	d102      	bne.n	8008828 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2200      	movs	r2, #0
 8008826:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f000 fa93 	bl	8008d58 <RTC_ByteToBcd2>
 8008832:	4603      	mov	r3, r0
 8008834:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	4618      	mov	r0, r3
 800883c:	f000 fa8c 	bl	8008d58 <RTC_ByteToBcd2>
 8008840:	4603      	mov	r3, r0
 8008842:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008844:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	789b      	ldrb	r3, [r3, #2]
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fa84 	bl	8008d58 <RTC_ByteToBcd2>
 8008850:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008852:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	78db      	ldrb	r3, [r3, #3]
 800885a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800885c:	4313      	orrs	r3, r2
 800885e:	617b      	str	r3, [r7, #20]
 8008860:	e017      	b.n	8008892 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008862:	4b23      	ldr	r3, [pc, #140]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2200      	movs	r2, #0
 8008872:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008880:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008886:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	78db      	ldrb	r3, [r3, #3]
 800888c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800888e:	4313      	orrs	r3, r2
 8008890:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8008892:	4a17      	ldr	r2, [pc, #92]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800889a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800889e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80088a0:	4b13      	ldr	r3, [pc, #76]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	4a12      	ldr	r2, [pc, #72]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 80088a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088aa:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80088ac:	4b10      	ldr	r3, [pc, #64]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 80088ae:	699a      	ldr	r2, [r3, #24]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	68d9      	ldr	r1, [r3, #12]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	430b      	orrs	r3, r1
 80088ba:	490d      	ldr	r1, [pc, #52]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 fa0b 	bl	8008cdc <RTC_ExitInitMode>
 80088c6:	4603      	mov	r3, r0
 80088c8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ca:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <HAL_RTC_SetTime+0x134>)
 80088cc:	22ff      	movs	r2, #255	; 0xff
 80088ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80088d0:	7cfb      	ldrb	r3, [r7, #19]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80088e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	371c      	adds	r7, #28
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd90      	pop	{r4, r7, pc}
 80088f0:	46007800 	.word	0x46007800

080088f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008906:	2b01      	cmp	r3, #1
 8008908:	d101      	bne.n	800890e <HAL_RTC_SetDate+0x1a>
 800890a:	2302      	movs	r3, #2
 800890c:	e071      	b.n	80089f2 <HAL_RTC_SetDate+0xfe>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10e      	bne.n	8008942 <HAL_RTC_SetDate+0x4e>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	785b      	ldrb	r3, [r3, #1]
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	d008      	beq.n	8008942 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	785b      	ldrb	r3, [r3, #1]
 8008934:	f023 0310 	bic.w	r3, r3, #16
 8008938:	b2db      	uxtb	r3, r3
 800893a:	330a      	adds	r3, #10
 800893c:	b2da      	uxtb	r2, r3
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d11c      	bne.n	8008982 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	78db      	ldrb	r3, [r3, #3]
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fa03 	bl	8008d58 <RTC_ByteToBcd2>
 8008952:	4603      	mov	r3, r0
 8008954:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f9fc 	bl	8008d58 <RTC_ByteToBcd2>
 8008960:	4603      	mov	r3, r0
 8008962:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008964:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	789b      	ldrb	r3, [r3, #2]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f9f4 	bl	8008d58 <RTC_ByteToBcd2>
 8008970:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008972:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	e00e      	b.n	80089a0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	78db      	ldrb	r3, [r3, #3]
 8008986:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	785b      	ldrb	r3, [r3, #1]
 800898c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800898e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008994:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089a0:	4b16      	ldr	r3, [pc, #88]	; (80089fc <HAL_RTC_SetDate+0x108>)
 80089a2:	22ca      	movs	r2, #202	; 0xca
 80089a4:	625a      	str	r2, [r3, #36]	; 0x24
 80089a6:	4b15      	ldr	r3, [pc, #84]	; (80089fc <HAL_RTC_SetDate+0x108>)
 80089a8:	2253      	movs	r2, #83	; 0x53
 80089aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f959 	bl	8008c64 <RTC_EnterInitMode>
 80089b2:	4603      	mov	r3, r0
 80089b4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80089b6:	7cfb      	ldrb	r3, [r7, #19]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10b      	bne.n	80089d4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80089bc:	4a0f      	ldr	r2, [pc, #60]	; (80089fc <HAL_RTC_SetDate+0x108>)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089c8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f986 	bl	8008cdc <RTC_ExitInitMode>
 80089d0:	4603      	mov	r3, r0
 80089d2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089d4:	4b09      	ldr	r3, [pc, #36]	; (80089fc <HAL_RTC_SetDate+0x108>)
 80089d6:	22ff      	movs	r2, #255	; 0xff
 80089d8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80089da:	7cfb      	ldrb	r3, [r7, #19]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d103      	bne.n	80089e8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80089f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd90      	pop	{r4, r7, pc}
 80089fa:	bf00      	nop
 80089fc:	46007800 	.word	0x46007800

08008a00 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008a00:	b590      	push	{r4, r7, lr}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <HAL_RTC_SetAlarm+0x1e>
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	e0ea      	b.n	8008bf4 <HAL_RTC_SetAlarm+0x1f4>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8008a2e:	4b73      	ldr	r3, [pc, #460]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a36:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a3e:	d05c      	beq.n	8008afa <HAL_RTC_SetAlarm+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d136      	bne.n	8008ab4 <HAL_RTC_SetAlarm+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008a46:	4b6d      	ldr	r3, [pc, #436]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d102      	bne.n	8008a58 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2200      	movs	r2, #0
 8008a56:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 f97b 	bl	8008d58 <RTC_ByteToBcd2>
 8008a62:	4603      	mov	r3, r0
 8008a64:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f974 	bl	8008d58 <RTC_ByteToBcd2>
 8008a70:	4603      	mov	r3, r0
 8008a72:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008a74:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	789b      	ldrb	r3, [r3, #2]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f96c 	bl	8008d58 <RTC_ByteToBcd2>
 8008a80:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a82:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	78db      	ldrb	r3, [r3, #3]
 8008a8a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008a8c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 f95e 	bl	8008d58 <RTC_ByteToBcd2>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008aa0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008aa8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	e022      	b.n	8008afa <HAL_RTC_SetAlarm+0xfa>
    }
    else /* format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008ab4:	4b51      	ldr	r3, [pc, #324]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <HAL_RTC_SetAlarm+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ad2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ad8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	78db      	ldrb	r3, [r3, #3]
 8008ade:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008ae0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ae8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008aea:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008af0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]
    }
  }


  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b02:	d137      	bne.n	8008b74 <HAL_RTC_SetAlarm+0x174>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8008b04:	4b3d      	ldr	r3, [pc, #244]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	4a3c      	ldr	r2, [pc, #240]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008b0e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008b10:	4b3a      	ldr	r3, [pc, #232]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b12:	2201      	movs	r2, #1
 8008b14:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b1c:	d107      	bne.n	8008b2e <HAL_RTC_SetAlarm+0x12e>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	699a      	ldr	r2, [r3, #24]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	4935      	ldr	r1, [pc, #212]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	644b      	str	r3, [r1, #68]	; 0x44
 8008b2c:	e006      	b.n	8008b3c <HAL_RTC_SetAlarm+0x13c>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008b2e:	4a33      	ldr	r2, [pc, #204]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008b34:	4a31      	ldr	r2, [pc, #196]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008b3c:	4a2f      	ldr	r2, [pc, #188]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	6713      	str	r3, [r2, #112]	; 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d106      	bne.n	8008b5a <HAL_RTC_SetAlarm+0x15a>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAOCLR);
 8008b4c:	4b2b      	ldr	r3, [pc, #172]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	4a2a      	ldr	r2, [pc, #168]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b56:	6193      	str	r3, [r2, #24]
 8008b58:	e005      	b.n	8008b66 <HAL_RTC_SetAlarm+0x166>
    }
    else
    {
      /* Disable the  Alarm A  output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAOCLR);
 8008b5a:	4b28      	ldr	r3, [pc, #160]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	4a27      	ldr	r2, [pc, #156]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b60:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008b64:	6193      	str	r3, [r2, #24]
    }
    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8008b66:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	4a24      	ldr	r2, [pc, #144]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b70:	6193      	str	r3, [r2, #24]
 8008b72:	e036      	b.n	8008be2 <HAL_RTC_SetAlarm+0x1e2>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8008b74:	4b21      	ldr	r3, [pc, #132]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	4a20      	ldr	r2, [pc, #128]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b7a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008b7e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008b80:	4b1e      	ldr	r3, [pc, #120]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b82:	2202      	movs	r2, #2
 8008b84:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8c:	d107      	bne.n	8008b9e <HAL_RTC_SetAlarm+0x19e>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	699a      	ldr	r2, [r3, #24]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	4919      	ldr	r1, [pc, #100]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b9c:	e006      	b.n	8008bac <HAL_RTC_SetAlarm+0x1ac>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8008b9e:	4a17      	ldr	r2, [pc, #92]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR,  sAlarm->AlarmSubSecondMask);
 8008ba4:	4a15      	ldr	r2, [pc, #84]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8008bac:	4a13      	ldr	r2, [pc, #76]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	6753      	str	r3, [r2, #116]	; 0x74
    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d106      	bne.n	8008bca <HAL_RTC_SetAlarm+0x1ca>
    {
      /* Configure the  Alarm B output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBOCLR);
 8008bbc:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	4a0e      	ldr	r2, [pc, #56]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bc6:	6193      	str	r3, [r2, #24]
 8008bc8:	e005      	b.n	8008bd6 <HAL_RTC_SetAlarm+0x1d6>
    }
    else
    {
      /* Disable the  Alarm B output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBOCLR);
 8008bca:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	4a0b      	ldr	r2, [pc, #44]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bd4:	6193      	str	r3, [r2, #24]
    }
    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <HAL_RTC_SetAlarm+0x1fc>)
 8008bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008be0:	6193      	str	r3, [r2, #24]
  }


  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd90      	pop	{r4, r7, pc}
 8008bfc:	46007800 	.word	0x46007800

08008c00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008c08:	4b15      	ldr	r3, [pc, #84]	; (8008c60 <HAL_RTC_WaitForSynchro+0x60>)
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	4a14      	ldr	r2, [pc, #80]	; (8008c60 <HAL_RTC_WaitForSynchro+0x60>)
 8008c0e:	f023 0320 	bic.w	r3, r3, #32
 8008c12:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008c14:	f7f9 f910 	bl	8001e38 <HAL_GetTick>
 8008c18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c1a:	e013      	b.n	8008c44 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c1c:	f7f9 f90c 	bl	8001e38 <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c2a:	d90b      	bls.n	8008c44 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c2c:	4b0c      	ldr	r3, [pc, #48]	; (8008c60 <HAL_RTC_WaitForSynchro+0x60>)
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f003 0320 	and.w	r3, r3, #32
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10c      	bne.n	8008c52 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e008      	b.n	8008c56 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c44:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <HAL_RTC_WaitForSynchro+0x60>)
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f003 0320 	and.w	r3, r3, #32
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0e5      	beq.n	8008c1c <HAL_RTC_WaitForSynchro+0x1c>
 8008c50:	e000      	b.n	8008c54 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8008c52:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	46007800 	.word	0x46007800

08008c64 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008c70:	4b19      	ldr	r3, [pc, #100]	; (8008cd8 <RTC_EnterInitMode+0x74>)
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d128      	bne.n	8008cce <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008c7c:	4b16      	ldr	r3, [pc, #88]	; (8008cd8 <RTC_EnterInitMode+0x74>)
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	4a15      	ldr	r2, [pc, #84]	; (8008cd8 <RTC_EnterInitMode+0x74>)
 8008c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c86:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008c88:	f7f9 f8d6 	bl	8001e38 <HAL_GetTick>
 8008c8c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008c8e:	e013      	b.n	8008cb8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008c90:	f7f9 f8d2 	bl	8001e38 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c9e:	d90b      	bls.n	8008cb8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008ca0:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <RTC_EnterInitMode+0x74>)
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10f      	bne.n	8008ccc <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008cb8:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <RTC_EnterInitMode+0x74>)
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d104      	bne.n	8008cce <RTC_EnterInitMode+0x6a>
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d1e2      	bne.n	8008c90 <RTC_EnterInitMode+0x2c>
 8008cca:	e000      	b.n	8008cce <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8008ccc:	bf00      	nop
        }
      }
    }
  }

  return status;
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	46007800 	.word	0x46007800

08008cdc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008ce8:	4b1a      	ldr	r3, [pc, #104]	; (8008d54 <RTC_ExitInitMode+0x78>)
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	4a19      	ldr	r2, [pc, #100]	; (8008d54 <RTC_ExitInitMode+0x78>)
 8008cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cf2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008cf4:	4b17      	ldr	r3, [pc, #92]	; (8008d54 <RTC_ExitInitMode+0x78>)
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10c      	bne.n	8008d1a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff ff7d 	bl	8008c00 <HAL_RTC_WaitForSynchro>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01e      	beq.n	8008d4a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2203      	movs	r2, #3
 8008d10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	73fb      	strb	r3, [r7, #15]
 8008d18:	e017      	b.n	8008d4a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <RTC_ExitInitMode+0x78>)
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	4a0d      	ldr	r2, [pc, #52]	; (8008d54 <RTC_ExitInitMode+0x78>)
 8008d20:	f023 0320 	bic.w	r3, r3, #32
 8008d24:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff ff6a 	bl	8008c00 <HAL_RTC_WaitForSynchro>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d005      	beq.n	8008d3e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2203      	movs	r2, #3
 8008d36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <RTC_ExitInitMode+0x78>)
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	4a04      	ldr	r2, [pc, #16]	; (8008d54 <RTC_ExitInitMode+0x78>)
 8008d44:	f043 0320 	orr.w	r3, r3, #32
 8008d48:	6193      	str	r3, [r2, #24]
  }
  return status;
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	46007800 	.word	0x46007800

08008d58 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008d6a:	e005      	b.n	8008d78 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008d72:	7afb      	ldrb	r3, [r7, #11]
 8008d74:	3b0a      	subs	r3, #10
 8008d76:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	2b09      	cmp	r3, #9
 8008d7c:	d8f6      	bhi.n	8008d6c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	011b      	lsls	r3, r3, #4
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	b2db      	uxtb	r3, r3
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	4910      	ldr	r1, [pc, #64]	; (8008dec <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	431a      	orrs	r2, r3
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	490c      	ldr	r1, [pc, #48]	; (8008df0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	6919      	ldr	r1, [r3, #16]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	695b      	ldr	r3, [r3, #20]
 8008dd4:	041b      	lsls	r3, r3, #16
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	4905      	ldr	r1, [pc, #20]	; (8008df0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	46007800 	.word	0x46007800
 8008df0:	46007c00 	.word	0x46007c00

08008df4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08a      	sub	sp, #40	; 0x28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e075      	b.n	8008ef2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7f8 f961 	bl	80010e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2204      	movs	r2, #4
 8008e22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f868 	bl	8008efc <HAL_SD_InitCard>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e05d      	b.n	8008ef2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008e36:	f107 0308 	add.w	r3, r7, #8
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fc5d 	bl	80096fc <HAL_SD_GetCardStatus>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e052      	b.n	8008ef2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008e4c:	7e3b      	ldrb	r3, [r7, #24]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008e52:	7e7b      	ldrb	r3, [r7, #25]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d10a      	bne.n	8008e76 <HAL_SD_Init+0x82>
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d102      	bne.n	8008e6c <HAL_SD_Init+0x78>
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d004      	beq.n	8008e76 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e72:	659a      	str	r2, [r3, #88]	; 0x58
 8008e74:	e00b      	b.n	8008e8e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d104      	bne.n	8008e88 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e84:	659a      	str	r2, [r3, #88]	; 0x58
 8008e86:	e002      	b.n	8008e8e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fcef 	bl	8009878 <HAL_SD_ConfigWideBusOperation>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e026      	b.n	8008ef2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008ea4:	f7f8 ffc8 	bl	8001e38 <HAL_GetTick>
 8008ea8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008eaa:	e011      	b.n	8008ed0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008eac:	f7f8 ffc4 	bl	8001e38 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eba:	d109      	bne.n	8008ed0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ec2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e010      	b.n	8008ef2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fde3 	bl	8009a9c <HAL_SD_GetCardState>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d1e7      	bne.n	8008eac <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3728      	adds	r7, #40	; 0x28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008efc:	b590      	push	{r4, r7, lr}
 8008efe:	b08d      	sub	sp, #52	; 0x34
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008f04:	2300      	movs	r3, #0
 8008f06:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008f14:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008f18:	f04f 0100 	mov.w	r1, #0
 8008f1c:	f7fe f8e2 	bl	80070e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f20:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d109      	bne.n	8008f3c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008f36:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e070      	b.n	800901e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	0a1b      	lsrs	r3, r3, #8
 8008f40:	4a39      	ldr	r2, [pc, #228]	; (8009028 <HAL_SD_InitCard+0x12c>)
 8008f42:	fba2 2303 	umull	r2, r3, r2, r3
 8008f46:	091b      	lsrs	r3, r3, #4
 8008f48:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681c      	ldr	r4, [r3, #0]
 8008f4e:	466a      	mov	r2, sp
 8008f50:	f107 0318 	add.w	r3, r7, #24
 8008f54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008f58:	e882 0003 	stmia.w	r2, {r0, r1}
 8008f5c:	f107 030c 	add.w	r3, r7, #12
 8008f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f62:	4620      	mov	r0, r4
 8008f64:	f002 feb4 	bl	800bcd0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f002 fef7 	bl	800bd60 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d005      	beq.n	8008f84 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	005b      	lsls	r3, r3, #1
 8008f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f82:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d007      	beq.n	8008f9a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008f8a:	4a28      	ldr	r2, [pc, #160]	; (800902c <HAL_SD_InitCard+0x130>)
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f92:	3301      	adds	r3, #1
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7f8 ff5b 	bl	8001e50 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fe6c 	bl	8009c78 <SD_PowerON>
 8008fa0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e02e      	b.n	800901e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fd8b 	bl	8009adc <SD_InitCard>
 8008fc6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00b      	beq.n	8008fe6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e01b      	b.n	800901e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f002 ff4c 	bl	800be8c <SDMMC_CmdBlockLength>
 8008ff4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00f      	beq.n	800901c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a0b      	ldr	r2, [pc, #44]	; (8009030 <HAL_SD_InitCard+0x134>)
 8009002:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	431a      	orrs	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	372c      	adds	r7, #44	; 0x2c
 8009022:	46bd      	mov	sp, r7
 8009024:	bd90      	pop	{r4, r7, pc}
 8009026:	bf00      	nop
 8009028:	014f8b59 	.word	0x014f8b59
 800902c:	00012110 	.word	0x00012110
 8009030:	1fe00fff 	.word	0x1fe00fff

08009034 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d008      	beq.n	8009062 <HAL_SD_IRQHandler+0x2e>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f001 f8f8 	bl	800a250 <SD_Read_IT>
 8009060:	e186      	b.n	8009370 <HAL_SD_IRQHandler+0x33c>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 80ae 	beq.w	80091ce <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800907a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	6812      	ldr	r2, [r2, #0]
 8009086:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800908a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800908e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800909e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090ae:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d038      	beq.n	800912c <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d104      	bne.n	80090ce <HAL_SD_IRQHandler+0x9a>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 0320 	and.w	r3, r3, #32
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d011      	beq.n	80090f2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f002 fefe 	bl	800bed4 <SDMMC_CmdStopTransfer>
 80090d8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d008      	beq.n	80090f2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	431a      	orrs	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f957 	bl	80093a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a9b      	ldr	r2, [pc, #620]	; (8009364 <HAL_SD_IRQHandler+0x330>)
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d104      	bne.n	800911c <HAL_SD_IRQHandler+0xe8>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f003 0302 	and.w	r3, r3, #2
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f935 	bl	800938c <HAL_SD_RxCpltCallback>
 8009122:	e125      	b.n	8009370 <HAL_SD_IRQHandler+0x33c>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f927 	bl	8009378 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800912a:	e121      	b.n	8009370 <HAL_SD_IRQHandler+0x33c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 811c 	beq.w	8009370 <HAL_SD_IRQHandler+0x33c>
      hsd->Instance->DLEN = 0;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2200      	movs	r2, #0
 800913e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2200      	movs	r2, #0
 8009146:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2200      	movs	r2, #0
 800914e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b00      	cmp	r3, #0
 8009158:	d104      	bne.n	8009164 <HAL_SD_IRQHandler+0x130>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b00      	cmp	r3, #0
 8009162:	d011      	beq.n	8009188 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4618      	mov	r0, r3
 800916a:	f002 feb3 	bl	800bed4 <SDMMC_CmdStopTransfer>
 800916e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d008      	beq.n	8009188 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	431a      	orrs	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f90c 	bl	80093a0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f003 0310 	and.w	r3, r3, #16
 800919c:	2b00      	cmp	r3, #0
 800919e:	d104      	bne.n	80091aa <HAL_SD_IRQHandler+0x176>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f8e4 	bl	8009378 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d105      	bne.n	80091c6 <HAL_SD_IRQHandler+0x192>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80d5 	beq.w	8009370 <HAL_SD_IRQHandler+0x33c>
        HAL_SD_RxCpltCallback(hsd);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f8e0 	bl	800938c <HAL_SD_RxCpltCallback>
}
 80091cc:	e0d0      	b.n	8009370 <HAL_SD_IRQHandler+0x33c>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d008      	beq.n	80091ee <HAL_SD_IRQHandler+0x1ba>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f001 f878 	bl	800a2dc <SD_Write_IT>
 80091ec:	e0c0      	b.n	8009370 <HAL_SD_IRQHandler+0x33c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 809d 	beq.w	8009338 <HAL_SD_IRQHandler+0x304>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b00      	cmp	r3, #0
 800920a:	d005      	beq.n	8009218 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009210:	f043 0202 	orr.w	r2, r3, #2
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921e:	f003 0308 	and.w	r3, r3, #8
 8009222:	2b00      	cmp	r3, #0
 8009224:	d005      	beq.n	8009232 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922a:	f043 0208 	orr.w	r2, r3, #8
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009238:	f003 0320 	and.w	r3, r3, #32
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009244:	f043 0220 	orr.w	r2, r3, #32
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009252:	f003 0310 	and.w	r3, r3, #16
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925e:	f043 0210 	orr.w	r2, r3, #16
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a3e      	ldr	r2, [pc, #248]	; (8009364 <HAL_SD_IRQHandler+0x330>)
 800926c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800927c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68da      	ldr	r2, [r3, #12]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800928c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800929c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68da      	ldr	r2, [r3, #12]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092ac:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f002 fe0e 	bl	800bed4 <SDMMC_CmdStopTransfer>
 80092b8:	4602      	mov	r2, r0
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092d2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092dc:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f003 0308 	and.w	r3, r3, #8
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00a      	beq.n	80092fe <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f852 	bl	80093a0 <HAL_SD_ErrorCallback>
}
 80092fc:	e038      	b.n	8009370 <HAL_SD_IRQHandler+0x33c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009304:	2b00      	cmp	r3, #0
 8009306:	d033      	beq.n	8009370 <HAL_SD_IRQHandler+0x33c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930c:	2b00      	cmp	r3, #0
 800930e:	d02f      	beq.n	8009370 <HAL_SD_IRQHandler+0x33c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800931e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2200      	movs	r2, #0
 8009326:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f835 	bl	80093a0 <HAL_SD_ErrorCallback>
}
 8009336:	e01b      	b.n	8009370 <HAL_SD_IRQHandler+0x33c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d014      	beq.n	8009370 <HAL_SD_IRQHandler+0x33c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <HAL_SD_IRQHandler+0x334>
      HAL_SDEx_Write_DMALnkLstBufCpltCallback(hsd);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f001 f812 	bl	800a384 <HAL_SDEx_Write_DMALnkLstBufCpltCallback>
}
 8009360:	e006      	b.n	8009370 <HAL_SD_IRQHandler+0x33c>
 8009362:	bf00      	nop
 8009364:	18000f3a 	.word	0x18000f3a
      HAL_SDEx_Read_DMALnkLstBufCpltCallback(hsd);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f001 f801 	bl	800a370 <HAL_SDEx_Read_DMALnkLstBufCpltCallback>
}
 800936e:	e7ff      	b.n	8009370 <HAL_SD_IRQHandler+0x33c>
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c2:	0f9b      	lsrs	r3, r3, #30
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ce:	0e9b      	lsrs	r3, r3, #26
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f003 030f 	and.w	r3, r3, #15
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093e0:	0e1b      	lsrs	r3, r3, #24
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f003 0303 	and.w	r3, r3, #3
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f2:	0c1b      	lsrs	r3, r3, #16
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093fe:	0a1b      	lsrs	r3, r3, #8
 8009400:	b2da      	uxtb	r2, r3
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800940a:	b2da      	uxtb	r2, r3
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009414:	0d1b      	lsrs	r3, r3, #20
 8009416:	b29a      	uxth	r2, r3
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009420:	0c1b      	lsrs	r3, r3, #16
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f003 030f 	and.w	r3, r3, #15
 8009428:	b2da      	uxtb	r2, r3
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009432:	0bdb      	lsrs	r3, r3, #15
 8009434:	b2db      	uxtb	r3, r3
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	b2da      	uxtb	r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009444:	0b9b      	lsrs	r3, r3, #14
 8009446:	b2db      	uxtb	r3, r3
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	b2da      	uxtb	r2, r3
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009456:	0b5b      	lsrs	r3, r3, #13
 8009458:	b2db      	uxtb	r3, r3
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	b2da      	uxtb	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009468:	0b1b      	lsrs	r3, r3, #12
 800946a:	b2db      	uxtb	r3, r3
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	b2da      	uxtb	r2, r3
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2200      	movs	r2, #0
 800947a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	2b00      	cmp	r3, #0
 8009482:	d163      	bne.n	800954c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009488:	009a      	lsls	r2, r3, #2
 800948a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800948e:	4013      	ands	r3, r2
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009494:	0f92      	lsrs	r2, r2, #30
 8009496:	431a      	orrs	r2, r3
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094a0:	0edb      	lsrs	r3, r3, #27
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	f003 0307 	and.w	r3, r3, #7
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b2:	0e1b      	lsrs	r3, r3, #24
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094c4:	0d5b      	lsrs	r3, r3, #21
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 0307 	and.w	r3, r3, #7
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094d6:	0c9b      	lsrs	r3, r3, #18
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	f003 0307 	and.w	r3, r3, #7
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e8:	0bdb      	lsrs	r3, r3, #15
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 0307 	and.w	r3, r3, #7
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	1c5a      	adds	r2, r3, #1
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	7e1b      	ldrb	r3, [r3, #24]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	f003 0307 	and.w	r3, r3, #7
 800950a:	3302      	adds	r3, #2
 800950c:	2201      	movs	r2, #1
 800950e:	fa02 f303 	lsl.w	r3, r2, r3
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009516:	fb03 f202 	mul.w	r2, r3, r2
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	7a1b      	ldrb	r3, [r3, #8]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 030f 	and.w	r3, r3, #15
 8009528:	2201      	movs	r2, #1
 800952a:	409a      	lsls	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009538:	0a52      	lsrs	r2, r2, #9
 800953a:	fb03 f202 	mul.w	r2, r3, r2
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009548:	655a      	str	r2, [r3, #84]	; 0x54
 800954a:	e031      	b.n	80095b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	2b01      	cmp	r3, #1
 8009552:	d11d      	bne.n	8009590 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009558:	041b      	lsls	r3, r3, #16
 800955a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009562:	0c1b      	lsrs	r3, r3, #16
 8009564:	431a      	orrs	r2, r3
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	3301      	adds	r3, #1
 8009570:	029a      	lsls	r2, r3, #10
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009584:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	655a      	str	r2, [r3, #84]	; 0x54
 800958e:	e00f      	b.n	80095b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a58      	ldr	r2, [pc, #352]	; (80096f8 <HAL_SD_GetCardCSD+0x344>)
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e09d      	b.n	80096ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b4:	0b9b      	lsrs	r3, r3, #14
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095c6:	09db      	lsrs	r3, r3, #7
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095e8:	0fdb      	lsrs	r3, r3, #31
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095f4:	0f5b      	lsrs	r3, r3, #29
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f003 0303 	and.w	r3, r3, #3
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009606:	0e9b      	lsrs	r3, r3, #26
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 0307 	and.w	r3, r3, #7
 800960e:	b2da      	uxtb	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009618:	0d9b      	lsrs	r3, r3, #22
 800961a:	b2db      	uxtb	r3, r3
 800961c:	f003 030f 	and.w	r3, r3, #15
 8009620:	b2da      	uxtb	r2, r3
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800962a:	0d5b      	lsrs	r3, r3, #21
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	b2da      	uxtb	r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009646:	0c1b      	lsrs	r3, r3, #16
 8009648:	b2db      	uxtb	r3, r3
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	b2da      	uxtb	r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800965a:	0bdb      	lsrs	r3, r3, #15
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	b2da      	uxtb	r2, r3
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800966e:	0b9b      	lsrs	r3, r3, #14
 8009670:	b2db      	uxtb	r3, r3
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	b2da      	uxtb	r2, r3
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009682:	0b5b      	lsrs	r3, r3, #13
 8009684:	b2db      	uxtb	r3, r3
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	b2da      	uxtb	r2, r3
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009696:	0b1b      	lsrs	r3, r3, #12
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096aa:	0a9b      	lsrs	r3, r3, #10
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	f003 0303 	and.w	r3, r3, #3
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096d2:	085b      	lsrs	r3, r3, #1
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	1fe00fff 	.word	0x1fe00fff

080096fc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b094      	sub	sp, #80	; 0x50
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b03      	cmp	r3, #3
 8009716:	d101      	bne.n	800971c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e0a7      	b.n	800986c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800971c:	f107 0308 	add.w	r3, r7, #8
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fb36 	bl	8009d94 <SD_SendSDStatus>
 8009728:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800972a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800972c:	2b00      	cmp	r3, #0
 800972e:	d011      	beq.n	8009754 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a4f      	ldr	r2, [pc, #316]	; (8009874 <HAL_SD_GetCardStatus+0x178>)
 8009736:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800973c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800973e:	431a      	orrs	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009752:	e070      	b.n	8009836 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	099b      	lsrs	r3, r3, #6
 8009758:	b2db      	uxtb	r3, r3
 800975a:	f003 0303 	and.w	r3, r3, #3
 800975e:	b2da      	uxtb	r2, r3
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	095b      	lsrs	r3, r3, #5
 8009768:	b2db      	uxtb	r3, r3
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	b2da      	uxtb	r2, r3
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	0a1b      	lsrs	r3, r3, #8
 8009778:	b29b      	uxth	r3, r3
 800977a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800977e:	b29a      	uxth	r2, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	0e1b      	lsrs	r3, r3, #24
 8009784:	b29b      	uxth	r3, r3
 8009786:	4313      	orrs	r3, r2
 8009788:	b29a      	uxth	r2, r3
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	061a      	lsls	r2, r3, #24
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	021b      	lsls	r3, r3, #8
 8009796:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800979a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	0a1b      	lsrs	r3, r3, #8
 80097a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80097a4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	0e1b      	lsrs	r3, r3, #24
 80097aa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	0a1b      	lsrs	r3, r3, #8
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	0d1b      	lsrs	r3, r3, #20
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	f003 030f 	and.w	r3, r3, #15
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	0c1b      	lsrs	r3, r3, #16
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097dc:	b29a      	uxth	r2, r3
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	4313      	orrs	r3, r2
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	0a9b      	lsrs	r3, r3, #10
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	0a1b      	lsrs	r3, r3, #8
 8009802:	b2db      	uxtb	r3, r3
 8009804:	f003 0303 	and.w	r3, r3, #3
 8009808:	b2da      	uxtb	r2, r3
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	091b      	lsrs	r3, r3, #4
 8009812:	b2db      	uxtb	r3, r3
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	b2da      	uxtb	r2, r3
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	b2db      	uxtb	r3, r3
 8009822:	f003 030f 	and.w	r3, r3, #15
 8009826:	b2da      	uxtb	r2, r3
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	0e1b      	lsrs	r3, r3, #24
 8009830:	b2da      	uxtb	r2, r3
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800983e:	4618      	mov	r0, r3
 8009840:	f002 fb24 	bl	800be8c <SDMMC_CmdBlockLength>
 8009844:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00d      	beq.n	8009868 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a08      	ldr	r2, [pc, #32]	; (8009874 <HAL_SD_GetCardStatus+0x178>)
 8009852:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009858:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8009868:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800986c:	4618      	mov	r0, r3
 800986e:	3750      	adds	r7, #80	; 0x50
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	1fe00fff 	.word	0x1fe00fff

08009878 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009878:	b590      	push	{r4, r7, lr}
 800987a:	b08d      	sub	sp, #52	; 0x34
 800987c:	af02      	add	r7, sp, #8
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2203      	movs	r2, #3
 800988c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009894:	2b03      	cmp	r3, #3
 8009896:	d02e      	beq.n	80098f6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800989e:	d106      	bne.n	80098ae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	635a      	str	r2, [r3, #52]	; 0x34
 80098ac:	e029      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098b4:	d10a      	bne.n	80098cc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fb64 	bl	8009f84 <SD_WideBus_Enable>
 80098bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	635a      	str	r2, [r3, #52]	; 0x34
 80098ca:	e01a      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10a      	bne.n	80098e8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fba1 	bl	800a01a <SD_WideBus_Disable>
 80098d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	431a      	orrs	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	635a      	str	r2, [r3, #52]	; 0x34
 80098e6:	e00c      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	635a      	str	r2, [r3, #52]	; 0x34
 80098f4:	e005      	b.n	8009902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009906:	2b00      	cmp	r3, #0
 8009908:	d007      	beq.n	800991a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a5f      	ldr	r2, [pc, #380]	; (8009a8c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009910:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009918:	e096      	b.n	8009a48 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800991a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800991e:	f04f 0100 	mov.w	r1, #0
 8009922:	f7fd fbdf 	bl	80070e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009926:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 8083 	beq.w	8009a36 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	695a      	ldr	r2, [r3, #20]
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	4950      	ldr	r1, [pc, #320]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800994e:	fba1 1303 	umull	r1, r3, r1, r3
 8009952:	0e1b      	lsrs	r3, r3, #24
 8009954:	429a      	cmp	r2, r3
 8009956:	d303      	bcc.n	8009960 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	61bb      	str	r3, [r7, #24]
 800995e:	e05a      	b.n	8009a16 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009968:	d103      	bne.n	8009972 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	61bb      	str	r3, [r7, #24]
 8009970:	e051      	b.n	8009a16 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800997a:	d126      	bne.n	80099ca <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10e      	bne.n	80099a2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	4a43      	ldr	r2, [pc, #268]	; (8009a94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d906      	bls.n	800999a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	4a40      	ldr	r2, [pc, #256]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009990:	fba2 2303 	umull	r2, r3, r2, r3
 8009994:	0e5b      	lsrs	r3, r3, #25
 8009996:	61bb      	str	r3, [r7, #24]
 8009998:	e03d      	b.n	8009a16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	61bb      	str	r3, [r7, #24]
 80099a0:	e039      	b.n	8009a16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	69fa      	ldr	r2, [r7, #28]
 80099aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ae:	4a39      	ldr	r2, [pc, #228]	; (8009a94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d906      	bls.n	80099c2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	4a36      	ldr	r2, [pc, #216]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x218>)
 80099b8:	fba2 2303 	umull	r2, r3, r2, r3
 80099bc:	0e5b      	lsrs	r3, r3, #25
 80099be:	61bb      	str	r3, [r7, #24]
 80099c0:	e029      	b.n	8009a16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	61bb      	str	r3, [r7, #24]
 80099c8:	e025      	b.n	8009a16 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10e      	bne.n	80099f0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	4a30      	ldr	r2, [pc, #192]	; (8009a98 <HAL_SD_ConfigWideBusOperation+0x220>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d906      	bls.n	80099e8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	4a2c      	ldr	r2, [pc, #176]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x218>)
 80099de:	fba2 2303 	umull	r2, r3, r2, r3
 80099e2:	0e1b      	lsrs	r3, r3, #24
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	e016      	b.n	8009a16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	61bb      	str	r3, [r7, #24]
 80099ee:	e012      	b.n	8009a16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	69fa      	ldr	r2, [r7, #28]
 80099f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099fc:	4a26      	ldr	r2, [pc, #152]	; (8009a98 <HAL_SD_ConfigWideBusOperation+0x220>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d906      	bls.n	8009a10 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	4a22      	ldr	r2, [pc, #136]	; (8009a90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009a06:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0a:	0e1b      	lsrs	r3, r3, #24
 8009a0c:	61bb      	str	r3, [r7, #24]
 8009a0e:	e002      	b.n	8009a16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681c      	ldr	r4, [r3, #0]
 8009a1a:	466a      	mov	r2, sp
 8009a1c:	f107 0314 	add.w	r3, r7, #20
 8009a20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a24:	e882 0003 	stmia.w	r2, {r0, r1}
 8009a28:	f107 0308 	add.w	r3, r7, #8
 8009a2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f002 f94e 	bl	800bcd0 <SDMMC_Init>
 8009a34:	e008      	b.n	8009a48 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a50:	4618      	mov	r0, r3
 8009a52:	f002 fa1b 	bl	800be8c <SDMMC_CmdBlockLength>
 8009a56:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00c      	beq.n	8009a78 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a0a      	ldr	r2, [pc, #40]	; (8009a8c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009a64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	372c      	adds	r7, #44	; 0x2c
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd90      	pop	{r4, r7, pc}
 8009a8c:	1fe00fff 	.word	0x1fe00fff
 8009a90:	55e63b89 	.word	0x55e63b89
 8009a94:	02faf080 	.word	0x02faf080
 8009a98:	017d7840 	.word	0x017d7840

08009a9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009aa8:	f107 030c 	add.w	r3, r7, #12
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fa40 	bl	8009f34 <SD_SendStatus>
 8009ab4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d005      	beq.n	8009ac8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	0a5b      	lsrs	r3, r3, #9
 8009acc:	f003 030f 	and.w	r3, r3, #15
 8009ad0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009ad2:	693b      	ldr	r3, [r7, #16]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b090      	sub	sp, #64	; 0x40
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009ae8:	f7f8 f9a6 	bl	8001e38 <HAL_GetTick>
 8009aec:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f002 f945 	bl	800bd82 <SDMMC_GetPowerState>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d102      	bne.n	8009b04 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009afe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b02:	e0b5      	b.n	8009c70 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b08:	2b03      	cmp	r3, #3
 8009b0a:	d02e      	beq.n	8009b6a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f002 fb04 	bl	800c11e <SDMMC_CmdSendCID>
 8009b16:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <SD_InitCard+0x46>
    {
      return errorstate;
 8009b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b20:	e0a6      	b.n	8009c70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2100      	movs	r1, #0
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f002 f970 	bl	800be0e <SDMMC_GetResponse>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2104      	movs	r1, #4
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f002 f967 	bl	800be0e <SDMMC_GetResponse>
 8009b40:	4602      	mov	r2, r0
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2108      	movs	r1, #8
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f002 f95e 	bl	800be0e <SDMMC_GetResponse>
 8009b52:	4602      	mov	r2, r0
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	210c      	movs	r1, #12
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f002 f955 	bl	800be0e <SDMMC_GetResponse>
 8009b64:	4602      	mov	r2, r0
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d01d      	beq.n	8009bae <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009b72:	e019      	b.n	8009ba8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f107 020a 	add.w	r2, r7, #10
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f002 fb0c 	bl	800c19c <SDMMC_CmdSetRelAdd>
 8009b84:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8e:	e06f      	b.n	8009c70 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009b90:	f7f8 f952 	bl	8001e38 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	f241 3287 	movw	r2, #4999	; 0x1387
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d902      	bls.n	8009ba8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009ba2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ba6:	e063      	b.n	8009c70 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009ba8:	897b      	ldrh	r3, [r7, #10]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0e2      	beq.n	8009b74 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d036      	beq.n	8009c24 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009bb6:	897b      	ldrh	r3, [r7, #10]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc6:	041b      	lsls	r3, r3, #16
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	f002 fac6 	bl	800c15c <SDMMC_CmdSendCSD>
 8009bd0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <SD_InitCard+0x100>
    {
      return errorstate;
 8009bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bda:	e049      	b.n	8009c70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2100      	movs	r1, #0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f002 f913 	bl	800be0e <SDMMC_GetResponse>
 8009be8:	4602      	mov	r2, r0
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2104      	movs	r1, #4
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f002 f90a 	bl	800be0e <SDMMC_GetResponse>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2108      	movs	r1, #8
 8009c06:	4618      	mov	r0, r3
 8009c08:	f002 f901 	bl	800be0e <SDMMC_GetResponse>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	210c      	movs	r1, #12
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f002 f8f8 	bl	800be0e <SDMMC_GetResponse>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2104      	movs	r1, #4
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f002 f8ef 	bl	800be0e <SDMMC_GetResponse>
 8009c30:	4603      	mov	r3, r0
 8009c32:	0d1a      	lsrs	r2, r3, #20
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c38:	f107 030c 	add.w	r3, r7, #12
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff fbb8 	bl	80093b4 <HAL_SD_GetCardCSD>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d002      	beq.n	8009c50 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c4e:	e00f      	b.n	8009c70 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c58:	041b      	lsls	r3, r3, #16
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f002 f975 	bl	800bf4c <SDMMC_CmdSelDesel>
 8009c62:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <SD_InitCard+0x192>
  {
    return errorstate;
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6c:	e000      	b.n	8009c70 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3740      	adds	r7, #64	; 0x40
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f002 f97e 	bl	800bf92 <SDMMC_CmdGoIdleState>
 8009c96:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	e072      	b.n	8009d88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f002 f991 	bl	800bfce <SDMMC_CmdOperCond>
 8009cac:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cb4:	d10d      	bne.n	8009cd2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f002 f966 	bl	800bf92 <SDMMC_CmdGoIdleState>
 8009cc6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d004      	beq.n	8009cd8 <SD_PowerON+0x60>
    {
      return errorstate;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	e05a      	b.n	8009d88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d137      	bne.n	8009d50 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f002 f991 	bl	800c00e <SDMMC_CmdAppCommand>
 8009cec:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d02d      	beq.n	8009d50 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cf8:	e046      	b.n	8009d88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2100      	movs	r1, #0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f002 f984 	bl	800c00e <SDMMC_CmdAppCommand>
 8009d06:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	e03a      	b.n	8009d88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	491e      	ldr	r1, [pc, #120]	; (8009d90 <SD_PowerON+0x118>)
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f002 f99b 	bl	800c054 <SDMMC_CmdAppOperCommand>
 8009d1e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d2a:	e02d      	b.n	8009d88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f002 f86b 	bl	800be0e <SDMMC_GetResponse>
 8009d38:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	0fdb      	lsrs	r3, r3, #31
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <SD_PowerON+0xce>
 8009d42:	2301      	movs	r3, #1
 8009d44:	e000      	b.n	8009d48 <SD_PowerON+0xd0>
 8009d46:	2300      	movs	r3, #0
 8009d48:	613b      	str	r3, [r7, #16]

    count++;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d802      	bhi.n	8009d60 <SD_PowerON+0xe8>
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0cc      	beq.n	8009cfa <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d902      	bls.n	8009d70 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d6e:	e00b      	b.n	8009d88 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	c1100000 	.word	0xc1100000

08009d94 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08c      	sub	sp, #48	; 0x30
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d9e:	f7f8 f84b 	bl	8001e38 <HAL_GetTick>
 8009da2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2100      	movs	r1, #0
 8009dae:	4618      	mov	r0, r3
 8009db0:	f002 f82d 	bl	800be0e <SDMMC_GetResponse>
 8009db4:	4603      	mov	r3, r0
 8009db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dbe:	d102      	bne.n	8009dc6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dc4:	e0b0      	b.n	8009f28 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2140      	movs	r1, #64	; 0x40
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f002 f85d 	bl	800be8c <SDMMC_CmdBlockLength>
 8009dd2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d005      	beq.n	8009de6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	e0a0      	b.n	8009f28 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dee:	041b      	lsls	r3, r3, #16
 8009df0:	4619      	mov	r1, r3
 8009df2:	4610      	mov	r0, r2
 8009df4:	f002 f90b 	bl	800c00e <SDMMC_CmdAppCommand>
 8009df8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d005      	beq.n	8009e0c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	e08d      	b.n	8009f28 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e10:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009e12:	2340      	movs	r3, #64	; 0x40
 8009e14:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009e16:	2360      	movs	r3, #96	; 0x60
 8009e18:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e22:	2301      	movs	r3, #1
 8009e24:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f107 0208 	add.w	r2, r7, #8
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 ffff 	bl	800be34 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f002 f9f3 	bl	800c226 <SDMMC_CmdStatusRegister>
 8009e40:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d02b      	beq.n	8009ea0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	e069      	b.n	8009f28 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d013      	beq.n	8009e8a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009e62:	2300      	movs	r3, #0
 8009e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e66:	e00d      	b.n	8009e84 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f001 ff59 	bl	800bd24 <SDMMC_ReadFIFO>
 8009e72:	4602      	mov	r2, r0
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	601a      	str	r2, [r3, #0]
        pData++;
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8009e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e80:	3301      	adds	r3, #1
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e86:	2b07      	cmp	r3, #7
 8009e88:	d9ee      	bls.n	8009e68 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009e8a:	f7f7 ffd5 	bl	8001e38 <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e98:	d102      	bne.n	8009ea0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e9e:	e043      	b.n	8009f28 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0d2      	beq.n	8009e54 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ebc:	2308      	movs	r3, #8
 8009ebe:	e033      	b.n	8009f28 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ece:	2302      	movs	r3, #2
 8009ed0:	e02a      	b.n	8009f28 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed8:	f003 0320 	and.w	r3, r3, #32
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d017      	beq.n	8009f10 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	e021      	b.n	8009f28 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f001 ff1b 	bl	800bd24 <SDMMC_ReadFIFO>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	601a      	str	r2, [r3, #0]
    pData++;
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009efa:	f7f7 ff9d 	bl	8001e38 <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f08:	d102      	bne.n	8009f10 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f0e:	e00b      	b.n	8009f28 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1e2      	bne.n	8009ee4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a03      	ldr	r2, [pc, #12]	; (8009f30 <SD_SendSDStatus+0x19c>)
 8009f24:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3730      	adds	r7, #48	; 0x30
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	18000f3a 	.word	0x18000f3a

08009f34 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d102      	bne.n	8009f4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f48:	e018      	b.n	8009f7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f52:	041b      	lsls	r3, r3, #16
 8009f54:	4619      	mov	r1, r3
 8009f56:	4610      	mov	r0, r2
 8009f58:	f002 f942 	bl	800c1e0 <SDMMC_CmdSendStatus>
 8009f5c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	e009      	b.n	8009f7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 ff4d 	bl	800be0e <SDMMC_GetResponse>
 8009f74:	4602      	mov	r2, r0
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	2300      	movs	r3, #0
 8009f92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f001 ff37 	bl	800be0e <SDMMC_GetResponse>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009faa:	d102      	bne.n	8009fb2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fb0:	e02f      	b.n	800a012 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fb2:	f107 030c 	add.w	r3, r7, #12
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f879 	bl	800a0b0 <SD_FindSCR>
 8009fbe:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	e023      	b.n	800a012 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d01c      	beq.n	800a00e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fdc:	041b      	lsls	r3, r3, #16
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	f002 f814 	bl	800c00e <SDMMC_CmdAppCommand>
 8009fe6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	e00f      	b.n	800a012 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2102      	movs	r1, #2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f002 f84b 	bl	800c094 <SDMMC_CmdBusWidth>
 8009ffe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	e003      	b.n	800a012 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a00a:	2300      	movs	r3, #0
 800a00c:	e001      	b.n	800a012 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a00e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a012:	4618      	mov	r0, r3
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b086      	sub	sp, #24
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2100      	movs	r1, #0
 800a030:	4618      	mov	r0, r3
 800a032:	f001 feec 	bl	800be0e <SDMMC_GetResponse>
 800a036:	4603      	mov	r3, r0
 800a038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a03c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a040:	d102      	bne.n	800a048 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a046:	e02f      	b.n	800a0a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a048:	f107 030c 	add.w	r3, r7, #12
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f82e 	bl	800a0b0 <SD_FindSCR>
 800a054:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	e023      	b.n	800a0a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d01c      	beq.n	800a0a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a072:	041b      	lsls	r3, r3, #16
 800a074:	4619      	mov	r1, r3
 800a076:	4610      	mov	r0, r2
 800a078:	f001 ffc9 	bl	800c00e <SDMMC_CmdAppCommand>
 800a07c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	e00f      	b.n	800a0a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2100      	movs	r1, #0
 800a08e:	4618      	mov	r0, r3
 800a090:	f002 f800 	bl	800c094 <SDMMC_CmdBusWidth>
 800a094:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	e003      	b.n	800a0a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	e001      	b.n	800a0a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3718      	adds	r7, #24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08e      	sub	sp, #56	; 0x38
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a0ba:	f7f7 febd 	bl	8001e38 <HAL_GetTick>
 800a0be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60bb      	str	r3, [r7, #8]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2108      	movs	r1, #8
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f001 fed8 	bl	800be8c <SDMMC_CmdBlockLength>
 800a0dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	e0ad      	b.n	800a244 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f0:	041b      	lsls	r3, r3, #16
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	f001 ff8a 	bl	800c00e <SDMMC_CmdAppCommand>
 800a0fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	e09e      	b.n	800a244 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a106:	f04f 33ff 	mov.w	r3, #4294967295
 800a10a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a10c:	2308      	movs	r3, #8
 800a10e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a110:	2330      	movs	r3, #48	; 0x30
 800a112:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a114:	2302      	movs	r3, #2
 800a116:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a118:	2300      	movs	r3, #0
 800a11a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f107 0210 	add.w	r2, r7, #16
 800a128:	4611      	mov	r1, r2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 fe82 	bl	800be34 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4618      	mov	r0, r3
 800a136:	f001 ffd0 	bl	800c0da <SDMMC_CmdSendSCR>
 800a13a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d027      	beq.n	800a192 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	e07e      	b.n	800a244 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d113      	bne.n	800a17c <SD_FindSCR+0xcc>
 800a154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a156:	2b00      	cmp	r3, #0
 800a158:	d110      	bne.n	800a17c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4618      	mov	r0, r3
 800a160:	f001 fde0 	bl	800bd24 <SDMMC_ReadFIFO>
 800a164:	4603      	mov	r3, r0
 800a166:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f001 fdd9 	bl	800bd24 <SDMMC_ReadFIFO>
 800a172:	4603      	mov	r3, r0
 800a174:	60fb      	str	r3, [r7, #12]
      index++;
 800a176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a178:	3301      	adds	r3, #1
 800a17a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a17c:	f7f7 fe5c 	bl	8001e38 <HAL_GetTick>
 800a180:	4602      	mov	r2, r0
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18a:	d102      	bne.n	800a192 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a18c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a190:	e058      	b.n	800a244 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a198:	f240 532a 	movw	r3, #1322	; 0x52a
 800a19c:	4013      	ands	r3, r2
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0d1      	beq.n	800a146 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a8:	f003 0308 	and.w	r3, r3, #8
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2208      	movs	r2, #8
 800a1b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a1b8:	2308      	movs	r3, #8
 800a1ba:	e043      	b.n	800a244 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d005      	beq.n	800a1d6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	e036      	b.n	800a244 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1dc:	f003 0320 	and.w	r3, r3, #32
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d005      	beq.n	800a1f0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2220      	movs	r2, #32
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a1ec:	2320      	movs	r3, #32
 800a1ee:	e029      	b.n	800a244 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a15      	ldr	r2, [pc, #84]	; (800a24c <SD_FindSCR+0x19c>)
 800a1f6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	061a      	lsls	r2, r3, #24
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	021b      	lsls	r3, r3, #8
 800a200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a204:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	0a1b      	lsrs	r3, r3, #8
 800a20a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800a20e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	0e1b      	lsrs	r3, r3, #24
 800a214:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a218:	601a      	str	r2, [r3, #0]
    scr++;
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21c:	3304      	adds	r3, #4
 800a21e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	061a      	lsls	r2, r3, #24
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	021b      	lsls	r3, r3, #8
 800a228:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a22c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	0a1b      	lsrs	r3, r3, #8
 800a232:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800a236:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	0e1b      	lsrs	r3, r3, #24
 800a23c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a240:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3738      	adds	r7, #56	; 0x38
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	18000f3a 	.word	0x18000f3a

0800a250 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a262:	2b1f      	cmp	r3, #31
 800a264:	d936      	bls.n	800a2d4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a266:	2300      	movs	r3, #0
 800a268:	617b      	str	r3, [r7, #20]
 800a26a:	e027      	b.n	800a2bc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4618      	mov	r0, r3
 800a272:	f001 fd57 	bl	800bd24 <SDMMC_ReadFIFO>
 800a276:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	3301      	adds	r3, #1
 800a284:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	0a1b      	lsrs	r3, r3, #8
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	3301      	adds	r3, #1
 800a294:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	0c1b      	lsrs	r3, r3, #16
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	0e1b      	lsrs	r3, r3, #24
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	2b07      	cmp	r3, #7
 800a2c0:	d9d4      	bls.n	800a26c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2cc:	f1a3 0220 	sub.w	r2, r3, #32
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800a2d4:	bf00      	nop
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	2b1f      	cmp	r3, #31
 800a2f0:	d93a      	bls.n	800a368 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]
 800a2f6:	e02b      	b.n	800a350 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	3301      	adds	r3, #1
 800a302:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	021a      	lsls	r2, r3, #8
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	3301      	adds	r3, #1
 800a314:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	041a      	lsls	r2, r3, #16
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4313      	orrs	r3, r2
 800a320:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	3301      	adds	r3, #1
 800a326:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	061a      	lsls	r2, r3, #24
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	3301      	adds	r3, #1
 800a338:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f107 020c 	add.w	r2, r7, #12
 800a342:	4611      	mov	r1, r2
 800a344:	4618      	mov	r0, r3
 800a346:	f001 fcfa 	bl	800bd3e <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	3301      	adds	r3, #1
 800a34e:	617b      	str	r3, [r7, #20]
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2b07      	cmp	r3, #7
 800a354:	d9d0      	bls.n	800a2f8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	f1a3 0220 	sub.w	r2, r3, #32
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	621a      	str	r2, [r3, #32]
  }
}
 800a368:	bf00      	nop
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <HAL_SDEx_Read_DMALnkLstBufCpltCallback>:
  * @brief Read DMA Linked list node Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMALnkLstBufCpltCallback(SD_HandleTypeDef *hsd)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMALnkLstBufCpltCallback can be implemented in the user file
   */
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <HAL_SDEx_Write_DMALnkLstBufCpltCallback>:
  * @brief Read DMA Linked list node Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMALnkLstBufCpltCallback(SD_HandleTypeDef *hsd)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMALnkLstBufCpltCallback can be implemented in the user file
   */
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e049      	b.n	800a43e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d106      	bne.n	800a3c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f841 	bl	800a446 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	f000 fa58 	bl	800a88c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a446:	b480      	push	{r7}
 800a448:	b083      	sub	sp, #12
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a44e:	bf00      	nop
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
	...

0800a45c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d001      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e072      	b.n	800a55a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2202      	movs	r2, #2
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f042 0201 	orr.w	r2, r2, #1
 800a48a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a35      	ldr	r2, [pc, #212]	; (800a568 <HAL_TIM_Base_Start_IT+0x10c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d040      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a34      	ldr	r2, [pc, #208]	; (800a56c <HAL_TIM_Base_Start_IT+0x110>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d03b      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4a8:	d036      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4b2:	d031      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a2d      	ldr	r2, [pc, #180]	; (800a570 <HAL_TIM_Base_Start_IT+0x114>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d02c      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a2c      	ldr	r2, [pc, #176]	; (800a574 <HAL_TIM_Base_Start_IT+0x118>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d027      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a2a      	ldr	r2, [pc, #168]	; (800a578 <HAL_TIM_Base_Start_IT+0x11c>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d022      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a29      	ldr	r2, [pc, #164]	; (800a57c <HAL_TIM_Base_Start_IT+0x120>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d01d      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a27      	ldr	r2, [pc, #156]	; (800a580 <HAL_TIM_Base_Start_IT+0x124>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d018      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a26      	ldr	r2, [pc, #152]	; (800a584 <HAL_TIM_Base_Start_IT+0x128>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d013      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a24      	ldr	r2, [pc, #144]	; (800a588 <HAL_TIM_Base_Start_IT+0x12c>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d00e      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a23      	ldr	r2, [pc, #140]	; (800a58c <HAL_TIM_Base_Start_IT+0x130>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d009      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a21      	ldr	r2, [pc, #132]	; (800a590 <HAL_TIM_Base_Start_IT+0x134>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d004      	beq.n	800a518 <HAL_TIM_Base_Start_IT+0xbc>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a20      	ldr	r2, [pc, #128]	; (800a594 <HAL_TIM_Base_Start_IT+0x138>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d115      	bne.n	800a544 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	689a      	ldr	r2, [r3, #8]
 800a51e:	4b1e      	ldr	r3, [pc, #120]	; (800a598 <HAL_TIM_Base_Start_IT+0x13c>)
 800a520:	4013      	ands	r3, r2
 800a522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b06      	cmp	r3, #6
 800a528:	d015      	beq.n	800a556 <HAL_TIM_Base_Start_IT+0xfa>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a530:	d011      	beq.n	800a556 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f042 0201 	orr.w	r2, r2, #1
 800a540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a542:	e008      	b.n	800a556 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f042 0201 	orr.w	r2, r2, #1
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	e000      	b.n	800a558 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	40012c00 	.word	0x40012c00
 800a56c:	50012c00 	.word	0x50012c00
 800a570:	40000400 	.word	0x40000400
 800a574:	50000400 	.word	0x50000400
 800a578:	40000800 	.word	0x40000800
 800a57c:	50000800 	.word	0x50000800
 800a580:	40000c00 	.word	0x40000c00
 800a584:	50000c00 	.word	0x50000c00
 800a588:	40013400 	.word	0x40013400
 800a58c:	50013400 	.word	0x50013400
 800a590:	40014000 	.word	0x40014000
 800a594:	50014000 	.word	0x50014000
 800a598:	00010007 	.word	0x00010007

0800a59c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d020      	beq.n	800a600 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f003 0302 	and.w	r3, r3, #2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d01b      	beq.n	800a600 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f06f 0202 	mvn.w	r2, #2
 800a5d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	f003 0303 	and.w	r3, r3, #3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f931 	bl	800a84e <HAL_TIM_IC_CaptureCallback>
 800a5ec:	e005      	b.n	800a5fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f923 	bl	800a83a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f934 	bl	800a862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f003 0304 	and.w	r3, r3, #4
 800a606:	2b00      	cmp	r3, #0
 800a608:	d020      	beq.n	800a64c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b00      	cmp	r3, #0
 800a612:	d01b      	beq.n	800a64c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f06f 0204 	mvn.w	r2, #4
 800a61c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2202      	movs	r2, #2
 800a622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f90b 	bl	800a84e <HAL_TIM_IC_CaptureCallback>
 800a638:	e005      	b.n	800a646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f8fd 	bl	800a83a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f90e 	bl	800a862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f003 0308 	and.w	r3, r3, #8
 800a652:	2b00      	cmp	r3, #0
 800a654:	d020      	beq.n	800a698 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f003 0308 	and.w	r3, r3, #8
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01b      	beq.n	800a698 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f06f 0208 	mvn.w	r2, #8
 800a668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2204      	movs	r2, #4
 800a66e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	f003 0303 	and.w	r3, r3, #3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f8e5 	bl	800a84e <HAL_TIM_IC_CaptureCallback>
 800a684:	e005      	b.n	800a692 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f8d7 	bl	800a83a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f8e8 	bl	800a862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f003 0310 	and.w	r3, r3, #16
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d020      	beq.n	800a6e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f003 0310 	and.w	r3, r3, #16
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d01b      	beq.n	800a6e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f06f 0210 	mvn.w	r2, #16
 800a6b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2208      	movs	r2, #8
 800a6ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f8bf 	bl	800a84e <HAL_TIM_IC_CaptureCallback>
 800a6d0:	e005      	b.n	800a6de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f8b1 	bl	800a83a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 f8c2 	bl	800a862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00c      	beq.n	800a708 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f003 0301 	and.w	r3, r3, #1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d007      	beq.n	800a708 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f06f 0201 	mvn.w	r2, #1
 800a700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7f6 fb88 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d104      	bne.n	800a71c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00c      	beq.n	800a736 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a722:	2b00      	cmp	r3, #0
 800a724:	d007      	beq.n	800a736 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800a72e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f9af 	bl	800aa94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00c      	beq.n	800a75a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a746:	2b00      	cmp	r3, #0
 800a748:	d007      	beq.n	800a75a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f9a7 	bl	800aaa8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00c      	beq.n	800a77e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d007      	beq.n	800a77e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f87c 	bl	800a876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	f003 0320 	and.w	r3, r3, #32
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00c      	beq.n	800a7a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f003 0320 	and.w	r3, r3, #32
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f06f 0220 	mvn.w	r2, #32
 800a79a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f96f 	bl	800aa80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00c      	beq.n	800a7c6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d007      	beq.n	800a7c6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a7be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f97b 	bl	800aabc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00c      	beq.n	800a7ea <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d007      	beq.n	800a7ea <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a7e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f973 	bl	800aad0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00c      	beq.n	800a80e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d007      	beq.n	800a80e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f96b 	bl	800aae4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00c      	beq.n	800a832 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d007      	beq.n	800a832 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a82a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f963 	bl	800aaf8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a832:	bf00      	nop
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a842:	bf00      	nop
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a84e:	b480      	push	{r7}
 800a850:	b083      	sub	sp, #12
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a856:	bf00      	nop
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a87e:	bf00      	nop
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
	...

0800a88c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a68      	ldr	r2, [pc, #416]	; (800aa40 <TIM_Base_SetConfig+0x1b4>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d02b      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a67      	ldr	r2, [pc, #412]	; (800aa44 <TIM_Base_SetConfig+0x1b8>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d027      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8b2:	d023      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8ba:	d01f      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a62      	ldr	r2, [pc, #392]	; (800aa48 <TIM_Base_SetConfig+0x1bc>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d01b      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a61      	ldr	r2, [pc, #388]	; (800aa4c <TIM_Base_SetConfig+0x1c0>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d017      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a60      	ldr	r2, [pc, #384]	; (800aa50 <TIM_Base_SetConfig+0x1c4>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d013      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a5f      	ldr	r2, [pc, #380]	; (800aa54 <TIM_Base_SetConfig+0x1c8>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d00f      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a5e      	ldr	r2, [pc, #376]	; (800aa58 <TIM_Base_SetConfig+0x1cc>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d00b      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a5d      	ldr	r2, [pc, #372]	; (800aa5c <TIM_Base_SetConfig+0x1d0>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d007      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a5c      	ldr	r2, [pc, #368]	; (800aa60 <TIM_Base_SetConfig+0x1d4>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d003      	beq.n	800a8fc <TIM_Base_SetConfig+0x70>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a5b      	ldr	r2, [pc, #364]	; (800aa64 <TIM_Base_SetConfig+0x1d8>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d108      	bne.n	800a90e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a4b      	ldr	r2, [pc, #300]	; (800aa40 <TIM_Base_SetConfig+0x1b4>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d043      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a4a      	ldr	r2, [pc, #296]	; (800aa44 <TIM_Base_SetConfig+0x1b8>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d03f      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a924:	d03b      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a92c:	d037      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a45      	ldr	r2, [pc, #276]	; (800aa48 <TIM_Base_SetConfig+0x1bc>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d033      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a44      	ldr	r2, [pc, #272]	; (800aa4c <TIM_Base_SetConfig+0x1c0>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d02f      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a43      	ldr	r2, [pc, #268]	; (800aa50 <TIM_Base_SetConfig+0x1c4>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d02b      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a42      	ldr	r2, [pc, #264]	; (800aa54 <TIM_Base_SetConfig+0x1c8>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d027      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a41      	ldr	r2, [pc, #260]	; (800aa58 <TIM_Base_SetConfig+0x1cc>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d023      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a40      	ldr	r2, [pc, #256]	; (800aa5c <TIM_Base_SetConfig+0x1d0>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d01f      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a3f      	ldr	r2, [pc, #252]	; (800aa60 <TIM_Base_SetConfig+0x1d4>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d01b      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a3e      	ldr	r2, [pc, #248]	; (800aa64 <TIM_Base_SetConfig+0x1d8>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d017      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a3d      	ldr	r2, [pc, #244]	; (800aa68 <TIM_Base_SetConfig+0x1dc>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d013      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a3c      	ldr	r2, [pc, #240]	; (800aa6c <TIM_Base_SetConfig+0x1e0>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d00f      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a3b      	ldr	r2, [pc, #236]	; (800aa70 <TIM_Base_SetConfig+0x1e4>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d00b      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a3a      	ldr	r2, [pc, #232]	; (800aa74 <TIM_Base_SetConfig+0x1e8>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d007      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a39      	ldr	r2, [pc, #228]	; (800aa78 <TIM_Base_SetConfig+0x1ec>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d003      	beq.n	800a99e <TIM_Base_SetConfig+0x112>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a38      	ldr	r2, [pc, #224]	; (800aa7c <TIM_Base_SetConfig+0x1f0>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d108      	bne.n	800a9b0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a1a      	ldr	r2, [pc, #104]	; (800aa40 <TIM_Base_SetConfig+0x1b4>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d023      	beq.n	800aa24 <TIM_Base_SetConfig+0x198>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a19      	ldr	r2, [pc, #100]	; (800aa44 <TIM_Base_SetConfig+0x1b8>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d01f      	beq.n	800aa24 <TIM_Base_SetConfig+0x198>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a1e      	ldr	r2, [pc, #120]	; (800aa60 <TIM_Base_SetConfig+0x1d4>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d01b      	beq.n	800aa24 <TIM_Base_SetConfig+0x198>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a1d      	ldr	r2, [pc, #116]	; (800aa64 <TIM_Base_SetConfig+0x1d8>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d017      	beq.n	800aa24 <TIM_Base_SetConfig+0x198>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a1c      	ldr	r2, [pc, #112]	; (800aa68 <TIM_Base_SetConfig+0x1dc>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d013      	beq.n	800aa24 <TIM_Base_SetConfig+0x198>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a1b      	ldr	r2, [pc, #108]	; (800aa6c <TIM_Base_SetConfig+0x1e0>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d00f      	beq.n	800aa24 <TIM_Base_SetConfig+0x198>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a1a      	ldr	r2, [pc, #104]	; (800aa70 <TIM_Base_SetConfig+0x1e4>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d00b      	beq.n	800aa24 <TIM_Base_SetConfig+0x198>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a19      	ldr	r2, [pc, #100]	; (800aa74 <TIM_Base_SetConfig+0x1e8>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d007      	beq.n	800aa24 <TIM_Base_SetConfig+0x198>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a18      	ldr	r2, [pc, #96]	; (800aa78 <TIM_Base_SetConfig+0x1ec>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d003      	beq.n	800aa24 <TIM_Base_SetConfig+0x198>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a17      	ldr	r2, [pc, #92]	; (800aa7c <TIM_Base_SetConfig+0x1f0>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d103      	bne.n	800aa2c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	691a      	ldr	r2, [r3, #16]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	615a      	str	r2, [r3, #20]
}
 800aa32:	bf00      	nop
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	40012c00 	.word	0x40012c00
 800aa44:	50012c00 	.word	0x50012c00
 800aa48:	40000400 	.word	0x40000400
 800aa4c:	50000400 	.word	0x50000400
 800aa50:	40000800 	.word	0x40000800
 800aa54:	50000800 	.word	0x50000800
 800aa58:	40000c00 	.word	0x40000c00
 800aa5c:	50000c00 	.word	0x50000c00
 800aa60:	40013400 	.word	0x40013400
 800aa64:	50013400 	.word	0x50013400
 800aa68:	40014000 	.word	0x40014000
 800aa6c:	50014000 	.word	0x50014000
 800aa70:	40014400 	.word	0x40014400
 800aa74:	50014400 	.word	0x50014400
 800aa78:	40014800 	.word	0x40014800
 800aa7c:	50014800 	.word	0x50014800

0800aa80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e042      	b.n	800aba4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d106      	bne.n	800ab36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7f6 fea3 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2224      	movs	r2, #36	; 0x24
 800ab3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f022 0201 	bic.w	r2, r2, #1
 800ab4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d002      	beq.n	800ab5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fd48 	bl	800b5ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fba3 	bl	800b2a8 <UART_SetConfig>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d101      	bne.n	800ab6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e01b      	b.n	800aba4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	689a      	ldr	r2, [r3, #8]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f042 0201 	orr.w	r2, r2, #1
 800ab9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fdc7 	bl	800b730 <UART_CheckIdleState>
 800aba2:	4603      	mov	r3, r0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b08a      	sub	sp, #40	; 0x28
 800abb0:	af02      	add	r7, sp, #8
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	603b      	str	r3, [r7, #0]
 800abb8:	4613      	mov	r3, r2
 800abba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc2:	2b20      	cmp	r3, #32
 800abc4:	f040 808b 	bne.w	800acde <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d002      	beq.n	800abd4 <HAL_UART_Transmit+0x28>
 800abce:	88fb      	ldrh	r3, [r7, #6]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d101      	bne.n	800abd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e083      	b.n	800ace0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe2:	2b80      	cmp	r3, #128	; 0x80
 800abe4:	d107      	bne.n	800abf6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689a      	ldr	r2, [r3, #8]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abf4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2221      	movs	r2, #33	; 0x21
 800ac02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac06:	f7f7 f917 	bl	8001e38 <HAL_GetTick>
 800ac0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	88fa      	ldrh	r2, [r7, #6]
 800ac10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	88fa      	ldrh	r2, [r7, #6]
 800ac18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac24:	d108      	bne.n	800ac38 <HAL_UART_Transmit+0x8c>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d104      	bne.n	800ac38 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	61bb      	str	r3, [r7, #24]
 800ac36:	e003      	b.n	800ac40 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac40:	e030      	b.n	800aca4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	2180      	movs	r1, #128	; 0x80
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 fe19 	bl	800b884 <UART_WaitOnFlagUntilTimeout>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d005      	beq.n	800ac64 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2220      	movs	r2, #32
 800ac5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ac60:	2303      	movs	r3, #3
 800ac62:	e03d      	b.n	800ace0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10b      	bne.n	800ac82 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	3302      	adds	r3, #2
 800ac7e:	61bb      	str	r3, [r7, #24]
 800ac80:	e007      	b.n	800ac92 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	781a      	ldrb	r2, [r3, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800acaa:	b29b      	uxth	r3, r3
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1c8      	bne.n	800ac42 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2200      	movs	r2, #0
 800acb8:	2140      	movs	r1, #64	; 0x40
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 fde2 	bl	800b884 <UART_WaitOnFlagUntilTimeout>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d005      	beq.n	800acd2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2220      	movs	r2, #32
 800acca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800acce:	2303      	movs	r3, #3
 800acd0:	e006      	b.n	800ace0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2220      	movs	r2, #32
 800acd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	e000      	b.n	800ace0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800acde:	2302      	movs	r3, #2
  }
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3720      	adds	r7, #32
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b0ae      	sub	sp, #184	; 0xb8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	69db      	ldr	r3, [r3, #28]
 800acf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad12:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad16:	4013      	ands	r3, r2
 800ad18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800ad1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d11b      	bne.n	800ad5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ad28:	f003 0320 	and.w	r3, r3, #32
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d015      	beq.n	800ad5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ad34:	f003 0320 	and.w	r3, r3, #32
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d105      	bne.n	800ad48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d009      	beq.n	800ad5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 827e 	beq.w	800b24e <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	4798      	blx	r3
      }
      return;
 800ad5a:	e278      	b.n	800b24e <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 80fd 	beq.w	800af60 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ad6a:	4b7a      	ldr	r3, [pc, #488]	; (800af54 <HAL_UART_IRQHandler+0x26c>)
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad76:	4b78      	ldr	r3, [pc, #480]	; (800af58 <HAL_UART_IRQHandler+0x270>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 80f0 	beq.w	800af60 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d011      	beq.n	800adb0 <HAL_UART_IRQHandler+0xc8>
 800ad8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ad90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00b      	beq.n	800adb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ada6:	f043 0201 	orr.w	r2, r3, #1
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800adb4:	f003 0302 	and.w	r3, r3, #2
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d011      	beq.n	800ade0 <HAL_UART_IRQHandler+0xf8>
 800adbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adc0:	f003 0301 	and.w	r3, r3, #1
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2202      	movs	r2, #2
 800adce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800add6:	f043 0204 	orr.w	r2, r3, #4
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ade0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d011      	beq.n	800ae10 <HAL_UART_IRQHandler+0x128>
 800adec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00b      	beq.n	800ae10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2204      	movs	r2, #4
 800adfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae06:	f043 0202 	orr.w	r2, r3, #2
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ae14:	f003 0308 	and.w	r3, r3, #8
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d017      	beq.n	800ae4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ae20:	f003 0320 	and.w	r3, r3, #32
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d105      	bne.n	800ae34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ae2c:	4b49      	ldr	r3, [pc, #292]	; (800af54 <HAL_UART_IRQHandler+0x26c>)
 800ae2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00b      	beq.n	800ae4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2208      	movs	r2, #8
 800ae3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae42:	f043 0208 	orr.w	r2, r3, #8
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ae50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d012      	beq.n	800ae7e <HAL_UART_IRQHandler+0x196>
 800ae58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ae5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00c      	beq.n	800ae7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae74:	f043 0220 	orr.w	r2, r3, #32
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f000 81e4 	beq.w	800b252 <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ae8e:	f003 0320 	and.w	r3, r3, #32
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d013      	beq.n	800aebe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ae9a:	f003 0320 	and.w	r3, r3, #32
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d105      	bne.n	800aeae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d007      	beq.n	800aebe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d003      	beq.n	800aebe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed2:	2b40      	cmp	r3, #64	; 0x40
 800aed4:	d005      	beq.n	800aee2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aed6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aeda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d02e      	beq.n	800af40 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 fd35 	bl	800b952 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef2:	2b40      	cmp	r3, #64	; 0x40
 800aef4:	d120      	bne.n	800af38 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d017      	beq.n	800af30 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af06:	4a15      	ldr	r2, [pc, #84]	; (800af5c <HAL_UART_IRQHandler+0x274>)
 800af08:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af10:	4618      	mov	r0, r3
 800af12:	f7f8 fdd9 	bl	8003ac8 <HAL_DMA_Abort_IT>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d019      	beq.n	800af50 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800af2a:	4610      	mov	r0, r2
 800af2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af2e:	e00f      	b.n	800af50 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f9a3 	bl	800b27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af36:	e00b      	b.n	800af50 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f99f 	bl	800b27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af3e:	e007      	b.n	800af50 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 f99b 	bl	800b27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800af4e:	e180      	b.n	800b252 <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af50:	bf00      	nop
    return;
 800af52:	e17e      	b.n	800b252 <HAL_UART_IRQHandler+0x56a>
 800af54:	10000001 	.word	0x10000001
 800af58:	04000120 	.word	0x04000120
 800af5c:	0800ba1f 	.word	0x0800ba1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af64:	2b01      	cmp	r3, #1
 800af66:	f040 8129 	bne.w	800b1bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800af6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800af6e:	f003 0310 	and.w	r3, r3, #16
 800af72:	2b00      	cmp	r3, #0
 800af74:	f000 8122 	beq.w	800b1bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800af78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800af7c:	f003 0310 	and.w	r3, r3, #16
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 811b 	beq.w	800b1bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2210      	movs	r2, #16
 800af8c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af98:	2b40      	cmp	r3, #64	; 0x40
 800af9a:	f040 8091 	bne.w	800b0c0 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afa8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800afac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 8150 	beq.w	800b256 <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800afbc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800afc0:	429a      	cmp	r2, r3
 800afc2:	f080 8148 	bcs.w	800b256 <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800afcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd8:	2b81      	cmp	r3, #129	; 0x81
 800afda:	d060      	beq.n	800b09e <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afe4:	e853 3f00 	ldrex	r3, [r3]
 800afe8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800afea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	461a      	mov	r2, r3
 800affa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800affe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b002:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b004:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b006:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b00a:	e841 2300 	strex	r3, r2, [r1]
 800b00e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1e2      	bne.n	800afdc <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3308      	adds	r3, #8
 800b01c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b020:	e853 3f00 	ldrex	r3, [r3]
 800b024:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b028:	f023 0301 	bic.w	r3, r3, #1
 800b02c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	3308      	adds	r3, #8
 800b036:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b03a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b03c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b040:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b042:	e841 2300 	strex	r3, r2, [r1]
 800b046:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1e3      	bne.n	800b016 <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2220      	movs	r2, #32
 800b052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b064:	e853 3f00 	ldrex	r3, [r3]
 800b068:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b06c:	f023 0310 	bic.w	r3, r3, #16
 800b070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	461a      	mov	r2, r3
 800b07a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b07e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b080:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b082:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b084:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b086:	e841 2300 	strex	r3, r2, [r1]
 800b08a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b08c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1e4      	bne.n	800b05c <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b098:	4618      	mov	r0, r3
 800b09a:	f7f8 fc99 	bl	80039d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2202      	movs	r2, #2
 800b0a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f8e9 	bl	800b290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b0be:	e0ca      	b.n	800b256 <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 80bc 	beq.w	800b25a <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 800b0e2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 80b7 	beq.w	800b25a <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f4:	e853 3f00 	ldrex	r3, [r3]
 800b0f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	461a      	mov	r2, r3
 800b10a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b10e:	647b      	str	r3, [r7, #68]	; 0x44
 800b110:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1e4      	bne.n	800b0ec <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3308      	adds	r3, #8
 800b128:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	e853 3f00 	ldrex	r3, [r3]
 800b130:	623b      	str	r3, [r7, #32]
   return(result);
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b138:	f023 0301 	bic.w	r3, r3, #1
 800b13c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3308      	adds	r3, #8
 800b146:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b14a:	633a      	str	r2, [r7, #48]	; 0x30
 800b14c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e1      	bne.n	800b122 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2220      	movs	r2, #32
 800b162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	e853 3f00 	ldrex	r3, [r3]
 800b17e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f023 0310 	bic.w	r3, r3, #16
 800b186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b194:	61fb      	str	r3, [r7, #28]
 800b196:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	69b9      	ldr	r1, [r7, #24]
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	e841 2300 	strex	r3, r2, [r1]
 800b1a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1e4      	bne.n	800b172 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b1ae:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f86b 	bl	800b290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1ba:	e04e      	b.n	800b25a <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b1bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b1c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d014      	beq.n	800b1f2 <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b1c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d105      	bne.n	800b1e0 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b1d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d008      	beq.n	800b1f2 <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d03a      	beq.n	800b25e <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	4798      	blx	r3
    }
    return;
 800b1f0:	e035      	b.n	800b25e <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d009      	beq.n	800b212 <HAL_UART_IRQHandler+0x52a>
 800b1fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fc1d 	bl	800ba4a <UART_EndTransmit_IT>
    return;
 800b210:	e026      	b.n	800b260 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d009      	beq.n	800b232 <HAL_UART_IRQHandler+0x54a>
 800b21e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b222:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fc42 	bl	800bab4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b230:	e016      	b.n	800b260 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d010      	beq.n	800b260 <HAL_UART_IRQHandler+0x578>
 800b23e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b242:	2b00      	cmp	r3, #0
 800b244:	da0c      	bge.n	800b260 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fc2a 	bl	800baa0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b24c:	e008      	b.n	800b260 <HAL_UART_IRQHandler+0x578>
      return;
 800b24e:	bf00      	nop
 800b250:	e006      	b.n	800b260 <HAL_UART_IRQHandler+0x578>
    return;
 800b252:	bf00      	nop
 800b254:	e004      	b.n	800b260 <HAL_UART_IRQHandler+0x578>
      return;
 800b256:	bf00      	nop
 800b258:	e002      	b.n	800b260 <HAL_UART_IRQHandler+0x578>
      return;
 800b25a:	bf00      	nop
 800b25c:	e000      	b.n	800b260 <HAL_UART_IRQHandler+0x578>
    return;
 800b25e:	bf00      	nop
  }
}
 800b260:	37b8      	adds	r7, #184	; 0xb8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop

0800b268 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2ac:	b094      	sub	sp, #80	; 0x50
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	4b7e      	ldr	r3, [pc, #504]	; (800b4b8 <UART_SetConfig+0x210>)
 800b2be:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	431a      	orrs	r2, r3
 800b2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	431a      	orrs	r2, r3
 800b2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d2:	69db      	ldr	r3, [r3, #28]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4977      	ldr	r1, [pc, #476]	; (800b4bc <UART_SetConfig+0x214>)
 800b2e0:	4019      	ands	r1, r3
 800b2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e8:	430b      	orrs	r3, r1
 800b2ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f8:	68d9      	ldr	r1, [r3, #12]
 800b2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	ea40 0301 	orr.w	r3, r0, r1
 800b302:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	4b6a      	ldr	r3, [pc, #424]	; (800b4b8 <UART_SetConfig+0x210>)
 800b310:	429a      	cmp	r2, r3
 800b312:	d009      	beq.n	800b328 <UART_SetConfig+0x80>
 800b314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	4b69      	ldr	r3, [pc, #420]	; (800b4c0 <UART_SetConfig+0x218>)
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d004      	beq.n	800b328 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b320:	6a1a      	ldr	r2, [r3, #32]
 800b322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b324:	4313      	orrs	r3, r2
 800b326:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800b332:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b33c:	430b      	orrs	r3, r1
 800b33e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b346:	f023 000f 	bic.w	r0, r3, #15
 800b34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	ea40 0301 	orr.w	r3, r0, r1
 800b356:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	4b59      	ldr	r3, [pc, #356]	; (800b4c4 <UART_SetConfig+0x21c>)
 800b35e:	429a      	cmp	r2, r3
 800b360:	d102      	bne.n	800b368 <UART_SetConfig+0xc0>
 800b362:	2301      	movs	r3, #1
 800b364:	64bb      	str	r3, [r7, #72]	; 0x48
 800b366:	e029      	b.n	800b3bc <UART_SetConfig+0x114>
 800b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	4b56      	ldr	r3, [pc, #344]	; (800b4c8 <UART_SetConfig+0x220>)
 800b36e:	429a      	cmp	r2, r3
 800b370:	d102      	bne.n	800b378 <UART_SetConfig+0xd0>
 800b372:	2302      	movs	r3, #2
 800b374:	64bb      	str	r3, [r7, #72]	; 0x48
 800b376:	e021      	b.n	800b3bc <UART_SetConfig+0x114>
 800b378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	4b53      	ldr	r3, [pc, #332]	; (800b4cc <UART_SetConfig+0x224>)
 800b37e:	429a      	cmp	r2, r3
 800b380:	d102      	bne.n	800b388 <UART_SetConfig+0xe0>
 800b382:	2304      	movs	r3, #4
 800b384:	64bb      	str	r3, [r7, #72]	; 0x48
 800b386:	e019      	b.n	800b3bc <UART_SetConfig+0x114>
 800b388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	4b50      	ldr	r3, [pc, #320]	; (800b4d0 <UART_SetConfig+0x228>)
 800b38e:	429a      	cmp	r2, r3
 800b390:	d102      	bne.n	800b398 <UART_SetConfig+0xf0>
 800b392:	2308      	movs	r3, #8
 800b394:	64bb      	str	r3, [r7, #72]	; 0x48
 800b396:	e011      	b.n	800b3bc <UART_SetConfig+0x114>
 800b398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	4b4d      	ldr	r3, [pc, #308]	; (800b4d4 <UART_SetConfig+0x22c>)
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d102      	bne.n	800b3a8 <UART_SetConfig+0x100>
 800b3a2:	2310      	movs	r3, #16
 800b3a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3a6:	e009      	b.n	800b3bc <UART_SetConfig+0x114>
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	4b42      	ldr	r3, [pc, #264]	; (800b4b8 <UART_SetConfig+0x210>)
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d102      	bne.n	800b3b8 <UART_SetConfig+0x110>
 800b3b2:	2320      	movs	r3, #32
 800b3b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3b6:	e001      	b.n	800b3bc <UART_SetConfig+0x114>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	4b3d      	ldr	r3, [pc, #244]	; (800b4b8 <UART_SetConfig+0x210>)
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d005      	beq.n	800b3d2 <UART_SetConfig+0x12a>
 800b3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	4b3d      	ldr	r3, [pc, #244]	; (800b4c0 <UART_SetConfig+0x218>)
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	f040 8085 	bne.w	800b4dc <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b3d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	623b      	str	r3, [r7, #32]
 800b3d8:	627a      	str	r2, [r7, #36]	; 0x24
 800b3da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b3de:	f7fb fe81 	bl	80070e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b3e2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 80e8 	beq.w	800b5bc <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f0:	4a39      	ldr	r2, [pc, #228]	; (800b4d8 <UART_SetConfig+0x230>)
 800b3f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3fe:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	4613      	mov	r3, r2
 800b406:	005b      	lsls	r3, r3, #1
 800b408:	4413      	add	r3, r2
 800b40a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d305      	bcc.n	800b41c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b418:	429a      	cmp	r2, r3
 800b41a:	d903      	bls.n	800b424 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b422:	e048      	b.n	800b4b6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b426:	2200      	movs	r2, #0
 800b428:	61bb      	str	r3, [r7, #24]
 800b42a:	61fa      	str	r2, [r7, #28]
 800b42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b430:	4a29      	ldr	r2, [pc, #164]	; (800b4d8 <UART_SetConfig+0x230>)
 800b432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b436:	b29b      	uxth	r3, r3
 800b438:	2200      	movs	r2, #0
 800b43a:	613b      	str	r3, [r7, #16]
 800b43c:	617a      	str	r2, [r7, #20]
 800b43e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b442:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b446:	f7f4 ff1f 	bl	8000288 <__aeabi_uldivmod>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	4610      	mov	r0, r2
 800b450:	4619      	mov	r1, r3
 800b452:	f04f 0200 	mov.w	r2, #0
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	020b      	lsls	r3, r1, #8
 800b45c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b460:	0202      	lsls	r2, r0, #8
 800b462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b464:	6849      	ldr	r1, [r1, #4]
 800b466:	0849      	lsrs	r1, r1, #1
 800b468:	2000      	movs	r0, #0
 800b46a:	460c      	mov	r4, r1
 800b46c:	4605      	mov	r5, r0
 800b46e:	eb12 0804 	adds.w	r8, r2, r4
 800b472:	eb43 0905 	adc.w	r9, r3, r5
 800b476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	60bb      	str	r3, [r7, #8]
 800b47e:	60fa      	str	r2, [r7, #12]
 800b480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b484:	4640      	mov	r0, r8
 800b486:	4649      	mov	r1, r9
 800b488:	f7f4 fefe 	bl	8000288 <__aeabi_uldivmod>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4613      	mov	r3, r2
 800b492:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b49a:	d308      	bcc.n	800b4ae <UART_SetConfig+0x206>
 800b49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b49e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4a2:	d204      	bcs.n	800b4ae <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4aa:	60da      	str	r2, [r3, #12]
 800b4ac:	e003      	b.n	800b4b6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800b4b4:	e082      	b.n	800b5bc <UART_SetConfig+0x314>
 800b4b6:	e081      	b.n	800b5bc <UART_SetConfig+0x314>
 800b4b8:	46002400 	.word	0x46002400
 800b4bc:	cfff69f3 	.word	0xcfff69f3
 800b4c0:	56002400 	.word	0x56002400
 800b4c4:	40013800 	.word	0x40013800
 800b4c8:	40004400 	.word	0x40004400
 800b4cc:	40004800 	.word	0x40004800
 800b4d0:	40004c00 	.word	0x40004c00
 800b4d4:	40005000 	.word	0x40005000
 800b4d8:	0800d1ac 	.word	0x0800d1ac
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4de:	69db      	ldr	r3, [r3, #28]
 800b4e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4e4:	d13c      	bne.n	800b560 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	603b      	str	r3, [r7, #0]
 800b4ec:	607a      	str	r2, [r7, #4]
 800b4ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4f2:	f7fb fdf7 	bl	80070e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b4f6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d05e      	beq.n	800b5bc <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	4a39      	ldr	r2, [pc, #228]	; (800b5e8 <UART_SetConfig+0x340>)
 800b504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b508:	461a      	mov	r2, r3
 800b50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b50c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b510:	005a      	lsls	r2, r3, #1
 800b512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	085b      	lsrs	r3, r3, #1
 800b518:	441a      	add	r2, r3
 800b51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b522:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b526:	2b0f      	cmp	r3, #15
 800b528:	d916      	bls.n	800b558 <UART_SetConfig+0x2b0>
 800b52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b530:	d212      	bcs.n	800b558 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b534:	b29b      	uxth	r3, r3
 800b536:	f023 030f 	bic.w	r3, r3, #15
 800b53a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53e:	085b      	lsrs	r3, r3, #1
 800b540:	b29b      	uxth	r3, r3
 800b542:	f003 0307 	and.w	r3, r3, #7
 800b546:	b29a      	uxth	r2, r3
 800b548:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b54a:	4313      	orrs	r3, r2
 800b54c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b554:	60da      	str	r2, [r3, #12]
 800b556:	e031      	b.n	800b5bc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b55e:	e02d      	b.n	800b5bc <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b562:	2200      	movs	r2, #0
 800b564:	469a      	mov	sl, r3
 800b566:	4693      	mov	fp, r2
 800b568:	4650      	mov	r0, sl
 800b56a:	4659      	mov	r1, fp
 800b56c:	f7fb fdba 	bl	80070e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b570:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800b572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b574:	2b00      	cmp	r3, #0
 800b576:	d021      	beq.n	800b5bc <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57c:	4a1a      	ldr	r2, [pc, #104]	; (800b5e8 <UART_SetConfig+0x340>)
 800b57e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b582:	461a      	mov	r2, r3
 800b584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b586:	fbb3 f2f2 	udiv	r2, r3, r2
 800b58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	085b      	lsrs	r3, r3, #1
 800b590:	441a      	add	r2, r3
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	fbb2 f3f3 	udiv	r3, r2, r3
 800b59a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b59e:	2b0f      	cmp	r3, #15
 800b5a0:	d909      	bls.n	800b5b6 <UART_SetConfig+0x30e>
 800b5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5a8:	d205      	bcs.n	800b5b6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	60da      	str	r2, [r3, #12]
 800b5b4:	e002      	b.n	800b5bc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b5d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3750      	adds	r7, #80	; 0x50
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5e6:	bf00      	nop
 800b5e8:	0800d1ac 	.word	0x0800d1ac

0800b5ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f8:	f003 0308 	and.w	r3, r3, #8
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00a      	beq.n	800b616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	430a      	orrs	r2, r1
 800b614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61a:	f003 0301 	and.w	r3, r3, #1
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00a      	beq.n	800b638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	430a      	orrs	r2, r1
 800b636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63c:	f003 0302 	and.w	r3, r3, #2
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00a      	beq.n	800b65a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	430a      	orrs	r2, r1
 800b658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65e:	f003 0304 	and.w	r3, r3, #4
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00a      	beq.n	800b67c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	430a      	orrs	r2, r1
 800b67a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b680:	f003 0310 	and.w	r3, r3, #16
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00a      	beq.n	800b69e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	430a      	orrs	r2, r1
 800b69c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a2:	f003 0320 	and.w	r3, r3, #32
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	430a      	orrs	r2, r1
 800b6be:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d01a      	beq.n	800b702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	430a      	orrs	r2, r1
 800b6e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6ea:	d10a      	bne.n	800b702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	430a      	orrs	r2, r1
 800b700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00a      	beq.n	800b724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	430a      	orrs	r2, r1
 800b722:	605a      	str	r2, [r3, #4]
  }
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b098      	sub	sp, #96	; 0x60
 800b734:	af02      	add	r7, sp, #8
 800b736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b740:	f7f6 fb7a 	bl	8001e38 <HAL_GetTick>
 800b744:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f003 0308 	and.w	r3, r3, #8
 800b750:	2b08      	cmp	r3, #8
 800b752:	d12f      	bne.n	800b7b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b75c:	2200      	movs	r2, #0
 800b75e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f88e 	bl	800b884 <UART_WaitOnFlagUntilTimeout>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d022      	beq.n	800b7b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b776:	e853 3f00 	ldrex	r3, [r3]
 800b77a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b782:	653b      	str	r3, [r7, #80]	; 0x50
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	461a      	mov	r2, r3
 800b78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b78c:	647b      	str	r3, [r7, #68]	; 0x44
 800b78e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b794:	e841 2300 	strex	r3, r2, [r1]
 800b798:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1e6      	bne.n	800b76e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e063      	b.n	800b87c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0304 	and.w	r3, r3, #4
 800b7be:	2b04      	cmp	r3, #4
 800b7c0:	d149      	bne.n	800b856 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f857 	bl	800b884 <UART_WaitOnFlagUntilTimeout>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d03c      	beq.n	800b856 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e4:	e853 3f00 	ldrex	r3, [r3]
 800b7e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b7ea:	6a3b      	ldr	r3, [r7, #32]
 800b7ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7fa:	633b      	str	r3, [r7, #48]	; 0x30
 800b7fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b802:	e841 2300 	strex	r3, r2, [r1]
 800b806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1e6      	bne.n	800b7dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3308      	adds	r3, #8
 800b814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	e853 3f00 	ldrex	r3, [r3]
 800b81c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f023 0301 	bic.w	r3, r3, #1
 800b824:	64bb      	str	r3, [r7, #72]	; 0x48
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3308      	adds	r3, #8
 800b82c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b82e:	61fa      	str	r2, [r7, #28]
 800b830:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b832:	69b9      	ldr	r1, [r7, #24]
 800b834:	69fa      	ldr	r2, [r7, #28]
 800b836:	e841 2300 	strex	r3, r2, [r1]
 800b83a:	617b      	str	r3, [r7, #20]
   return(result);
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1e5      	bne.n	800b80e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2220      	movs	r2, #32
 800b846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b852:	2303      	movs	r3, #3
 800b854:	e012      	b.n	800b87c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2220      	movs	r2, #32
 800b85a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2220      	movs	r2, #32
 800b862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3758      	adds	r7, #88	; 0x58
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	603b      	str	r3, [r7, #0]
 800b890:	4613      	mov	r3, r2
 800b892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b894:	e049      	b.n	800b92a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89c:	d045      	beq.n	800b92a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b89e:	f7f6 facb 	bl	8001e38 <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	69ba      	ldr	r2, [r7, #24]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d302      	bcc.n	800b8b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e048      	b.n	800b94a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 0304 	and.w	r3, r3, #4
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d031      	beq.n	800b92a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	69db      	ldr	r3, [r3, #28]
 800b8cc:	f003 0308 	and.w	r3, r3, #8
 800b8d0:	2b08      	cmp	r3, #8
 800b8d2:	d110      	bne.n	800b8f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2208      	movs	r2, #8
 800b8da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f838 	bl	800b952 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2208      	movs	r2, #8
 800b8e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e029      	b.n	800b94a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b904:	d111      	bne.n	800b92a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b90e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f000 f81e 	bl	800b952 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2220      	movs	r2, #32
 800b91a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b926:	2303      	movs	r3, #3
 800b928:	e00f      	b.n	800b94a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69da      	ldr	r2, [r3, #28]
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	4013      	ands	r3, r2
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	429a      	cmp	r2, r3
 800b938:	bf0c      	ite	eq
 800b93a:	2301      	moveq	r3, #1
 800b93c:	2300      	movne	r3, #0
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	461a      	mov	r2, r3
 800b942:	79fb      	ldrb	r3, [r7, #7]
 800b944:	429a      	cmp	r2, r3
 800b946:	d0a6      	beq.n	800b896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b952:	b480      	push	{r7}
 800b954:	b095      	sub	sp, #84	; 0x54
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b96e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	461a      	mov	r2, r3
 800b976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b978:	643b      	str	r3, [r7, #64]	; 0x40
 800b97a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b97e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e6      	bne.n	800b95a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3308      	adds	r3, #8
 800b992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	6a3b      	ldr	r3, [r7, #32]
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9a2:	f023 0301 	bic.w	r3, r3, #1
 800b9a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9b8:	e841 2300 	strex	r3, r2, [r1]
 800b9bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1e3      	bne.n	800b98c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d118      	bne.n	800b9fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	e853 3f00 	ldrex	r3, [r3]
 800b9d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	f023 0310 	bic.w	r3, r3, #16
 800b9e0:	647b      	str	r3, [r7, #68]	; 0x44
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ea:	61bb      	str	r3, [r7, #24]
 800b9ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ee:	6979      	ldr	r1, [r7, #20]
 800b9f0:	69ba      	ldr	r2, [r7, #24]
 800b9f2:	e841 2300 	strex	r3, r2, [r1]
 800b9f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1e6      	bne.n	800b9cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2220      	movs	r2, #32
 800ba02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ba12:	bf00      	nop
 800ba14:	3754      	adds	r7, #84	; 0x54
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f7ff fc1d 	bl	800b27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba42:	bf00      	nop
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b088      	sub	sp, #32
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	e853 3f00 	ldrex	r3, [r3]
 800ba5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba66:	61fb      	str	r3, [r7, #28]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	61bb      	str	r3, [r7, #24]
 800ba72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba74:	6979      	ldr	r1, [r7, #20]
 800ba76:	69ba      	ldr	r2, [r7, #24]
 800ba78:	e841 2300 	strex	r3, r2, [r1]
 800ba7c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1e6      	bne.n	800ba52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2220      	movs	r2, #32
 800ba88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7ff fbe8 	bl	800b268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba98:	bf00      	nop
 800ba9a:	3720      	adds	r7, #32
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800baa8:	bf00      	nop
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d101      	bne.n	800bade <HAL_UARTEx_DisableFifoMode+0x16>
 800bada:	2302      	movs	r3, #2
 800badc:	e027      	b.n	800bb2e <HAL_UARTEx_DisableFifoMode+0x66>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2224      	movs	r2, #36	; 0x24
 800baea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f022 0201 	bic.w	r2, r2, #1
 800bb04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bb0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2220      	movs	r2, #32
 800bb20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d101      	bne.n	800bb52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb4e:	2302      	movs	r3, #2
 800bb50:	e02d      	b.n	800bbae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2224      	movs	r2, #36	; 0x24
 800bb5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f022 0201 	bic.w	r2, r2, #1
 800bb78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	683a      	ldr	r2, [r7, #0]
 800bb8a:	430a      	orrs	r2, r1
 800bb8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f850 	bl	800bc34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b084      	sub	sp, #16
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d101      	bne.n	800bbce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbca:	2302      	movs	r3, #2
 800bbcc:	e02d      	b.n	800bc2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2224      	movs	r2, #36	; 0x24
 800bbda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f022 0201 	bic.w	r2, r2, #1
 800bbf4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	430a      	orrs	r2, r1
 800bc08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 f812 	bl	800bc34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2220      	movs	r2, #32
 800bc1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
	...

0800bc34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d108      	bne.n	800bc56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc54:	e031      	b.n	800bcba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc56:	2308      	movs	r3, #8
 800bc58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc5a:	2308      	movs	r3, #8
 800bc5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	0e5b      	lsrs	r3, r3, #25
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	f003 0307 	and.w	r3, r3, #7
 800bc6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	0f5b      	lsrs	r3, r3, #29
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	f003 0307 	and.w	r3, r3, #7
 800bc7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc7e:	7bbb      	ldrb	r3, [r7, #14]
 800bc80:	7b3a      	ldrb	r2, [r7, #12]
 800bc82:	4911      	ldr	r1, [pc, #68]	; (800bcc8 <UARTEx_SetNbDataToProcess+0x94>)
 800bc84:	5c8a      	ldrb	r2, [r1, r2]
 800bc86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc8a:	7b3a      	ldrb	r2, [r7, #12]
 800bc8c:	490f      	ldr	r1, [pc, #60]	; (800bccc <UARTEx_SetNbDataToProcess+0x98>)
 800bc8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc90:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc9c:	7bfb      	ldrb	r3, [r7, #15]
 800bc9e:	7b7a      	ldrb	r2, [r7, #13]
 800bca0:	4909      	ldr	r1, [pc, #36]	; (800bcc8 <UARTEx_SetNbDataToProcess+0x94>)
 800bca2:	5c8a      	ldrb	r2, [r1, r2]
 800bca4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bca8:	7b7a      	ldrb	r2, [r7, #13]
 800bcaa:	4908      	ldr	r1, [pc, #32]	; (800bccc <UARTEx_SetNbDataToProcess+0x98>)
 800bcac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcae:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bcba:	bf00      	nop
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	0800d1c4 	.word	0x0800d1c4
 800bccc:	0800d1cc 	.word	0x0800d1cc

0800bcd0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bcd0:	b084      	sub	sp, #16
 800bcd2:	b480      	push	{r7}
 800bcd4:	b085      	sub	sp, #20
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	f107 001c 	add.w	r0, r7, #28
 800bcde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800bce6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800bce8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800bcea:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800bcee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800bcf2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800bcf6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <SDMMC_Init+0x50>)
 800bd04:	4013      	ands	r3, r2
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	b004      	add	sp, #16
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	ffc02c00 	.word	0xffc02c00

0800bd24 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b083      	sub	sp, #12
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f043 0203 	orr.w	r2, r3, #3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f003 0303 	and.w	r3, r3, #3
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	370c      	adds	r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
	...

0800bda0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bdbe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800bdc4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800bdca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68da      	ldr	r2, [r3, #12]
 800bdd6:	4b06      	ldr	r3, [pc, #24]	; (800bdf0 <SDMMC_SendCommand+0x50>)
 800bdd8:	4013      	ands	r3, r2
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	431a      	orrs	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr
 800bdf0:	fffee0c0 	.word	0xfffee0c0

0800bdf4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	b2db      	uxtb	r3, r3
}
 800be02:	4618      	mov	r0, r3
 800be04:	370c      	adds	r7, #12
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800be0e:	b480      	push	{r7}
 800be10:	b085      	sub	sp, #20
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	3314      	adds	r3, #20
 800be1c:	461a      	mov	r2, r3
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	4413      	add	r3, r2
 800be22:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800be5a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800be60:	431a      	orrs	r2, r3
                       Data->DPSM);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800be66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	431a      	orrs	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800be7e:	2300      	movs	r3, #0

}
 800be80:	4618      	mov	r0, r3
 800be82:	3714      	adds	r7, #20
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800be9a:	2310      	movs	r3, #16
 800be9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea4:	2300      	movs	r3, #0
 800bea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beae:	f107 0308 	add.w	r3, r7, #8
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7ff ff73 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800beba:	f241 3288 	movw	r2, #5000	; 0x1388
 800bebe:	2110      	movs	r1, #16
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 f9d3 	bl	800c26c <SDMMC_GetCmdResp1>
 800bec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bec8:	69fb      	ldr	r3, [r7, #28]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3720      	adds	r7, #32
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
	...

0800bed4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bedc:	2300      	movs	r3, #0
 800bede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bee0:	230c      	movs	r3, #12
 800bee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beea:	2300      	movs	r3, #0
 800beec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bef2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf0c:	f107 0308 	add.w	r3, r7, #8
 800bf10:	4619      	mov	r1, r3
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff ff44 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bf18:	4a0b      	ldr	r2, [pc, #44]	; (800bf48 <SDMMC_CmdStopTransfer+0x74>)
 800bf1a:	210c      	movs	r1, #12
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 f9a5 	bl	800c26c <SDMMC_GetCmdResp1>
 800bf22:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf36:	d101      	bne.n	800bf3c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bf3c:	69fb      	ldr	r3, [r7, #28]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3720      	adds	r7, #32
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	05f5e100 	.word	0x05f5e100

0800bf4c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b088      	sub	sp, #32
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bf5a:	2307      	movs	r3, #7
 800bf5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf64:	2300      	movs	r3, #0
 800bf66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf6e:	f107 0308 	add.w	r3, r7, #8
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff ff13 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bf7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf7e:	2107      	movs	r1, #7
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 f973 	bl	800c26c <SDMMC_GetCmdResp1>
 800bf86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf88:	69fb      	ldr	r3, [r7, #28]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3720      	adds	r7, #32
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b088      	sub	sp, #32
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfb0:	f107 0308 	add.w	r3, r7, #8
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7ff fef2 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fb97 	bl	800c6f0 <SDMMC_GetCmdError>
 800bfc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfc4:	69fb      	ldr	r3, [r7, #28]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3720      	adds	r7, #32
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b088      	sub	sp, #32
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bfd6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bfda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bfdc:	2308      	movs	r3, #8
 800bfde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bff0:	f107 0308 	add.w	r3, r7, #8
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7ff fed2 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fb29 	bl	800c654 <SDMMC_GetCmdResp7>
 800c002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c004:	69fb      	ldr	r3, [r7, #28]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3720      	adds	r7, #32
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b088      	sub	sp, #32
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c01c:	2337      	movs	r3, #55	; 0x37
 800c01e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c020:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c026:	2300      	movs	r3, #0
 800c028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c02a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c02e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c030:	f107 0308 	add.w	r3, r7, #8
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff feb2 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c03c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c040:	2137      	movs	r1, #55	; 0x37
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f912 	bl	800c26c <SDMMC_GetCmdResp1>
 800c048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c04a:	69fb      	ldr	r3, [r7, #28]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3720      	adds	r7, #32
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c062:	2329      	movs	r3, #41	; 0x29
 800c064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c06a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c06c:	2300      	movs	r3, #0
 800c06e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c074:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c076:	f107 0308 	add.w	r3, r7, #8
 800c07a:	4619      	mov	r1, r3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f7ff fe8f 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 fa2e 	bl	800c4e4 <SDMMC_GetCmdResp3>
 800c088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c08a:	69fb      	ldr	r3, [r7, #28]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3720      	adds	r7, #32
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b088      	sub	sp, #32
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c0a2:	2306      	movs	r3, #6
 800c0a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0b6:	f107 0308 	add.w	r3, r7, #8
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f7ff fe6f 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c0c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0c6:	2106      	movs	r1, #6
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 f8cf 	bl	800c26c <SDMMC_GetCmdResp1>
 800c0ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0d0:	69fb      	ldr	r3, [r7, #28]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3720      	adds	r7, #32
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b088      	sub	sp, #32
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c0e6:	2333      	movs	r3, #51	; 0x33
 800c0e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0fa:	f107 0308 	add.w	r3, r7, #8
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff fe4d 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c106:	f241 3288 	movw	r2, #5000	; 0x1388
 800c10a:	2133      	movs	r1, #51	; 0x33
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f8ad 	bl	800c26c <SDMMC_GetCmdResp1>
 800c112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c114:	69fb      	ldr	r3, [r7, #28]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3720      	adds	r7, #32
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b088      	sub	sp, #32
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c12a:	2302      	movs	r3, #2
 800c12c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c12e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c134:	2300      	movs	r3, #0
 800c136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c13c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c13e:	f107 0308 	add.w	r3, r7, #8
 800c142:	4619      	mov	r1, r3
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7ff fe2b 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f980 	bl	800c450 <SDMMC_GetCmdResp2>
 800c150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c152:	69fb      	ldr	r3, [r7, #28]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3720      	adds	r7, #32
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c16a:	2309      	movs	r3, #9
 800c16c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c16e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c174:	2300      	movs	r3, #0
 800c176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c17c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c17e:	f107 0308 	add.w	r3, r7, #8
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7ff fe0b 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f960 	bl	800c450 <SDMMC_GetCmdResp2>
 800c190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c192:	69fb      	ldr	r3, [r7, #28]
}
 800c194:	4618      	mov	r0, r3
 800c196:	3720      	adds	r7, #32
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1be:	f107 0308 	add.w	r3, r7, #8
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7ff fdeb 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	2103      	movs	r1, #3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f9c8 	bl	800c564 <SDMMC_GetCmdResp6>
 800c1d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1d6:	69fb      	ldr	r3, [r7, #28]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3720      	adds	r7, #32
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c1ee:	230d      	movs	r3, #13
 800c1f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c202:	f107 0308 	add.w	r3, r7, #8
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff fdc9 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c20e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c212:	210d      	movs	r1, #13
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f829 	bl	800c26c <SDMMC_GetCmdResp1>
 800c21a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c21c:	69fb      	ldr	r3, [r7, #28]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3720      	adds	r7, #32
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b088      	sub	sp, #32
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c22e:	2300      	movs	r3, #0
 800c230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c232:	230d      	movs	r3, #13
 800c234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c23a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c23c:	2300      	movs	r3, #0
 800c23e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c246:	f107 0308 	add.w	r3, r7, #8
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7ff fda7 	bl	800bda0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c252:	f241 3288 	movw	r2, #5000	; 0x1388
 800c256:	210d      	movs	r1, #13
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f807 	bl	800c26c <SDMMC_GetCmdResp1>
 800c25e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c260:	69fb      	ldr	r3, [r7, #28]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3720      	adds	r7, #32
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
	...

0800c26c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	460b      	mov	r3, r1
 800c276:	607a      	str	r2, [r7, #4]
 800c278:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c27a:	4b70      	ldr	r3, [pc, #448]	; (800c43c <SDMMC_GetCmdResp1+0x1d0>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a70      	ldr	r2, [pc, #448]	; (800c440 <SDMMC_GetCmdResp1+0x1d4>)
 800c280:	fba2 2303 	umull	r2, r3, r2, r3
 800c284:	0a5a      	lsrs	r2, r3, #9
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	fb02 f303 	mul.w	r3, r2, r3
 800c28c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	1e5a      	subs	r2, r3, #1
 800c292:	61fa      	str	r2, [r7, #28]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d102      	bne.n	800c29e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c29c:	e0c9      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2a2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c2a4:	69ba      	ldr	r2, [r7, #24]
 800c2a6:	4b67      	ldr	r3, [pc, #412]	; (800c444 <SDMMC_GetCmdResp1+0x1d8>)
 800c2a8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d0ef      	beq.n	800c28e <SDMMC_GetCmdResp1+0x22>
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1ea      	bne.n	800c28e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2bc:	f003 0304 	and.w	r3, r3, #4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d004      	beq.n	800c2ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2204      	movs	r2, #4
 800c2c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2ca:	2304      	movs	r3, #4
 800c2cc:	e0b1      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d2:	f003 0301 	and.w	r3, r3, #1
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d004      	beq.n	800c2e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2201      	movs	r2, #1
 800c2de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e0a6      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	4a58      	ldr	r2, [pc, #352]	; (800c448 <SDMMC_GetCmdResp1+0x1dc>)
 800c2e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f7ff fd82 	bl	800bdf4 <SDMMC_GetCommandResponse>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d001      	beq.n	800c2fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e099      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c2fe:	2100      	movs	r1, #0
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f7ff fd84 	bl	800be0e <SDMMC_GetResponse>
 800c306:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	4b50      	ldr	r3, [pc, #320]	; (800c44c <SDMMC_GetCmdResp1+0x1e0>)
 800c30c:	4013      	ands	r3, r2
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c312:	2300      	movs	r3, #0
 800c314:	e08d      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	da02      	bge.n	800c322 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c31c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c320:	e087      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c32c:	2340      	movs	r3, #64	; 0x40
 800c32e:	e080      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c33a:	2380      	movs	r3, #128	; 0x80
 800c33c:	e079      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c34c:	e071      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c35c:	e069      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c36c:	e061      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c378:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c37c:	e059      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c38c:	e051      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c39c:	e049      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c3a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c3ac:	e041      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c3b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3bc:	e039      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c3c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c3cc:	e031      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d002      	beq.n	800c3de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c3d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c3dc:	e029      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c3e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c3ec:	e021      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c3f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c3fc:	e019      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c40c:	e011      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c418:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c41c:	e009      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f003 0308 	and.w	r3, r3, #8
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c428:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c42c:	e001      	b.n	800c432 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c42e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c432:	4618      	mov	r0, r3
 800c434:	3720      	adds	r7, #32
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20000000 	.word	0x20000000
 800c440:	10624dd3 	.word	0x10624dd3
 800c444:	00200045 	.word	0x00200045
 800c448:	002000c5 	.word	0x002000c5
 800c44c:	fdffe008 	.word	0xfdffe008

0800c450 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c458:	4b1f      	ldr	r3, [pc, #124]	; (800c4d8 <SDMMC_GetCmdResp2+0x88>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a1f      	ldr	r2, [pc, #124]	; (800c4dc <SDMMC_GetCmdResp2+0x8c>)
 800c45e:	fba2 2303 	umull	r2, r3, r2, r3
 800c462:	0a5b      	lsrs	r3, r3, #9
 800c464:	f241 3288 	movw	r2, #5000	; 0x1388
 800c468:	fb02 f303 	mul.w	r3, r2, r3
 800c46c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	1e5a      	subs	r2, r3, #1
 800c472:	60fa      	str	r2, [r7, #12]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d102      	bne.n	800c47e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c47c:	e026      	b.n	800c4cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c482:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d0ef      	beq.n	800c46e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1ea      	bne.n	800c46e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d004      	beq.n	800c4ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2204      	movs	r2, #4
 800c4a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4aa:	2304      	movs	r3, #4
 800c4ac:	e00e      	b.n	800c4cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d004      	beq.n	800c4c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	e003      	b.n	800c4cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a06      	ldr	r2, [pc, #24]	; (800c4e0 <SDMMC_GetCmdResp2+0x90>)
 800c4c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	20000000 	.word	0x20000000
 800c4dc:	10624dd3 	.word	0x10624dd3
 800c4e0:	002000c5 	.word	0x002000c5

0800c4e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4ec:	4b1a      	ldr	r3, [pc, #104]	; (800c558 <SDMMC_GetCmdResp3+0x74>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a1a      	ldr	r2, [pc, #104]	; (800c55c <SDMMC_GetCmdResp3+0x78>)
 800c4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f6:	0a5b      	lsrs	r3, r3, #9
 800c4f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4fc:	fb02 f303 	mul.w	r3, r2, r3
 800c500:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	1e5a      	subs	r2, r3, #1
 800c506:	60fa      	str	r2, [r7, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d102      	bne.n	800c512 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c50c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c510:	e01b      	b.n	800c54a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c516:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0ef      	beq.n	800c502 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1ea      	bne.n	800c502 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c530:	f003 0304 	and.w	r3, r3, #4
 800c534:	2b00      	cmp	r3, #0
 800c536:	d004      	beq.n	800c542 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2204      	movs	r2, #4
 800c53c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c53e:	2304      	movs	r3, #4
 800c540:	e003      	b.n	800c54a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a06      	ldr	r2, [pc, #24]	; (800c560 <SDMMC_GetCmdResp3+0x7c>)
 800c546:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	20000000 	.word	0x20000000
 800c55c:	10624dd3 	.word	0x10624dd3
 800c560:	002000c5 	.word	0x002000c5

0800c564 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	460b      	mov	r3, r1
 800c56e:	607a      	str	r2, [r7, #4]
 800c570:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c572:	4b35      	ldr	r3, [pc, #212]	; (800c648 <SDMMC_GetCmdResp6+0xe4>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a35      	ldr	r2, [pc, #212]	; (800c64c <SDMMC_GetCmdResp6+0xe8>)
 800c578:	fba2 2303 	umull	r2, r3, r2, r3
 800c57c:	0a5b      	lsrs	r3, r3, #9
 800c57e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c582:	fb02 f303 	mul.w	r3, r2, r3
 800c586:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	1e5a      	subs	r2, r3, #1
 800c58c:	61fa      	str	r2, [r7, #28]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d102      	bne.n	800c598 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c592:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c596:	e052      	b.n	800c63e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c59c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d0ef      	beq.n	800c588 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1ea      	bne.n	800c588 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5b6:	f003 0304 	and.w	r3, r3, #4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d004      	beq.n	800c5c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2204      	movs	r2, #4
 800c5c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5c4:	2304      	movs	r3, #4
 800c5c6:	e03a      	b.n	800c63e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d004      	beq.n	800c5de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e02f      	b.n	800c63e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f7ff fc08 	bl	800bdf4 <SDMMC_GetCommandResponse>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d001      	beq.n	800c5f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e025      	b.n	800c63e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	4a16      	ldr	r2, [pc, #88]	; (800c650 <SDMMC_GetCmdResp6+0xec>)
 800c5f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f7ff fc07 	bl	800be0e <SDMMC_GetResponse>
 800c600:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d106      	bne.n	800c61a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	0c1b      	lsrs	r3, r3, #16
 800c610:	b29a      	uxth	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c616:	2300      	movs	r3, #0
 800c618:	e011      	b.n	800c63e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c628:	e009      	b.n	800c63e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c630:	2b00      	cmp	r3, #0
 800c632:	d002      	beq.n	800c63a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c638:	e001      	b.n	800c63e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c63a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3720      	adds	r7, #32
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	20000000 	.word	0x20000000
 800c64c:	10624dd3 	.word	0x10624dd3
 800c650:	002000c5 	.word	0x002000c5

0800c654 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c65c:	4b22      	ldr	r3, [pc, #136]	; (800c6e8 <SDMMC_GetCmdResp7+0x94>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a22      	ldr	r2, [pc, #136]	; (800c6ec <SDMMC_GetCmdResp7+0x98>)
 800c662:	fba2 2303 	umull	r2, r3, r2, r3
 800c666:	0a5b      	lsrs	r3, r3, #9
 800c668:	f241 3288 	movw	r2, #5000	; 0x1388
 800c66c:	fb02 f303 	mul.w	r3, r2, r3
 800c670:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	1e5a      	subs	r2, r3, #1
 800c676:	60fa      	str	r2, [r7, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d102      	bne.n	800c682 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c67c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c680:	e02c      	b.n	800c6dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c686:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0ef      	beq.n	800c672 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1ea      	bne.n	800c672 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d004      	beq.n	800c6b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2204      	movs	r2, #4
 800c6ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6ae:	2304      	movs	r3, #4
 800c6b0:	e014      	b.n	800c6dc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d004      	beq.n	800c6c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e009      	b.n	800c6dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2240      	movs	r2, #64	; 0x40
 800c6d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c6da:	2300      	movs	r3, #0

}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3714      	adds	r7, #20
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	20000000 	.word	0x20000000
 800c6ec:	10624dd3 	.word	0x10624dd3

0800c6f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c6f8:	4b11      	ldr	r3, [pc, #68]	; (800c740 <SDMMC_GetCmdError+0x50>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a11      	ldr	r2, [pc, #68]	; (800c744 <SDMMC_GetCmdError+0x54>)
 800c6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c702:	0a5b      	lsrs	r3, r3, #9
 800c704:	f241 3288 	movw	r2, #5000	; 0x1388
 800c708:	fb02 f303 	mul.w	r3, r2, r3
 800c70c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	1e5a      	subs	r2, r3, #1
 800c712:	60fa      	str	r2, [r7, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d102      	bne.n	800c71e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c71c:	e009      	b.n	800c732 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c726:	2b00      	cmp	r3, #0
 800c728:	d0f1      	beq.n	800c70e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4a06      	ldr	r2, [pc, #24]	; (800c748 <SDMMC_GetCmdError+0x58>)
 800c72e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	20000000 	.word	0x20000000
 800c744:	10624dd3 	.word	0x10624dd3
 800c748:	002000c5 	.word	0x002000c5

0800c74c <siprintf>:
 800c74c:	b40e      	push	{r1, r2, r3}
 800c74e:	b500      	push	{lr}
 800c750:	b09c      	sub	sp, #112	; 0x70
 800c752:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c756:	ab1d      	add	r3, sp, #116	; 0x74
 800c758:	9002      	str	r0, [sp, #8]
 800c75a:	9006      	str	r0, [sp, #24]
 800c75c:	9107      	str	r1, [sp, #28]
 800c75e:	9104      	str	r1, [sp, #16]
 800c760:	4808      	ldr	r0, [pc, #32]	; (800c784 <siprintf+0x38>)
 800c762:	4909      	ldr	r1, [pc, #36]	; (800c788 <siprintf+0x3c>)
 800c764:	f853 2b04 	ldr.w	r2, [r3], #4
 800c768:	9105      	str	r1, [sp, #20]
 800c76a:	a902      	add	r1, sp, #8
 800c76c:	6800      	ldr	r0, [r0, #0]
 800c76e:	9301      	str	r3, [sp, #4]
 800c770:	f000 f992 	bl	800ca98 <_svfiprintf_r>
 800c774:	9b02      	ldr	r3, [sp, #8]
 800c776:	2200      	movs	r2, #0
 800c778:	701a      	strb	r2, [r3, #0]
 800c77a:	b01c      	add	sp, #112	; 0x70
 800c77c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c780:	b003      	add	sp, #12
 800c782:	4770      	bx	lr
 800c784:	20000058 	.word	0x20000058
 800c788:	ffff0208 	.word	0xffff0208

0800c78c <memset>:
 800c78c:	4402      	add	r2, r0
 800c78e:	4603      	mov	r3, r0
 800c790:	4293      	cmp	r3, r2
 800c792:	d100      	bne.n	800c796 <memset+0xa>
 800c794:	4770      	bx	lr
 800c796:	f803 1b01 	strb.w	r1, [r3], #1
 800c79a:	e7f9      	b.n	800c790 <memset+0x4>

0800c79c <__errno>:
 800c79c:	4b01      	ldr	r3, [pc, #4]	; (800c7a4 <__errno+0x8>)
 800c79e:	6818      	ldr	r0, [r3, #0]
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	20000058 	.word	0x20000058

0800c7a8 <__libc_init_array>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	4d0d      	ldr	r5, [pc, #52]	; (800c7e0 <__libc_init_array+0x38>)
 800c7ac:	2600      	movs	r6, #0
 800c7ae:	4c0d      	ldr	r4, [pc, #52]	; (800c7e4 <__libc_init_array+0x3c>)
 800c7b0:	1b64      	subs	r4, r4, r5
 800c7b2:	10a4      	asrs	r4, r4, #2
 800c7b4:	42a6      	cmp	r6, r4
 800c7b6:	d109      	bne.n	800c7cc <__libc_init_array+0x24>
 800c7b8:	4d0b      	ldr	r5, [pc, #44]	; (800c7e8 <__libc_init_array+0x40>)
 800c7ba:	2600      	movs	r6, #0
 800c7bc:	4c0b      	ldr	r4, [pc, #44]	; (800c7ec <__libc_init_array+0x44>)
 800c7be:	f000 fc77 	bl	800d0b0 <_init>
 800c7c2:	1b64      	subs	r4, r4, r5
 800c7c4:	10a4      	asrs	r4, r4, #2
 800c7c6:	42a6      	cmp	r6, r4
 800c7c8:	d105      	bne.n	800c7d6 <__libc_init_array+0x2e>
 800c7ca:	bd70      	pop	{r4, r5, r6, pc}
 800c7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7d0:	3601      	adds	r6, #1
 800c7d2:	4798      	blx	r3
 800c7d4:	e7ee      	b.n	800c7b4 <__libc_init_array+0xc>
 800c7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7da:	3601      	adds	r6, #1
 800c7dc:	4798      	blx	r3
 800c7de:	e7f2      	b.n	800c7c6 <__libc_init_array+0x1e>
 800c7e0:	0800d210 	.word	0x0800d210
 800c7e4:	0800d210 	.word	0x0800d210
 800c7e8:	0800d210 	.word	0x0800d210
 800c7ec:	0800d214 	.word	0x0800d214

0800c7f0 <__retarget_lock_acquire_recursive>:
 800c7f0:	4770      	bx	lr

0800c7f2 <__retarget_lock_release_recursive>:
 800c7f2:	4770      	bx	lr

0800c7f4 <_free_r>:
 800c7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7f6:	2900      	cmp	r1, #0
 800c7f8:	d043      	beq.n	800c882 <_free_r+0x8e>
 800c7fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7fe:	1f0c      	subs	r4, r1, #4
 800c800:	9001      	str	r0, [sp, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	bfb8      	it	lt
 800c806:	18e4      	addlt	r4, r4, r3
 800c808:	f000 f8e0 	bl	800c9cc <__malloc_lock>
 800c80c:	4a1e      	ldr	r2, [pc, #120]	; (800c888 <_free_r+0x94>)
 800c80e:	9801      	ldr	r0, [sp, #4]
 800c810:	6813      	ldr	r3, [r2, #0]
 800c812:	b933      	cbnz	r3, 800c822 <_free_r+0x2e>
 800c814:	6063      	str	r3, [r4, #4]
 800c816:	6014      	str	r4, [r2, #0]
 800c818:	b003      	add	sp, #12
 800c81a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c81e:	f000 b8db 	b.w	800c9d8 <__malloc_unlock>
 800c822:	42a3      	cmp	r3, r4
 800c824:	d908      	bls.n	800c838 <_free_r+0x44>
 800c826:	6825      	ldr	r5, [r4, #0]
 800c828:	1961      	adds	r1, r4, r5
 800c82a:	428b      	cmp	r3, r1
 800c82c:	bf01      	itttt	eq
 800c82e:	6819      	ldreq	r1, [r3, #0]
 800c830:	685b      	ldreq	r3, [r3, #4]
 800c832:	1949      	addeq	r1, r1, r5
 800c834:	6021      	streq	r1, [r4, #0]
 800c836:	e7ed      	b.n	800c814 <_free_r+0x20>
 800c838:	461a      	mov	r2, r3
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	b10b      	cbz	r3, 800c842 <_free_r+0x4e>
 800c83e:	42a3      	cmp	r3, r4
 800c840:	d9fa      	bls.n	800c838 <_free_r+0x44>
 800c842:	6811      	ldr	r1, [r2, #0]
 800c844:	1855      	adds	r5, r2, r1
 800c846:	42a5      	cmp	r5, r4
 800c848:	d10b      	bne.n	800c862 <_free_r+0x6e>
 800c84a:	6824      	ldr	r4, [r4, #0]
 800c84c:	4421      	add	r1, r4
 800c84e:	1854      	adds	r4, r2, r1
 800c850:	6011      	str	r1, [r2, #0]
 800c852:	42a3      	cmp	r3, r4
 800c854:	d1e0      	bne.n	800c818 <_free_r+0x24>
 800c856:	681c      	ldr	r4, [r3, #0]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	440c      	add	r4, r1
 800c85c:	6053      	str	r3, [r2, #4]
 800c85e:	6014      	str	r4, [r2, #0]
 800c860:	e7da      	b.n	800c818 <_free_r+0x24>
 800c862:	d902      	bls.n	800c86a <_free_r+0x76>
 800c864:	230c      	movs	r3, #12
 800c866:	6003      	str	r3, [r0, #0]
 800c868:	e7d6      	b.n	800c818 <_free_r+0x24>
 800c86a:	6825      	ldr	r5, [r4, #0]
 800c86c:	1961      	adds	r1, r4, r5
 800c86e:	428b      	cmp	r3, r1
 800c870:	bf02      	ittt	eq
 800c872:	6819      	ldreq	r1, [r3, #0]
 800c874:	685b      	ldreq	r3, [r3, #4]
 800c876:	1949      	addeq	r1, r1, r5
 800c878:	6063      	str	r3, [r4, #4]
 800c87a:	bf08      	it	eq
 800c87c:	6021      	streq	r1, [r4, #0]
 800c87e:	6054      	str	r4, [r2, #4]
 800c880:	e7ca      	b.n	800c818 <_free_r+0x24>
 800c882:	b003      	add	sp, #12
 800c884:	bd30      	pop	{r4, r5, pc}
 800c886:	bf00      	nop
 800c888:	20000a7c 	.word	0x20000a7c

0800c88c <sbrk_aligned>:
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	4e0e      	ldr	r6, [pc, #56]	; (800c8c8 <sbrk_aligned+0x3c>)
 800c890:	460c      	mov	r4, r1
 800c892:	4605      	mov	r5, r0
 800c894:	6831      	ldr	r1, [r6, #0]
 800c896:	b911      	cbnz	r1, 800c89e <sbrk_aligned+0x12>
 800c898:	f000 fba8 	bl	800cfec <_sbrk_r>
 800c89c:	6030      	str	r0, [r6, #0]
 800c89e:	4621      	mov	r1, r4
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	f000 fba3 	bl	800cfec <_sbrk_r>
 800c8a6:	1c43      	adds	r3, r0, #1
 800c8a8:	d00a      	beq.n	800c8c0 <sbrk_aligned+0x34>
 800c8aa:	1cc4      	adds	r4, r0, #3
 800c8ac:	f024 0403 	bic.w	r4, r4, #3
 800c8b0:	42a0      	cmp	r0, r4
 800c8b2:	d007      	beq.n	800c8c4 <sbrk_aligned+0x38>
 800c8b4:	1a21      	subs	r1, r4, r0
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f000 fb98 	bl	800cfec <_sbrk_r>
 800c8bc:	3001      	adds	r0, #1
 800c8be:	d101      	bne.n	800c8c4 <sbrk_aligned+0x38>
 800c8c0:	f04f 34ff 	mov.w	r4, #4294967295
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}
 800c8c8:	20000a80 	.word	0x20000a80

0800c8cc <_malloc_r>:
 800c8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8d0:	1ccd      	adds	r5, r1, #3
 800c8d2:	4607      	mov	r7, r0
 800c8d4:	f025 0503 	bic.w	r5, r5, #3
 800c8d8:	3508      	adds	r5, #8
 800c8da:	2d0c      	cmp	r5, #12
 800c8dc:	bf38      	it	cc
 800c8de:	250c      	movcc	r5, #12
 800c8e0:	2d00      	cmp	r5, #0
 800c8e2:	db01      	blt.n	800c8e8 <_malloc_r+0x1c>
 800c8e4:	42a9      	cmp	r1, r5
 800c8e6:	d905      	bls.n	800c8f4 <_malloc_r+0x28>
 800c8e8:	230c      	movs	r3, #12
 800c8ea:	2600      	movs	r6, #0
 800c8ec:	603b      	str	r3, [r7, #0]
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c9c8 <_malloc_r+0xfc>
 800c8f8:	f000 f868 	bl	800c9cc <__malloc_lock>
 800c8fc:	f8d8 3000 	ldr.w	r3, [r8]
 800c900:	461c      	mov	r4, r3
 800c902:	bb5c      	cbnz	r4, 800c95c <_malloc_r+0x90>
 800c904:	4629      	mov	r1, r5
 800c906:	4638      	mov	r0, r7
 800c908:	f7ff ffc0 	bl	800c88c <sbrk_aligned>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	4604      	mov	r4, r0
 800c910:	d155      	bne.n	800c9be <_malloc_r+0xf2>
 800c912:	f8d8 4000 	ldr.w	r4, [r8]
 800c916:	4626      	mov	r6, r4
 800c918:	2e00      	cmp	r6, #0
 800c91a:	d145      	bne.n	800c9a8 <_malloc_r+0xdc>
 800c91c:	2c00      	cmp	r4, #0
 800c91e:	d048      	beq.n	800c9b2 <_malloc_r+0xe6>
 800c920:	6823      	ldr	r3, [r4, #0]
 800c922:	4631      	mov	r1, r6
 800c924:	4638      	mov	r0, r7
 800c926:	eb04 0903 	add.w	r9, r4, r3
 800c92a:	f000 fb5f 	bl	800cfec <_sbrk_r>
 800c92e:	4581      	cmp	r9, r0
 800c930:	d13f      	bne.n	800c9b2 <_malloc_r+0xe6>
 800c932:	6821      	ldr	r1, [r4, #0]
 800c934:	4638      	mov	r0, r7
 800c936:	1a6d      	subs	r5, r5, r1
 800c938:	4629      	mov	r1, r5
 800c93a:	f7ff ffa7 	bl	800c88c <sbrk_aligned>
 800c93e:	3001      	adds	r0, #1
 800c940:	d037      	beq.n	800c9b2 <_malloc_r+0xe6>
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	442b      	add	r3, r5
 800c946:	6023      	str	r3, [r4, #0]
 800c948:	f8d8 3000 	ldr.w	r3, [r8]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d038      	beq.n	800c9c2 <_malloc_r+0xf6>
 800c950:	685a      	ldr	r2, [r3, #4]
 800c952:	42a2      	cmp	r2, r4
 800c954:	d12b      	bne.n	800c9ae <_malloc_r+0xe2>
 800c956:	2200      	movs	r2, #0
 800c958:	605a      	str	r2, [r3, #4]
 800c95a:	e00f      	b.n	800c97c <_malloc_r+0xb0>
 800c95c:	6822      	ldr	r2, [r4, #0]
 800c95e:	1b52      	subs	r2, r2, r5
 800c960:	d41f      	bmi.n	800c9a2 <_malloc_r+0xd6>
 800c962:	2a0b      	cmp	r2, #11
 800c964:	d917      	bls.n	800c996 <_malloc_r+0xca>
 800c966:	1961      	adds	r1, r4, r5
 800c968:	42a3      	cmp	r3, r4
 800c96a:	6025      	str	r5, [r4, #0]
 800c96c:	bf18      	it	ne
 800c96e:	6059      	strne	r1, [r3, #4]
 800c970:	6863      	ldr	r3, [r4, #4]
 800c972:	bf08      	it	eq
 800c974:	f8c8 1000 	streq.w	r1, [r8]
 800c978:	5162      	str	r2, [r4, r5]
 800c97a:	604b      	str	r3, [r1, #4]
 800c97c:	f104 060b 	add.w	r6, r4, #11
 800c980:	4638      	mov	r0, r7
 800c982:	f000 f829 	bl	800c9d8 <__malloc_unlock>
 800c986:	1d23      	adds	r3, r4, #4
 800c988:	f026 0607 	bic.w	r6, r6, #7
 800c98c:	1af2      	subs	r2, r6, r3
 800c98e:	d0ae      	beq.n	800c8ee <_malloc_r+0x22>
 800c990:	1b9b      	subs	r3, r3, r6
 800c992:	50a3      	str	r3, [r4, r2]
 800c994:	e7ab      	b.n	800c8ee <_malloc_r+0x22>
 800c996:	42a3      	cmp	r3, r4
 800c998:	6862      	ldr	r2, [r4, #4]
 800c99a:	d1dd      	bne.n	800c958 <_malloc_r+0x8c>
 800c99c:	f8c8 2000 	str.w	r2, [r8]
 800c9a0:	e7ec      	b.n	800c97c <_malloc_r+0xb0>
 800c9a2:	4623      	mov	r3, r4
 800c9a4:	6864      	ldr	r4, [r4, #4]
 800c9a6:	e7ac      	b.n	800c902 <_malloc_r+0x36>
 800c9a8:	4634      	mov	r4, r6
 800c9aa:	6876      	ldr	r6, [r6, #4]
 800c9ac:	e7b4      	b.n	800c918 <_malloc_r+0x4c>
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	e7cc      	b.n	800c94c <_malloc_r+0x80>
 800c9b2:	230c      	movs	r3, #12
 800c9b4:	4638      	mov	r0, r7
 800c9b6:	603b      	str	r3, [r7, #0]
 800c9b8:	f000 f80e 	bl	800c9d8 <__malloc_unlock>
 800c9bc:	e797      	b.n	800c8ee <_malloc_r+0x22>
 800c9be:	6025      	str	r5, [r4, #0]
 800c9c0:	e7dc      	b.n	800c97c <_malloc_r+0xb0>
 800c9c2:	605b      	str	r3, [r3, #4]
 800c9c4:	deff      	udf	#255	; 0xff
 800c9c6:	bf00      	nop
 800c9c8:	20000a7c 	.word	0x20000a7c

0800c9cc <__malloc_lock>:
 800c9cc:	4801      	ldr	r0, [pc, #4]	; (800c9d4 <__malloc_lock+0x8>)
 800c9ce:	f7ff bf0f 	b.w	800c7f0 <__retarget_lock_acquire_recursive>
 800c9d2:	bf00      	nop
 800c9d4:	20000a78 	.word	0x20000a78

0800c9d8 <__malloc_unlock>:
 800c9d8:	4801      	ldr	r0, [pc, #4]	; (800c9e0 <__malloc_unlock+0x8>)
 800c9da:	f7ff bf0a 	b.w	800c7f2 <__retarget_lock_release_recursive>
 800c9de:	bf00      	nop
 800c9e0:	20000a78 	.word	0x20000a78

0800c9e4 <__ssputs_r>:
 800c9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e8:	461f      	mov	r7, r3
 800c9ea:	688e      	ldr	r6, [r1, #8]
 800c9ec:	4682      	mov	sl, r0
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	42be      	cmp	r6, r7
 800c9f2:	4690      	mov	r8, r2
 800c9f4:	680b      	ldr	r3, [r1, #0]
 800c9f6:	d82c      	bhi.n	800ca52 <__ssputs_r+0x6e>
 800c9f8:	898a      	ldrh	r2, [r1, #12]
 800c9fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9fe:	d026      	beq.n	800ca4e <__ssputs_r+0x6a>
 800ca00:	6965      	ldr	r5, [r4, #20]
 800ca02:	6909      	ldr	r1, [r1, #16]
 800ca04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca08:	eba3 0901 	sub.w	r9, r3, r1
 800ca0c:	1c7b      	adds	r3, r7, #1
 800ca0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca12:	444b      	add	r3, r9
 800ca14:	106d      	asrs	r5, r5, #1
 800ca16:	429d      	cmp	r5, r3
 800ca18:	bf38      	it	cc
 800ca1a:	461d      	movcc	r5, r3
 800ca1c:	0553      	lsls	r3, r2, #21
 800ca1e:	d527      	bpl.n	800ca70 <__ssputs_r+0x8c>
 800ca20:	4629      	mov	r1, r5
 800ca22:	f7ff ff53 	bl	800c8cc <_malloc_r>
 800ca26:	4606      	mov	r6, r0
 800ca28:	b360      	cbz	r0, 800ca84 <__ssputs_r+0xa0>
 800ca2a:	464a      	mov	r2, r9
 800ca2c:	6921      	ldr	r1, [r4, #16]
 800ca2e:	f000 fafb 	bl	800d028 <memcpy>
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca3c:	81a3      	strh	r3, [r4, #12]
 800ca3e:	6126      	str	r6, [r4, #16]
 800ca40:	444e      	add	r6, r9
 800ca42:	6165      	str	r5, [r4, #20]
 800ca44:	eba5 0509 	sub.w	r5, r5, r9
 800ca48:	6026      	str	r6, [r4, #0]
 800ca4a:	463e      	mov	r6, r7
 800ca4c:	60a5      	str	r5, [r4, #8]
 800ca4e:	42be      	cmp	r6, r7
 800ca50:	d900      	bls.n	800ca54 <__ssputs_r+0x70>
 800ca52:	463e      	mov	r6, r7
 800ca54:	4632      	mov	r2, r6
 800ca56:	4641      	mov	r1, r8
 800ca58:	6820      	ldr	r0, [r4, #0]
 800ca5a:	f000 faad 	bl	800cfb8 <memmove>
 800ca5e:	68a3      	ldr	r3, [r4, #8]
 800ca60:	2000      	movs	r0, #0
 800ca62:	1b9b      	subs	r3, r3, r6
 800ca64:	60a3      	str	r3, [r4, #8]
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	4433      	add	r3, r6
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca70:	462a      	mov	r2, r5
 800ca72:	f000 fae6 	bl	800d042 <_realloc_r>
 800ca76:	4606      	mov	r6, r0
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d1e0      	bne.n	800ca3e <__ssputs_r+0x5a>
 800ca7c:	6921      	ldr	r1, [r4, #16]
 800ca7e:	4650      	mov	r0, sl
 800ca80:	f7ff feb8 	bl	800c7f4 <_free_r>
 800ca84:	230c      	movs	r3, #12
 800ca86:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8a:	f8ca 3000 	str.w	r3, [sl]
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca94:	81a3      	strh	r3, [r4, #12]
 800ca96:	e7e9      	b.n	800ca6c <__ssputs_r+0x88>

0800ca98 <_svfiprintf_r>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	4698      	mov	r8, r3
 800ca9e:	898b      	ldrh	r3, [r1, #12]
 800caa0:	b09d      	sub	sp, #116	; 0x74
 800caa2:	4607      	mov	r7, r0
 800caa4:	061b      	lsls	r3, r3, #24
 800caa6:	460d      	mov	r5, r1
 800caa8:	4614      	mov	r4, r2
 800caaa:	d50e      	bpl.n	800caca <_svfiprintf_r+0x32>
 800caac:	690b      	ldr	r3, [r1, #16]
 800caae:	b963      	cbnz	r3, 800caca <_svfiprintf_r+0x32>
 800cab0:	2140      	movs	r1, #64	; 0x40
 800cab2:	f7ff ff0b 	bl	800c8cc <_malloc_r>
 800cab6:	6028      	str	r0, [r5, #0]
 800cab8:	6128      	str	r0, [r5, #16]
 800caba:	b920      	cbnz	r0, 800cac6 <_svfiprintf_r+0x2e>
 800cabc:	230c      	movs	r3, #12
 800cabe:	603b      	str	r3, [r7, #0]
 800cac0:	f04f 30ff 	mov.w	r0, #4294967295
 800cac4:	e0d0      	b.n	800cc68 <_svfiprintf_r+0x1d0>
 800cac6:	2340      	movs	r3, #64	; 0x40
 800cac8:	616b      	str	r3, [r5, #20]
 800caca:	2300      	movs	r3, #0
 800cacc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cad0:	f04f 0901 	mov.w	r9, #1
 800cad4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc80 <_svfiprintf_r+0x1e8>
 800cad8:	9309      	str	r3, [sp, #36]	; 0x24
 800cada:	2320      	movs	r3, #32
 800cadc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cae0:	2330      	movs	r3, #48	; 0x30
 800cae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cae6:	4623      	mov	r3, r4
 800cae8:	469a      	mov	sl, r3
 800caea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caee:	b10a      	cbz	r2, 800caf4 <_svfiprintf_r+0x5c>
 800caf0:	2a25      	cmp	r2, #37	; 0x25
 800caf2:	d1f9      	bne.n	800cae8 <_svfiprintf_r+0x50>
 800caf4:	ebba 0b04 	subs.w	fp, sl, r4
 800caf8:	d00b      	beq.n	800cb12 <_svfiprintf_r+0x7a>
 800cafa:	465b      	mov	r3, fp
 800cafc:	4622      	mov	r2, r4
 800cafe:	4629      	mov	r1, r5
 800cb00:	4638      	mov	r0, r7
 800cb02:	f7ff ff6f 	bl	800c9e4 <__ssputs_r>
 800cb06:	3001      	adds	r0, #1
 800cb08:	f000 80a9 	beq.w	800cc5e <_svfiprintf_r+0x1c6>
 800cb0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb0e:	445a      	add	r2, fp
 800cb10:	9209      	str	r2, [sp, #36]	; 0x24
 800cb12:	f89a 3000 	ldrb.w	r3, [sl]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 80a1 	beq.w	800cc5e <_svfiprintf_r+0x1c6>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb22:	f10a 0a01 	add.w	sl, sl, #1
 800cb26:	9304      	str	r3, [sp, #16]
 800cb28:	9307      	str	r3, [sp, #28]
 800cb2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb2e:	931a      	str	r3, [sp, #104]	; 0x68
 800cb30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb34:	4654      	mov	r4, sl
 800cb36:	2205      	movs	r2, #5
 800cb38:	4851      	ldr	r0, [pc, #324]	; (800cc80 <_svfiprintf_r+0x1e8>)
 800cb3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb3e:	f000 fa65 	bl	800d00c <memchr>
 800cb42:	9a04      	ldr	r2, [sp, #16]
 800cb44:	b9d8      	cbnz	r0, 800cb7e <_svfiprintf_r+0xe6>
 800cb46:	06d0      	lsls	r0, r2, #27
 800cb48:	bf44      	itt	mi
 800cb4a:	2320      	movmi	r3, #32
 800cb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb50:	0711      	lsls	r1, r2, #28
 800cb52:	bf44      	itt	mi
 800cb54:	232b      	movmi	r3, #43	; 0x2b
 800cb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb5e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb60:	d015      	beq.n	800cb8e <_svfiprintf_r+0xf6>
 800cb62:	9a07      	ldr	r2, [sp, #28]
 800cb64:	4654      	mov	r4, sl
 800cb66:	2000      	movs	r0, #0
 800cb68:	f04f 0c0a 	mov.w	ip, #10
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb72:	3b30      	subs	r3, #48	; 0x30
 800cb74:	2b09      	cmp	r3, #9
 800cb76:	d94d      	bls.n	800cc14 <_svfiprintf_r+0x17c>
 800cb78:	b1b0      	cbz	r0, 800cba8 <_svfiprintf_r+0x110>
 800cb7a:	9207      	str	r2, [sp, #28]
 800cb7c:	e014      	b.n	800cba8 <_svfiprintf_r+0x110>
 800cb7e:	eba0 0308 	sub.w	r3, r0, r8
 800cb82:	46a2      	mov	sl, r4
 800cb84:	fa09 f303 	lsl.w	r3, r9, r3
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	9304      	str	r3, [sp, #16]
 800cb8c:	e7d2      	b.n	800cb34 <_svfiprintf_r+0x9c>
 800cb8e:	9b03      	ldr	r3, [sp, #12]
 800cb90:	1d19      	adds	r1, r3, #4
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	9103      	str	r1, [sp, #12]
 800cb98:	bfbb      	ittet	lt
 800cb9a:	425b      	neglt	r3, r3
 800cb9c:	f042 0202 	orrlt.w	r2, r2, #2
 800cba0:	9307      	strge	r3, [sp, #28]
 800cba2:	9307      	strlt	r3, [sp, #28]
 800cba4:	bfb8      	it	lt
 800cba6:	9204      	strlt	r2, [sp, #16]
 800cba8:	7823      	ldrb	r3, [r4, #0]
 800cbaa:	2b2e      	cmp	r3, #46	; 0x2e
 800cbac:	d10c      	bne.n	800cbc8 <_svfiprintf_r+0x130>
 800cbae:	7863      	ldrb	r3, [r4, #1]
 800cbb0:	2b2a      	cmp	r3, #42	; 0x2a
 800cbb2:	d134      	bne.n	800cc1e <_svfiprintf_r+0x186>
 800cbb4:	9b03      	ldr	r3, [sp, #12]
 800cbb6:	3402      	adds	r4, #2
 800cbb8:	1d1a      	adds	r2, r3, #4
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	9203      	str	r2, [sp, #12]
 800cbc0:	bfb8      	it	lt
 800cbc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbc6:	9305      	str	r3, [sp, #20]
 800cbc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cc90 <_svfiprintf_r+0x1f8>
 800cbcc:	2203      	movs	r2, #3
 800cbce:	7821      	ldrb	r1, [r4, #0]
 800cbd0:	4650      	mov	r0, sl
 800cbd2:	f000 fa1b 	bl	800d00c <memchr>
 800cbd6:	b138      	cbz	r0, 800cbe8 <_svfiprintf_r+0x150>
 800cbd8:	eba0 000a 	sub.w	r0, r0, sl
 800cbdc:	2240      	movs	r2, #64	; 0x40
 800cbde:	9b04      	ldr	r3, [sp, #16]
 800cbe0:	3401      	adds	r4, #1
 800cbe2:	4082      	lsls	r2, r0
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	9304      	str	r3, [sp, #16]
 800cbe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbec:	2206      	movs	r2, #6
 800cbee:	4825      	ldr	r0, [pc, #148]	; (800cc84 <_svfiprintf_r+0x1ec>)
 800cbf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbf4:	f000 fa0a 	bl	800d00c <memchr>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d038      	beq.n	800cc6e <_svfiprintf_r+0x1d6>
 800cbfc:	4b22      	ldr	r3, [pc, #136]	; (800cc88 <_svfiprintf_r+0x1f0>)
 800cbfe:	bb1b      	cbnz	r3, 800cc48 <_svfiprintf_r+0x1b0>
 800cc00:	9b03      	ldr	r3, [sp, #12]
 800cc02:	3307      	adds	r3, #7
 800cc04:	f023 0307 	bic.w	r3, r3, #7
 800cc08:	3308      	adds	r3, #8
 800cc0a:	9303      	str	r3, [sp, #12]
 800cc0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc0e:	4433      	add	r3, r6
 800cc10:	9309      	str	r3, [sp, #36]	; 0x24
 800cc12:	e768      	b.n	800cae6 <_svfiprintf_r+0x4e>
 800cc14:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc18:	460c      	mov	r4, r1
 800cc1a:	2001      	movs	r0, #1
 800cc1c:	e7a6      	b.n	800cb6c <_svfiprintf_r+0xd4>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	3401      	adds	r4, #1
 800cc22:	f04f 0c0a 	mov.w	ip, #10
 800cc26:	4619      	mov	r1, r3
 800cc28:	9305      	str	r3, [sp, #20]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc30:	3a30      	subs	r2, #48	; 0x30
 800cc32:	2a09      	cmp	r2, #9
 800cc34:	d903      	bls.n	800cc3e <_svfiprintf_r+0x1a6>
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d0c6      	beq.n	800cbc8 <_svfiprintf_r+0x130>
 800cc3a:	9105      	str	r1, [sp, #20]
 800cc3c:	e7c4      	b.n	800cbc8 <_svfiprintf_r+0x130>
 800cc3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc42:	4604      	mov	r4, r0
 800cc44:	2301      	movs	r3, #1
 800cc46:	e7f0      	b.n	800cc2a <_svfiprintf_r+0x192>
 800cc48:	ab03      	add	r3, sp, #12
 800cc4a:	462a      	mov	r2, r5
 800cc4c:	a904      	add	r1, sp, #16
 800cc4e:	4638      	mov	r0, r7
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	4b0e      	ldr	r3, [pc, #56]	; (800cc8c <_svfiprintf_r+0x1f4>)
 800cc54:	f3af 8000 	nop.w
 800cc58:	1c42      	adds	r2, r0, #1
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	d1d6      	bne.n	800cc0c <_svfiprintf_r+0x174>
 800cc5e:	89ab      	ldrh	r3, [r5, #12]
 800cc60:	065b      	lsls	r3, r3, #25
 800cc62:	f53f af2d 	bmi.w	800cac0 <_svfiprintf_r+0x28>
 800cc66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc68:	b01d      	add	sp, #116	; 0x74
 800cc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc6e:	ab03      	add	r3, sp, #12
 800cc70:	462a      	mov	r2, r5
 800cc72:	a904      	add	r1, sp, #16
 800cc74:	4638      	mov	r0, r7
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	4b04      	ldr	r3, [pc, #16]	; (800cc8c <_svfiprintf_r+0x1f4>)
 800cc7a:	f000 f87d 	bl	800cd78 <_printf_i>
 800cc7e:	e7eb      	b.n	800cc58 <_svfiprintf_r+0x1c0>
 800cc80:	0800d1d4 	.word	0x0800d1d4
 800cc84:	0800d1de 	.word	0x0800d1de
 800cc88:	00000000 	.word	0x00000000
 800cc8c:	0800c9e5 	.word	0x0800c9e5
 800cc90:	0800d1da 	.word	0x0800d1da

0800cc94 <_printf_common>:
 800cc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc98:	4616      	mov	r6, r2
 800cc9a:	4699      	mov	r9, r3
 800cc9c:	688a      	ldr	r2, [r1, #8]
 800cc9e:	4607      	mov	r7, r0
 800cca0:	690b      	ldr	r3, [r1, #16]
 800cca2:	460c      	mov	r4, r1
 800cca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	bfb8      	it	lt
 800ccac:	4613      	movlt	r3, r2
 800ccae:	6033      	str	r3, [r6, #0]
 800ccb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccb4:	b10a      	cbz	r2, 800ccba <_printf_common+0x26>
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	6033      	str	r3, [r6, #0]
 800ccba:	6823      	ldr	r3, [r4, #0]
 800ccbc:	0699      	lsls	r1, r3, #26
 800ccbe:	bf42      	ittt	mi
 800ccc0:	6833      	ldrmi	r3, [r6, #0]
 800ccc2:	3302      	addmi	r3, #2
 800ccc4:	6033      	strmi	r3, [r6, #0]
 800ccc6:	6825      	ldr	r5, [r4, #0]
 800ccc8:	f015 0506 	ands.w	r5, r5, #6
 800cccc:	d106      	bne.n	800ccdc <_printf_common+0x48>
 800ccce:	f104 0a19 	add.w	sl, r4, #25
 800ccd2:	68e3      	ldr	r3, [r4, #12]
 800ccd4:	6832      	ldr	r2, [r6, #0]
 800ccd6:	1a9b      	subs	r3, r3, r2
 800ccd8:	42ab      	cmp	r3, r5
 800ccda:	dc2b      	bgt.n	800cd34 <_printf_common+0xa0>
 800ccdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cce0:	1e13      	subs	r3, r2, #0
 800cce2:	6822      	ldr	r2, [r4, #0]
 800cce4:	bf18      	it	ne
 800cce6:	2301      	movne	r3, #1
 800cce8:	0692      	lsls	r2, r2, #26
 800ccea:	d430      	bmi.n	800cd4e <_printf_common+0xba>
 800ccec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	4638      	mov	r0, r7
 800ccf4:	47c0      	blx	r8
 800ccf6:	3001      	adds	r0, #1
 800ccf8:	d023      	beq.n	800cd42 <_printf_common+0xae>
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	341a      	adds	r4, #26
 800ccfe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800cd02:	f003 0306 	and.w	r3, r3, #6
 800cd06:	2b04      	cmp	r3, #4
 800cd08:	bf0a      	itet	eq
 800cd0a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800cd0e:	2500      	movne	r5, #0
 800cd10:	6833      	ldreq	r3, [r6, #0]
 800cd12:	f04f 0600 	mov.w	r6, #0
 800cd16:	bf08      	it	eq
 800cd18:	1aed      	subeq	r5, r5, r3
 800cd1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cd1e:	bf08      	it	eq
 800cd20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd24:	4293      	cmp	r3, r2
 800cd26:	bfc4      	itt	gt
 800cd28:	1a9b      	subgt	r3, r3, r2
 800cd2a:	18ed      	addgt	r5, r5, r3
 800cd2c:	42b5      	cmp	r5, r6
 800cd2e:	d11a      	bne.n	800cd66 <_printf_common+0xd2>
 800cd30:	2000      	movs	r0, #0
 800cd32:	e008      	b.n	800cd46 <_printf_common+0xb2>
 800cd34:	2301      	movs	r3, #1
 800cd36:	4652      	mov	r2, sl
 800cd38:	4649      	mov	r1, r9
 800cd3a:	4638      	mov	r0, r7
 800cd3c:	47c0      	blx	r8
 800cd3e:	3001      	adds	r0, #1
 800cd40:	d103      	bne.n	800cd4a <_printf_common+0xb6>
 800cd42:	f04f 30ff 	mov.w	r0, #4294967295
 800cd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd4a:	3501      	adds	r5, #1
 800cd4c:	e7c1      	b.n	800ccd2 <_printf_common+0x3e>
 800cd4e:	18e1      	adds	r1, r4, r3
 800cd50:	1c5a      	adds	r2, r3, #1
 800cd52:	2030      	movs	r0, #48	; 0x30
 800cd54:	3302      	adds	r3, #2
 800cd56:	4422      	add	r2, r4
 800cd58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd64:	e7c2      	b.n	800ccec <_printf_common+0x58>
 800cd66:	2301      	movs	r3, #1
 800cd68:	4622      	mov	r2, r4
 800cd6a:	4649      	mov	r1, r9
 800cd6c:	4638      	mov	r0, r7
 800cd6e:	47c0      	blx	r8
 800cd70:	3001      	adds	r0, #1
 800cd72:	d0e6      	beq.n	800cd42 <_printf_common+0xae>
 800cd74:	3601      	adds	r6, #1
 800cd76:	e7d9      	b.n	800cd2c <_printf_common+0x98>

0800cd78 <_printf_i>:
 800cd78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd7c:	7e0f      	ldrb	r7, [r1, #24]
 800cd7e:	4691      	mov	r9, r2
 800cd80:	4680      	mov	r8, r0
 800cd82:	460c      	mov	r4, r1
 800cd84:	2f78      	cmp	r7, #120	; 0x78
 800cd86:	469a      	mov	sl, r3
 800cd88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd8e:	d807      	bhi.n	800cda0 <_printf_i+0x28>
 800cd90:	2f62      	cmp	r7, #98	; 0x62
 800cd92:	d80a      	bhi.n	800cdaa <_printf_i+0x32>
 800cd94:	2f00      	cmp	r7, #0
 800cd96:	f000 80d3 	beq.w	800cf40 <_printf_i+0x1c8>
 800cd9a:	2f58      	cmp	r7, #88	; 0x58
 800cd9c:	f000 80bf 	beq.w	800cf1e <_printf_i+0x1a6>
 800cda0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cda4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cda8:	e03a      	b.n	800ce20 <_printf_i+0xa8>
 800cdaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdae:	2b15      	cmp	r3, #21
 800cdb0:	d8f6      	bhi.n	800cda0 <_printf_i+0x28>
 800cdb2:	a101      	add	r1, pc, #4	; (adr r1, 800cdb8 <_printf_i+0x40>)
 800cdb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdb8:	0800ce11 	.word	0x0800ce11
 800cdbc:	0800ce25 	.word	0x0800ce25
 800cdc0:	0800cda1 	.word	0x0800cda1
 800cdc4:	0800cda1 	.word	0x0800cda1
 800cdc8:	0800cda1 	.word	0x0800cda1
 800cdcc:	0800cda1 	.word	0x0800cda1
 800cdd0:	0800ce25 	.word	0x0800ce25
 800cdd4:	0800cda1 	.word	0x0800cda1
 800cdd8:	0800cda1 	.word	0x0800cda1
 800cddc:	0800cda1 	.word	0x0800cda1
 800cde0:	0800cda1 	.word	0x0800cda1
 800cde4:	0800cf27 	.word	0x0800cf27
 800cde8:	0800ce51 	.word	0x0800ce51
 800cdec:	0800cee3 	.word	0x0800cee3
 800cdf0:	0800cda1 	.word	0x0800cda1
 800cdf4:	0800cda1 	.word	0x0800cda1
 800cdf8:	0800cf49 	.word	0x0800cf49
 800cdfc:	0800cda1 	.word	0x0800cda1
 800ce00:	0800ce51 	.word	0x0800ce51
 800ce04:	0800cda1 	.word	0x0800cda1
 800ce08:	0800cda1 	.word	0x0800cda1
 800ce0c:	0800ceeb 	.word	0x0800ceeb
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	1d1a      	adds	r2, r3, #4
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	602a      	str	r2, [r5, #0]
 800ce18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce20:	2301      	movs	r3, #1
 800ce22:	e09e      	b.n	800cf62 <_printf_i+0x1ea>
 800ce24:	6820      	ldr	r0, [r4, #0]
 800ce26:	682b      	ldr	r3, [r5, #0]
 800ce28:	0607      	lsls	r7, r0, #24
 800ce2a:	f103 0104 	add.w	r1, r3, #4
 800ce2e:	6029      	str	r1, [r5, #0]
 800ce30:	d501      	bpl.n	800ce36 <_printf_i+0xbe>
 800ce32:	681e      	ldr	r6, [r3, #0]
 800ce34:	e003      	b.n	800ce3e <_printf_i+0xc6>
 800ce36:	0646      	lsls	r6, r0, #25
 800ce38:	d5fb      	bpl.n	800ce32 <_printf_i+0xba>
 800ce3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ce3e:	2e00      	cmp	r6, #0
 800ce40:	da03      	bge.n	800ce4a <_printf_i+0xd2>
 800ce42:	232d      	movs	r3, #45	; 0x2d
 800ce44:	4276      	negs	r6, r6
 800ce46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce4a:	4859      	ldr	r0, [pc, #356]	; (800cfb0 <_printf_i+0x238>)
 800ce4c:	230a      	movs	r3, #10
 800ce4e:	e012      	b.n	800ce76 <_printf_i+0xfe>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	6820      	ldr	r0, [r4, #0]
 800ce54:	1d19      	adds	r1, r3, #4
 800ce56:	6029      	str	r1, [r5, #0]
 800ce58:	0605      	lsls	r5, r0, #24
 800ce5a:	d501      	bpl.n	800ce60 <_printf_i+0xe8>
 800ce5c:	681e      	ldr	r6, [r3, #0]
 800ce5e:	e002      	b.n	800ce66 <_printf_i+0xee>
 800ce60:	0641      	lsls	r1, r0, #25
 800ce62:	d5fb      	bpl.n	800ce5c <_printf_i+0xe4>
 800ce64:	881e      	ldrh	r6, [r3, #0]
 800ce66:	2f6f      	cmp	r7, #111	; 0x6f
 800ce68:	4851      	ldr	r0, [pc, #324]	; (800cfb0 <_printf_i+0x238>)
 800ce6a:	bf0c      	ite	eq
 800ce6c:	2308      	moveq	r3, #8
 800ce6e:	230a      	movne	r3, #10
 800ce70:	2100      	movs	r1, #0
 800ce72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce76:	6865      	ldr	r5, [r4, #4]
 800ce78:	2d00      	cmp	r5, #0
 800ce7a:	60a5      	str	r5, [r4, #8]
 800ce7c:	bfa2      	ittt	ge
 800ce7e:	6821      	ldrge	r1, [r4, #0]
 800ce80:	f021 0104 	bicge.w	r1, r1, #4
 800ce84:	6021      	strge	r1, [r4, #0]
 800ce86:	b90e      	cbnz	r6, 800ce8c <_printf_i+0x114>
 800ce88:	2d00      	cmp	r5, #0
 800ce8a:	d04a      	beq.n	800cf22 <_printf_i+0x1aa>
 800ce8c:	4615      	mov	r5, r2
 800ce8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce92:	fb03 6711 	mls	r7, r3, r1, r6
 800ce96:	5dc7      	ldrb	r7, [r0, r7]
 800ce98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce9c:	4637      	mov	r7, r6
 800ce9e:	460e      	mov	r6, r1
 800cea0:	42bb      	cmp	r3, r7
 800cea2:	d9f4      	bls.n	800ce8e <_printf_i+0x116>
 800cea4:	2b08      	cmp	r3, #8
 800cea6:	d10b      	bne.n	800cec0 <_printf_i+0x148>
 800cea8:	6823      	ldr	r3, [r4, #0]
 800ceaa:	07de      	lsls	r6, r3, #31
 800ceac:	d508      	bpl.n	800cec0 <_printf_i+0x148>
 800ceae:	6923      	ldr	r3, [r4, #16]
 800ceb0:	6861      	ldr	r1, [r4, #4]
 800ceb2:	4299      	cmp	r1, r3
 800ceb4:	bfde      	ittt	le
 800ceb6:	2330      	movle	r3, #48	; 0x30
 800ceb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cec0:	1b52      	subs	r2, r2, r5
 800cec2:	6122      	str	r2, [r4, #16]
 800cec4:	464b      	mov	r3, r9
 800cec6:	aa03      	add	r2, sp, #12
 800cec8:	4621      	mov	r1, r4
 800ceca:	4640      	mov	r0, r8
 800cecc:	f8cd a000 	str.w	sl, [sp]
 800ced0:	f7ff fee0 	bl	800cc94 <_printf_common>
 800ced4:	3001      	adds	r0, #1
 800ced6:	d149      	bne.n	800cf6c <_printf_i+0x1f4>
 800ced8:	f04f 30ff 	mov.w	r0, #4294967295
 800cedc:	b004      	add	sp, #16
 800cede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	f043 0320 	orr.w	r3, r3, #32
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	2778      	movs	r7, #120	; 0x78
 800ceec:	4831      	ldr	r0, [pc, #196]	; (800cfb4 <_printf_i+0x23c>)
 800ceee:	6823      	ldr	r3, [r4, #0]
 800cef0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cef4:	061f      	lsls	r7, r3, #24
 800cef6:	6829      	ldr	r1, [r5, #0]
 800cef8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cefc:	d402      	bmi.n	800cf04 <_printf_i+0x18c>
 800cefe:	065f      	lsls	r7, r3, #25
 800cf00:	bf48      	it	mi
 800cf02:	b2b6      	uxthmi	r6, r6
 800cf04:	07df      	lsls	r7, r3, #31
 800cf06:	6029      	str	r1, [r5, #0]
 800cf08:	bf44      	itt	mi
 800cf0a:	f043 0320 	orrmi.w	r3, r3, #32
 800cf0e:	6023      	strmi	r3, [r4, #0]
 800cf10:	b91e      	cbnz	r6, 800cf1a <_printf_i+0x1a2>
 800cf12:	6823      	ldr	r3, [r4, #0]
 800cf14:	f023 0320 	bic.w	r3, r3, #32
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	2310      	movs	r3, #16
 800cf1c:	e7a8      	b.n	800ce70 <_printf_i+0xf8>
 800cf1e:	4824      	ldr	r0, [pc, #144]	; (800cfb0 <_printf_i+0x238>)
 800cf20:	e7e5      	b.n	800ceee <_printf_i+0x176>
 800cf22:	4615      	mov	r5, r2
 800cf24:	e7be      	b.n	800cea4 <_printf_i+0x12c>
 800cf26:	682b      	ldr	r3, [r5, #0]
 800cf28:	6826      	ldr	r6, [r4, #0]
 800cf2a:	1d18      	adds	r0, r3, #4
 800cf2c:	6961      	ldr	r1, [r4, #20]
 800cf2e:	6028      	str	r0, [r5, #0]
 800cf30:	0635      	lsls	r5, r6, #24
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	d501      	bpl.n	800cf3a <_printf_i+0x1c2>
 800cf36:	6019      	str	r1, [r3, #0]
 800cf38:	e002      	b.n	800cf40 <_printf_i+0x1c8>
 800cf3a:	0670      	lsls	r0, r6, #25
 800cf3c:	d5fb      	bpl.n	800cf36 <_printf_i+0x1be>
 800cf3e:	8019      	strh	r1, [r3, #0]
 800cf40:	2300      	movs	r3, #0
 800cf42:	4615      	mov	r5, r2
 800cf44:	6123      	str	r3, [r4, #16]
 800cf46:	e7bd      	b.n	800cec4 <_printf_i+0x14c>
 800cf48:	682b      	ldr	r3, [r5, #0]
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	1d1a      	adds	r2, r3, #4
 800cf4e:	602a      	str	r2, [r5, #0]
 800cf50:	681d      	ldr	r5, [r3, #0]
 800cf52:	6862      	ldr	r2, [r4, #4]
 800cf54:	4628      	mov	r0, r5
 800cf56:	f000 f859 	bl	800d00c <memchr>
 800cf5a:	b108      	cbz	r0, 800cf60 <_printf_i+0x1e8>
 800cf5c:	1b40      	subs	r0, r0, r5
 800cf5e:	6060      	str	r0, [r4, #4]
 800cf60:	6863      	ldr	r3, [r4, #4]
 800cf62:	6123      	str	r3, [r4, #16]
 800cf64:	2300      	movs	r3, #0
 800cf66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf6a:	e7ab      	b.n	800cec4 <_printf_i+0x14c>
 800cf6c:	6923      	ldr	r3, [r4, #16]
 800cf6e:	462a      	mov	r2, r5
 800cf70:	4649      	mov	r1, r9
 800cf72:	4640      	mov	r0, r8
 800cf74:	47d0      	blx	sl
 800cf76:	3001      	adds	r0, #1
 800cf78:	d0ae      	beq.n	800ced8 <_printf_i+0x160>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	079b      	lsls	r3, r3, #30
 800cf7e:	d413      	bmi.n	800cfa8 <_printf_i+0x230>
 800cf80:	68e0      	ldr	r0, [r4, #12]
 800cf82:	9b03      	ldr	r3, [sp, #12]
 800cf84:	4298      	cmp	r0, r3
 800cf86:	bfb8      	it	lt
 800cf88:	4618      	movlt	r0, r3
 800cf8a:	e7a7      	b.n	800cedc <_printf_i+0x164>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	4632      	mov	r2, r6
 800cf90:	4649      	mov	r1, r9
 800cf92:	4640      	mov	r0, r8
 800cf94:	47d0      	blx	sl
 800cf96:	3001      	adds	r0, #1
 800cf98:	d09e      	beq.n	800ced8 <_printf_i+0x160>
 800cf9a:	3501      	adds	r5, #1
 800cf9c:	68e3      	ldr	r3, [r4, #12]
 800cf9e:	9903      	ldr	r1, [sp, #12]
 800cfa0:	1a5b      	subs	r3, r3, r1
 800cfa2:	42ab      	cmp	r3, r5
 800cfa4:	dcf2      	bgt.n	800cf8c <_printf_i+0x214>
 800cfa6:	e7eb      	b.n	800cf80 <_printf_i+0x208>
 800cfa8:	2500      	movs	r5, #0
 800cfaa:	f104 0619 	add.w	r6, r4, #25
 800cfae:	e7f5      	b.n	800cf9c <_printf_i+0x224>
 800cfb0:	0800d1e5 	.word	0x0800d1e5
 800cfb4:	0800d1f6 	.word	0x0800d1f6

0800cfb8 <memmove>:
 800cfb8:	4288      	cmp	r0, r1
 800cfba:	b510      	push	{r4, lr}
 800cfbc:	eb01 0402 	add.w	r4, r1, r2
 800cfc0:	d902      	bls.n	800cfc8 <memmove+0x10>
 800cfc2:	4284      	cmp	r4, r0
 800cfc4:	4623      	mov	r3, r4
 800cfc6:	d807      	bhi.n	800cfd8 <memmove+0x20>
 800cfc8:	1e43      	subs	r3, r0, #1
 800cfca:	42a1      	cmp	r1, r4
 800cfcc:	d008      	beq.n	800cfe0 <memmove+0x28>
 800cfce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfd6:	e7f8      	b.n	800cfca <memmove+0x12>
 800cfd8:	4402      	add	r2, r0
 800cfda:	4601      	mov	r1, r0
 800cfdc:	428a      	cmp	r2, r1
 800cfde:	d100      	bne.n	800cfe2 <memmove+0x2a>
 800cfe0:	bd10      	pop	{r4, pc}
 800cfe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfea:	e7f7      	b.n	800cfdc <memmove+0x24>

0800cfec <_sbrk_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	2300      	movs	r3, #0
 800cff0:	4d05      	ldr	r5, [pc, #20]	; (800d008 <_sbrk_r+0x1c>)
 800cff2:	4604      	mov	r4, r0
 800cff4:	4608      	mov	r0, r1
 800cff6:	602b      	str	r3, [r5, #0]
 800cff8:	f7f4 fa48 	bl	800148c <_sbrk>
 800cffc:	1c43      	adds	r3, r0, #1
 800cffe:	d102      	bne.n	800d006 <_sbrk_r+0x1a>
 800d000:	682b      	ldr	r3, [r5, #0]
 800d002:	b103      	cbz	r3, 800d006 <_sbrk_r+0x1a>
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	bd38      	pop	{r3, r4, r5, pc}
 800d008:	20000a74 	.word	0x20000a74

0800d00c <memchr>:
 800d00c:	b2c9      	uxtb	r1, r1
 800d00e:	4402      	add	r2, r0
 800d010:	b510      	push	{r4, lr}
 800d012:	4290      	cmp	r0, r2
 800d014:	4603      	mov	r3, r0
 800d016:	d101      	bne.n	800d01c <memchr+0x10>
 800d018:	2300      	movs	r3, #0
 800d01a:	e003      	b.n	800d024 <memchr+0x18>
 800d01c:	781c      	ldrb	r4, [r3, #0]
 800d01e:	3001      	adds	r0, #1
 800d020:	428c      	cmp	r4, r1
 800d022:	d1f6      	bne.n	800d012 <memchr+0x6>
 800d024:	4618      	mov	r0, r3
 800d026:	bd10      	pop	{r4, pc}

0800d028 <memcpy>:
 800d028:	440a      	add	r2, r1
 800d02a:	1e43      	subs	r3, r0, #1
 800d02c:	4291      	cmp	r1, r2
 800d02e:	d100      	bne.n	800d032 <memcpy+0xa>
 800d030:	4770      	bx	lr
 800d032:	b510      	push	{r4, lr}
 800d034:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d038:	4291      	cmp	r1, r2
 800d03a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d03e:	d1f9      	bne.n	800d034 <memcpy+0xc>
 800d040:	bd10      	pop	{r4, pc}

0800d042 <_realloc_r>:
 800d042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d046:	4680      	mov	r8, r0
 800d048:	4614      	mov	r4, r2
 800d04a:	460e      	mov	r6, r1
 800d04c:	b921      	cbnz	r1, 800d058 <_realloc_r+0x16>
 800d04e:	4611      	mov	r1, r2
 800d050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d054:	f7ff bc3a 	b.w	800c8cc <_malloc_r>
 800d058:	b92a      	cbnz	r2, 800d066 <_realloc_r+0x24>
 800d05a:	4625      	mov	r5, r4
 800d05c:	f7ff fbca 	bl	800c7f4 <_free_r>
 800d060:	4628      	mov	r0, r5
 800d062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d066:	f000 f81b 	bl	800d0a0 <_malloc_usable_size_r>
 800d06a:	4284      	cmp	r4, r0
 800d06c:	4607      	mov	r7, r0
 800d06e:	d802      	bhi.n	800d076 <_realloc_r+0x34>
 800d070:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d074:	d812      	bhi.n	800d09c <_realloc_r+0x5a>
 800d076:	4621      	mov	r1, r4
 800d078:	4640      	mov	r0, r8
 800d07a:	f7ff fc27 	bl	800c8cc <_malloc_r>
 800d07e:	4605      	mov	r5, r0
 800d080:	2800      	cmp	r0, #0
 800d082:	d0ed      	beq.n	800d060 <_realloc_r+0x1e>
 800d084:	42bc      	cmp	r4, r7
 800d086:	4622      	mov	r2, r4
 800d088:	4631      	mov	r1, r6
 800d08a:	bf28      	it	cs
 800d08c:	463a      	movcs	r2, r7
 800d08e:	f7ff ffcb 	bl	800d028 <memcpy>
 800d092:	4631      	mov	r1, r6
 800d094:	4640      	mov	r0, r8
 800d096:	f7ff fbad 	bl	800c7f4 <_free_r>
 800d09a:	e7e1      	b.n	800d060 <_realloc_r+0x1e>
 800d09c:	4635      	mov	r5, r6
 800d09e:	e7df      	b.n	800d060 <_realloc_r+0x1e>

0800d0a0 <_malloc_usable_size_r>:
 800d0a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0a4:	1f18      	subs	r0, r3, #4
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	bfbc      	itt	lt
 800d0aa:	580b      	ldrlt	r3, [r1, r0]
 800d0ac:	18c0      	addlt	r0, r0, r3
 800d0ae:	4770      	bx	lr

0800d0b0 <_init>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	bf00      	nop
 800d0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b6:	bc08      	pop	{r3}
 800d0b8:	469e      	mov	lr, r3
 800d0ba:	4770      	bx	lr

0800d0bc <_fini>:
 800d0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0be:	bf00      	nop
 800d0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c2:	bc08      	pop	{r3}
 800d0c4:	469e      	mov	lr, r3
 800d0c6:	4770      	bx	lr
